<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>骚客.的个人博客</title>
  
  <subtitle>记录我的学习过程</subtitle>
  <link href="http://princesaoke.github.io/atom.xml" rel="self"/>
  
  <link href="http://princesaoke.github.io/"/>
  <updated>2023-11-23T12:25:55.475Z</updated>
  <id>http://princesaoke.github.io/</id>
  
  <author>
    <name>骚客.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL笔记</title>
    <link href="http://princesaoke.github.io/2023/11/22/MySQL%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/11/22/MySQL%E7%AC%94%E8%AE%B0/</id>
    <published>2023-11-22T08:03:48.000Z</published>
    <updated>2023-11-23T12:25:55.475Z</updated>
    
    <content type="html"><![CDATA[<p><em><a href="https://blog.csdn.net/select_myname/article/details/126314725">很全的MySQL常用指令</a></em></p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>在<a href="https://downloads.mysql.com/archives/community/">官方下载地址</a>下载压缩包。</p><p><img src="/images/MySQL%E7%AC%94%E8%AE%B0/mysql_download.png" alt="mysql_download"></p><p>解压到要保存的路径，在 环境变量 -&gt; 系统变量 -&gt; Path 里面添加一行，指向MySQL的bin目录，如<code>D:\mysql-8.0.33-winx64\bin</code>。</p><p>在MySQL的bin文件夹里新建文件<code>my.ini</code>，文件内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置mysql的安装目录(能看到bin即可)</span><br><span class="line">basedir=D:\mysql-8.0.33-winx64\</span><br><span class="line"># 设置mysql的数据存放目录</span><br><span class="line">datadir=D:\mysql-8.0.33-winx64\data\</span><br><span class="line"># mysql端口</span><br><span class="line">port=3306</span><br><span class="line"># 跳过授权</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><p>记得把其中的路径换成你自己的安装路径。</p><p>然后以管理员身份打开cmd，进入MySQL的bin目录，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 mysql 服务</span></span><br><span class="line">mysqld –install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 data 文件夹 （你可以初始化多次，但是每次必须清空data文件夹）</span></span><br><span class="line">mysqld --initialize-insecure --user=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 mysql 服务</span></span><br><span class="line">net start mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 mysql(让你输密码，直接回车即可)</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 root 账户密码</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH <span class="string">&#x27;mysql_native_password&#x27;</span> BY <span class="string">&#x27;新密码&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新权限，使之生效</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>然后将my.ini里跳过授权给注释掉<code># skip-grant-tables</code></p><p>输入<code>\q</code>退出登录MySQL，然后重启MySQL用新设置的密码登录即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p><code>mysql -uroot -p</code>这句意思是用户名为<code>root</code>，也可以在<code>-p</code>后直接跟密码，这样密码是可见的。</p><h3 id="Windows-Server-2022-上遇到的问题"><a href="#Windows-Server-2022-上遇到的问题" class="headerlink" title="Windows Server 2022 上遇到的问题"></a>Windows Server 2022 上遇到的问题</h3><h5 id="安装MySQL和初始化data文件夹时报错：找不到MSVCP140-dll文件"><a href="#安装MySQL和初始化data文件夹时报错：找不到MSVCP140-dll文件" class="headerlink" title="安装MySQL和初始化data文件夹时报错：找不到MSVCP140.dll文件"></a>安装MySQL和初始化data文件夹时报错：找不到<code>MSVCP140.dll</code>文件</h5><p>解决方法：安装 Microsoft Visual C++ Redistributable 客户端库，<a href="https://www.microsoft.com/en-us/download/details.aspx?id=48145">点击前往下载</a>。</p><h5 id="输入net-start-mysql时报错：服务没有响应控制功能"><a href="#输入net-start-mysql时报错：服务没有响应控制功能" class="headerlink" title="输入net start mysql时报错：服务没有响应控制功能"></a>输入<code>net start mysql</code>时报错：服务没有响应控制功能</h5><p>解决方法：下载<a href="https://cn.dll-files.com/vcruntime140_1.dll.html">VCRUNTIME140_1.dll</a>，解压后拷贝到MySQL的bin文件夹下。</p><h2 id="远程连接数据库"><a href="#远程连接数据库" class="headerlink" title="远程连接数据库"></a>远程连接数据库</h2><h4 id="开放MySQL端口"><a href="#开放MySQL端口" class="headerlink" title="开放MySQL端口"></a>开放MySQL端口</h4><p>首先要确保服务器的MySQL端口是放行的，在my.ini中我们设置了3306端口。</p><p>以阿里云服务器为例，在安全组中手动添加访问规则，目的端口3306，源0.0.0.0。</p><p>若端口没有放行，则会有以下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 2003 (HY000): Can<span class="string">&#x27;t connect to MySQL server on &#x27;</span>XXX.XXX.XXX.XXX:3306<span class="string">&#x27; (10060)</span></span><br></pre></td></tr></table></figure><h4 id="设置远程登录权限"><a href="#设置远程登录权限" class="headerlink" title="设置远程登录权限"></a>设置远程登录权限</h4><p>在服务器上登录MySQL，然后输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host=&#x27;%&#x27; where user=&#x27;root&#x27;; // 开放远程登录权限</span><br><span class="line">flush privileges;   // 刷新权限</span><br></pre></td></tr></table></figure><p>若没开启权限，则报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1130 (HY000): Host <span class="string">&#x27;XXX.XXX.XXX.XXX&#x27;</span> is not allowed to connect to this MySQL server</span><br></pre></td></tr></table></figure><h4 id="远程登录MySQL"><a href="#远程登录MySQL" class="headerlink" title="远程登录MySQL"></a>远程登录MySQL</h4><p>在自己的电脑上打开cmd，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h主机地址 -u用户名 -p</span><br></pre></td></tr></table></figure><h2 id="MySQL数据的备份"><a href="#MySQL数据的备份" class="headerlink" title="MySQL数据的备份"></a>MySQL数据的备份</h2><p>终端进入MySQL安装目录下的bin目录，执行指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p 数据库名 &gt; 备份文件路径及文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">mysqldump -uroot -p flower_shop &gt; flower_shop_backup.sql</span><br></pre></td></tr></table></figure><h2 id="MySQL备份数据的还原"><a href="#MySQL备份数据的还原" class="headerlink" title="MySQL备份数据的还原"></a>MySQL备份数据的还原</h2><p>登录MySQL后执行以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名称;  // 创建一个新的数据库用于承载迁移来的数据</span><br><span class="line">use 数据库名称;              // 切换到该数据库</span><br><span class="line">source 文件路径;             // 导入备份数据</span><br></pre></td></tr></table></figure><h2 id="存储过程-Procedure"><a href="#存储过程-Procedure" class="headerlink" title="存储过程 &#x2F; Procedure"></a>存储过程 &#x2F; Procedure</h2><p>相当于编程语言中的方法，定义SQL语句模板，可以传参调用。</p><p>创建一个存储过程，用于查询某种花的价格，调用后删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure getFlowerPrice(in name varchar(15))</span><br><span class="line">begin</span><br><span class="line">    select price from flower where flower.name=name;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call getFlowerPrice(&#x27;红玫瑰&#x27;);</span><br><span class="line"></span><br><span class="line">drop procedure getFlowerPrice;  # 删除存储过程</span><br></pre></td></tr></table></figure><p>其中<code>delimiter</code>作用是修改SQL语句结束符，避免存储过程中的<code>;</code>和语句结束符混淆。</p><h2 id="触发器-Trigger"><a href="#触发器-Trigger" class="headerlink" title="触发器 &#x2F; Trigger"></a>触发器 &#x2F; Trigger</h2><p>在数据插入、修改、删除时自动执行某些操作，可用于数据库日志记录等。</p><p>创建一个触发器，当录入一种花但未给出花语时，将花语设为“暂无”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create trigger my_trigger before insert on flower for each row</span><br><span class="line">begin</span><br><span class="line">    if new.flower_language is null then</span><br><span class="line">        set new.flower_language=&#x27;暂无&#x27;;</span><br><span class="line">    end if;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">show triggers;  # 查看触发器</span><br><span class="line"></span><br><span class="line">drop trigger flower_shop.my_trigger;    # 删除触发器</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.csdn.net/select_myname/article/details/126314725&quot;&gt;很全的MySQL常用指令&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装MySQL&quot;&gt;&lt;a href=&quot;#安装MySQL&quot;</summary>
      
    
    
    
    <category term="后端" scheme="http://princesaoke.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="MySQL" scheme="http://princesaoke.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Dart笔记</title>
    <link href="http://princesaoke.github.io/2023/11/08/Dart%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/11/08/Dart%E7%AC%94%E8%AE%B0/</id>
    <published>2023-11-08T08:34:56.000Z</published>
    <updated>2023-11-09T16:33:58.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="var-和-dynamic"><a href="#var-和-dynamic" class="headerlink" title="var 和 dynamic"></a>var 和 dynamic</h2><p><code>var</code>未赋初值时，默认值为<code>null</code>，赋值后数据类型可变。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable;</span><br><span class="line"><span class="built_in">print</span>(variable);    <span class="comment">// null</span></span><br><span class="line">variable = <span class="string">&#x27;我是字符串&#x27;</span></span><br><span class="line">variable = <span class="number">10.00</span></span><br></pre></td></tr></table></figure><p><code>dynamic</code>未赋初值时，默认值为<code>null</code>，赋值后数据类型可变，同<code>var</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;var-和-dynamic&quot;&gt;&lt;a href=&quot;#var-和-dynamic&quot; class=&quot;headerlink&quot; title=&quot;var 和 dynamic&quot;&gt;&lt;/a&gt;var 和 dynamic&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var&lt;/code&gt;未赋初值时，默认值为</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Flutter" scheme="http://princesaoke.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin笔记</title>
    <link href="http://princesaoke.github.io/2023/10/27/Kotlin%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/10/27/Kotlin%E7%AC%94%E8%AE%B0/</id>
    <published>2023-10-27T02:52:41.000Z</published>
    <updated>2023-10-27T07:21:40.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kotlin-与-Java-的关系"><a href="#Kotlin-与-Java-的关系" class="headerlink" title="Kotlin 与 Java 的关系"></a>Kotlin 与 Java 的关系</h2><p><code>Java</code>运行过程：Java源代码 -&gt; 编译 -&gt; 生成class文件 -&gt; JVM解释执行</p><p>Java虚拟机并不关心class文件是如何生成的，因此也可以使用<code>Kotlin</code>生成class文件，JVM也可以解释执行。</p><p><code>Kotlin</code>可以无缝使用<code>Java</code>第三方的开源库。</p><h2 id="val-与-var"><a href="#val-与-var" class="headerlink" title="val 与 var"></a>val 与 var</h2><p>类比<code>JavaScript</code>中的<code>const</code>和<code>let</code>。</p><p><code>val</code>用于声明常量，相当于加了<code>final</code>，赋值后无法修改；<code>var</code>用于声明变量。</p><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p><code>Kotlin</code>中的<code>if</code>是带有返回值的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> max = <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">    a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="when"><a href="#when" class="headerlink" title="when"></a>when</h2><p>相当于<code>switch</code>，不过用起来更方便。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">(name: <span class="type">String</span>)</span></span> = <span class="keyword">when</span> (name) &#123;</span><br><span class="line">    <span class="string">&quot;张三&quot;</span> -&gt; <span class="number">85</span></span><br><span class="line">    <span class="string">&quot;李四&quot;</span> -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">91</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h2><h4 id="闭区间"><a href="#闭区间" class="headerlink" title="闭区间"></a>闭区间</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">0.</span><span class="number">.10</span>   <span class="comment">// [0, 10]</span></span><br></pre></td></tr></table></figure><h4 id="左闭右开区间"><a href="#左闭右开区间" class="headerlink" title="左闭右开区间"></a>左闭右开区间</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">0</span> until <span class="number">10</span>   <span class="comment">// [0, 10)</span></span><br></pre></td></tr></table></figure><h4 id="降序闭区间"><a href="#降序闭区间" class="headerlink" title="降序闭区间"></a>降序闭区间</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">10</span> downTo <span class="number">0</span>   <span class="comment">// [10, 0]</span></span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h4 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for - in 循环"></a>for - in 循环</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出 0~9</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">10</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次循环 i+=2</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.10</span> step <span class="number">2</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 0~10 内的偶数</span></span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>Kotlin中有主次构造函数之分。</p><p>主构造函数没有函数体，直接定义在类名的后面。若想在主构造函数中编写一些逻辑，将代码写在<code>init</code>中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="keyword">val</span> name, <span class="keyword">val</span> grade) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">// 主构造函数的逻辑写在这里</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(<span class="string">&#x27;张三&#x27;</span>, <span class="number">86</span>)</span><br></pre></td></tr></table></figure><p>次构造函数有函数体，且必须调用主构造函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="keyword">val</span> name, <span class="keyword">val</span> grade) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">// 主构造函数的逻辑写在这里</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(name: String) : <span class="keyword">this</span>(name, <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 次构造函数逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(<span class="string">&#x27;张三&#x27;</span>, <span class="number">86</span>)</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Kotlin中非抽象类默认都是不可以被继承的，相当于给类加上了<code>final</code>。要声明为可继承类，需要加上<code>open</code>关键字。</p><p>同时子类中的构造函数必须调用父类中的构造函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name) &#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="keyword">val</span> name, <span class="keyword">val</span> grade) : Person(name) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">// 主构造函数的逻辑写在这里</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(<span class="string">&#x27;张三&#x27;</span>, <span class="number">86</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Kotlin-与-Java-的关系&quot;&gt;&lt;a href=&quot;#Kotlin-与-Java-的关系&quot; class=&quot;headerlink&quot; title=&quot;Kotlin 与 Java 的关系&quot;&gt;&lt;/a&gt;Kotlin 与 Java 的关系&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Java</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Kotlin" scheme="http://princesaoke.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>前端笔记</title>
    <link href="http://princesaoke.github.io/2023/10/22/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/10/22/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/</id>
    <published>2023-10-22T05:47:29.000Z</published>
    <updated>2023-10-25T14:45:04.611Z</updated>
    
    <content type="html"><![CDATA[<p>均以<code>Chrome</code>浏览器为例。</p><h2 id="const、let、var的区别"><a href="#const、let、var的区别" class="headerlink" title="const、let、var的区别"></a>const、let、var的区别</h2><p><code>const</code>是常量，定义时必须赋初值，值不可修改。只限制变量绑定的值，不会限制引用数据类型内部的变动。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">a = <span class="number">2</span>   <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">b.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span>     <span class="comment">// 不会报错</span></span><br><span class="line">b = <span class="number">1</span>   <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p><code>let</code>声明的是变量。</p><p><code>const</code>和<code>let</code>只在块内有效，即两个花括号之间，相当于局部的值。</p><p><code>var</code>定义的变量是全局的，但一个函数内<code>var</code>的变量不能在函数外访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;我是a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// 输出&#x27;我是a&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&#x27;我是b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>用<code>var</code>定义两个同名变量，后定义的会覆盖掉先定义的。<code>const</code>和<code>let</code>不允许重复定义。</p><p><code>var</code>存在变量提升的特性。当用<code>var</code>定义了一个变量，即便还未执行到，该变量也已经存在了，且值为<code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// 输出为10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>造成这种现象的原因是，<code>if</code>中用<code>var</code>定义了<code>a</code>，因变量提升（hoisting）特性，在执行前<code>a</code>被提升到函数作用域顶部，且初始值为<code>undefined</code>，于是<code>if</code>成立，早已存在的<code>a</code>由<code>undefined</code>被赋值为<code>10</code>。</p><p>将<code>var</code>改用<code>let</code>就不会有这样的问题。</p><p><strong>总结：无特殊情况不要用<code>var</code>，声明变量用<code>let</code>。声明对象类型用<code>const</code>，非对象类型用<code>let</code>。</strong></p><h2 id="innerHTML-和-innerText-的区别"><a href="#innerHTML-和-innerText-的区别" class="headerlink" title="innerHTML 和 innerText 的区别"></a>innerHTML 和 innerText 的区别</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>innerHTML与innerText的区别<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>hello world <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(div1.<span class="property">innerHTML</span>);    <span class="comment">// &lt;p id=&quot;p1&quot;&gt;hello world &lt;/p&gt;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(div1.<span class="property">innerText</span>)    <span class="comment">// hello world</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="事件循环-消息循环"><a href="#事件循环-消息循环" class="headerlink" title="事件循环 &#x2F; 消息循环"></a>事件循环 &#x2F; 消息循环</h2><h4 id="浏览器的进程模型"><a href="#浏览器的进程模型" class="headerlink" title="浏览器的进程模型"></a>浏览器的进程模型</h4><p>浏览器运行时有很多个进程，我们重点关注三大进程：</p><ul><li>浏览器进程</li><li>网络进程</li><li>渲染进程（不止一个，每一个标签页就是一个渲染进程）</li></ul><p>其中<code>浏览器进程</code>是打开浏览器后最先启动的，负责：</p><ul><li>浏览器通用界面显示，如浏览器工具栏、浏览器设置等</li><li>用户交互，如监听点击、滚动等</li><li>子进程管理，浏览器其他进程均由浏览器进程开启</li><li>……</li></ul><p><code>网络进程</code>负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。</p><p><code>渲染进程</code>可以有多个，每一个标签页就是一个渲染进程，该进程包括一个<code>渲染主线程</code>和其他多个子线程。</p><h4 id="渲染主线程是如何工作的"><a href="#渲染主线程是如何工作的" class="headerlink" title="渲染主线程是如何工作的"></a>渲染主线程是如何工作的</h4><p>渲染主线程的任务包括但不限于：</p><ul><li>解析<code>HTML</code></li><li>解析<code>CSS</code></li><li>计算样式，如把<code>rem</code>转换为<code>px</code>等</li><li>计算布局，如计算元素宽高</li><li>处理图层，如根据<code>z-index</code>判断叠层关系</li><li>每帧绘制页面</li><li>执行<code>JavaSctipt</code></li><li>执行事件处理函数</li><li>执行计时器的回调函数</li><li>……</li></ul><p>主线程每次执行一个任务，执行完后从消息队列中取出下一个任务。所有线程可以随时向消息队列中添加任务。这整个过程称为<code>事件循环</code>。</p><p>若是需要等待的任务，如<code>setTimeout()</code>函数会在等待规定时间后才执行，则不能直接加入消息队列，否则会导致主线程要等待，而后面的任务也无法执行。</p><p>主线程执行到js中的<code>setTimeout()</code>，会把要计时等待的任务交给计时线程，由计时线程到时间后将回调函数加入消息队列。</p><p>Q：如何理解JS的异步？</p><p>A：</p><blockquote><p>JS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。<br>渲染主线程承担着诸多的工作，渲染页面、执行JS都在其中运行。<br>如果使用同步的方式，就极有可能导致主线程阻塞，从而导致消息队列中的很多其他任务无法得到执行。<br>这一方面会导致繁忙的主线程白白消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。<br>所以浏览器采用异步方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。<br>在这种异步模式下，浏览器永不阻塞，最大限度保证了单线程的流畅运行。</p></blockquote><h4 id="任务的优先级"><a href="#任务的优先级" class="headerlink" title="任务的优先级"></a>任务的优先级</h4><p>实际上消息队列不止一个队列，而是有多个队列：<code>微队列</code>、<code>延时队列</code>、<code>交互队列</code>等。</p><p>在W3C标准中，规定<code>微队列</code>是优先级最高的，意味着只有当微队列中所有任务都执行完了才会轮到其他队列。</p><p>在Chrome浏览器中，<code>延时队列</code>用于存放计时器到达后的回调函数，优先级为【中】；交互队列用于存放用户操作后产生的事件处理任务，优先级为【高】。</p><p>Q：阐释一下JS的事件循环？</p><p>A：</p><blockquote><p>事件循环又叫消息循环，是浏览器渲染主线程的工作方式。<br>在Chrome中，它开启一个不会结束的循环，每次循环从消息队列中取出第一个任务执行，而其他线程只要在合适的时候将任务加入到队列末尾即可。<br>过去把消息队列简单分为<code>宏队列</code>和<code>微队列</code>，这种方式已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。<br>根据W3C官方的规定，每个任务有不同的类型，同类型的任务必须在同一个队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务优先级最高，必须优先调度。</p></blockquote><p>Q：JS中的计时器能做到精确计时吗？为什么？</p><p>A：</p><blockquote><p>不行。<br>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，回调函数需要时间排队等待调度，因此带来了时间偏差。<br>操作系统的计时函数本身就有少量偏差，而JS的计时器最终调用的是操作系统的计时函数，因此也具有一定偏差。</p></blockquote><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise.resolve().then(fn) 会将函数fn加入微队列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(fn1)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>Q：浏览器执行以上js代码后输出是什么？</p><p>解析：</p><ol><li><code>setTimeout</code>将函数<code>fn3</code>添加到计时线程，0秒后时间到，计时线程将<code>fn3</code>添加到延时队列中排队等待调度；</li><li>全局js还未执行完，主线程继续执行，将<code>fn4</code>添加到微队列；</li><li>输出<code>5</code>；</li><li>全局js执行完毕，从消息队列中取出下一个任务。由于微队列优先级最高，因此取出<code>fn4</code>执行，输出<code>4</code>；</li><li><code>fn4</code>执行完毕，取出<code>fn3</code>执行，输出<code>3</code>，然后将<code>fn1</code>加入微队列；</li><li><code>fn3</code>执行完毕，取出<code>fn1</code>执行，输出<code>1</code>，然后将<code>fn2</code>加入微队列；</li><li><code>fn1</code>执行完毕，取出<code>fn2</code>执行，输出<code>2</code>；</li></ol><p>A：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;均以&lt;code&gt;Chrome&lt;/code&gt;浏览器为例。&lt;/p&gt;
&lt;h2 id=&quot;const、let、var的区别&quot;&gt;&lt;a href=&quot;#const、let、var的区别&quot; class=&quot;headerlink&quot; title=&quot;const、let、var的区别&quot;&gt;&lt;/a&gt;con</summary>
      
    
    
    
    <category term="前端" scheme="http://princesaoke.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>在HTML中使用阿里巴巴图标库的图标</title>
    <link href="http://princesaoke.github.io/2023/10/20/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E5%9B%BE%E6%A0%87/"/>
    <id>http://princesaoke.github.io/2023/10/20/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E5%9B%BE%E6%A0%87/</id>
    <published>2023-10-20T09:45:39.000Z</published>
    <updated>2023-10-22T06:11:26.566Z</updated>
    
    <content type="html"><![CDATA[<p>这里只介绍通过在线链接的方法。</p><p>进入(阿里巴巴图标库)[<a href="https://www.iconfont.cn]，选好需要的图标，放入购物车后将其加入项目。">https://www.iconfont.cn]，选好需要的图标，放入购物车后将其加入项目。</a></p><p>进入资源管理-&gt;我的项目，切换到<code>Font class</code>，点击查看在线链接。</p><p><img src="/images/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E5%9B%BE%E6%A0%87/link.png" alt="在线链接"></p><p>生成一个css链接，如<code>//at.alicdn.com/t/c/font_4287312_tew9cz81kg.css</code>，需要在前面加上<code>http:</code>，然后在HTML中引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入阿里巴巴图标库的项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://at.alicdn.com/t/c/font_4287312_tew9cz81kg.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用<code>&lt;i&gt;</code>元素使用图表，需要添加两个class：<code>iconfont</code>和对应的图标代码，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 假设图标代码为`icon-qq` --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-qq&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中图标代码可以在阿里巴巴图标库中复制</p><p><img src="/images/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E5%9B%BE%E6%A0%87/icon_code.png" alt="图标代码"></p><p><em>附上<a href="https://blog.csdn.net/qq_63141957/article/details/130641116">参考文章</a>，其中有说明其他的引入图标方式</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里只介绍通过在线链接的方法。&lt;/p&gt;
&lt;p&gt;进入(阿里巴巴图标库)[&lt;a href=&quot;https://www.iconfont.cn]，选好需要的图标，放入购物车后将其加入项目。&quot;&gt;https://www.iconfont.cn]，选好需要的图标，放入购物车后将其加入项目</summary>
      
    
    
    
    <category term="前端" scheme="http://princesaoke.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="http://princesaoke.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Flutter中的一些问题</title>
    <link href="http://princesaoke.github.io/2023/10/17/Flutter%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://princesaoke.github.io/2023/10/17/Flutter%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2023-10-17T09:57:05.000Z</published>
    <updated>2023-10-17T10:05:36.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-未开启网络权限"><a href="#Android-未开启网络权限" class="headerlink" title="Android 未开启网络权限"></a>Android 未开启网络权限</h2><p>APP开发时正常，build后报错如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR:flutter/lib/ui/http://ui_dart_state.cc(148)] Unhandled Exception: SocketException: Failed host lookup: &#x27;api.douban.com&#x27; (OS Error: No address associated with hostname, errno = 7)</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><p>在<code>android\app\src\main\AndroidManifest.xml</code>中添加网络权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>如：<img src="/images/Flutter%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/internet_permission.png" alt="网络权限"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Android-未开启网络权限&quot;&gt;&lt;a href=&quot;#Android-未开启网络权限&quot; class=&quot;headerlink&quot; title=&quot;Android 未开启网络权限&quot;&gt;&lt;/a&gt;Android 未开启网络权限&lt;/h2&gt;&lt;p&gt;APP开发时正常，build后报错如</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Flutter" scheme="http://princesaoke.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>远程连接服务器的一些方法</title>
    <link href="http://princesaoke.github.io/2023/10/15/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/"/>
    <id>http://princesaoke.github.io/2023/10/15/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/</id>
    <published>2023-10-14T16:07:40.000Z</published>
    <updated>2023-10-31T06:38:37.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows-Server-远程桌面连接"><a href="#Windows-Server-远程桌面连接" class="headerlink" title="Windows Server 远程桌面连接"></a>Windows Server 远程桌面连接</h2><p>如果你的服务器装的操作系统是 Windows Server ，那么可以在自己的 Windows 电脑上直接远程控制图形化界面。</p><p>Win+R输入<code>mstsc</code>运行，进入远程桌面连接，在计算机一栏中填写要连接的服务器IP地址或域名，用户名即服务器登录的用户名，输入密码连接，可以将记录保存在本地这样下次就不用再输密码了。</p><h2 id="终端SSH远程连接服务器"><a href="#终端SSH远程连接服务器" class="headerlink" title="终端SSH远程连接服务器"></a>终端SSH远程连接服务器</h2><p>要求本地主机装有SSH客户端，服务器装有SSH服务器。可在 PowerShell 输入以下命令查看是否安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-WindowsCapability -Online | Where-Object Name -like <span class="string">&#x27;OpenSSH*&#x27;</span></span><br></pre></td></tr></table></figure><p>若均未安装则输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name  : OpenSSH.Client~~~~0.0.1.0</span><br><span class="line">State : NotPresent</span><br><span class="line"></span><br><span class="line">Name  : OpenSSH.Server~~~~0.0.1.0</span><br><span class="line">State : NotPresent</span><br></pre></td></tr></table></figure><p>SSH客户端不用特地安装，安装git时自带。</p><p>Windows Server 2022 没有SSH服务器，需要自行安装。</p><h4 id="用-PowerShell-安装"><a href="#用-PowerShell-安装" class="headerlink" title="用 PowerShell 安装"></a>用 PowerShell 安装</h4><p>管理员权限运行 PowerShell ，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 OpenSSH 客户端</span></span><br><span class="line">Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 OpenSSH 服务器</span></span><br><span class="line">Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0</span><br></pre></td></tr></table></figure><p>安装完成后继续运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 SSH 服务器</span></span><br><span class="line">Start-Service sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># OPTIONAL but recommended:</span></span><br><span class="line">Set-Service -Name sshd -StartupType <span class="string">&#x27;Automatic&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认防火墙规则已配置。它应该由安装程序自动创建。运行以下程序进行验证</span></span><br><span class="line"><span class="keyword">if</span> (!(Get-NetFirewallRule -Name <span class="string">&quot;OpenSSH-Server-In-TCP&quot;</span> -ErrorAction SilentlyContinue | Select-Object Name, Enabled)) &#123;</span><br><span class="line">    Write-Output <span class="string">&quot;防火墙规则 &#x27;OpenSSH-Server-In-TCP&#x27; 不存在，正在创建...&quot;</span></span><br><span class="line">    New-NetFirewallRule -Name <span class="string">&#x27;OpenSSH-Server-In-TCP&#x27;</span> -DisplayName <span class="string">&#x27;OpenSSH Server (sshd)&#x27;</span> -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Write-Output <span class="string">&quot;防火墙规则 &#x27;OpenSSH-Server-In-TCP&#x27; 已存在。&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得开放端口，默认为<code>22</code>端口。</p><p>一切都完成后，在本地计算机终端中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh 服务器登录用户名@IP地址 -p 连接端口</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举例如下，端口可省略</span></span><br><span class="line">ssh Administrator@123.123.123.123 -p 22</span><br></pre></td></tr></table></figure><p>然后输入密码即可连接成功。</p><h4 id="Windows-设置中安装-OpenSSH"><a href="#Windows-设置中安装-OpenSSH" class="headerlink" title="Windows 设置中安装 OpenSSH"></a>Windows 设置中安装 OpenSSH</h4><p><img src="/images/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/install_OpenSSH.png" alt="设置中安装OpenSSH"></p><h2 id="VSCode-中使用-Remote-SSH-远程连接服务器"><a href="#VSCode-中使用-Remote-SSH-远程连接服务器" class="headerlink" title="VSCode 中使用 Remote - SSH 远程连接服务器"></a>VSCode 中使用 Remote - SSH 远程连接服务器</h2><p>首先确保上一方法是可行的。</p><p>VSCode 安装拓展<code>Remote - SSH</code>，左侧菜单会多出一个远程资源管理器图标。如图操作进入<code>.ssh\config</code>。</p><p><img src="/images/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/vscode.png" alt="vscode"></p><p><code>.ssh\config</code>中这样填写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host my_server</span><br><span class="line">    HostName 123.123.123.123</span><br><span class="line">    User Administrator</span><br><span class="line">    Port 22</span><br></pre></td></tr></table></figure><p>其中<code>my_server</code>是给服务器起的名称，随便填，<code>HostName</code>是服务器IP地址，<code>User</code>是服务器登录用户名，<code>Port</code>是连接端口，可省略，默认为22。</p><p>保存后左侧出现对应的服务器，选择在新窗口连接，输入密码，选择服务器操作系统，即可像在本地工作区一样对远程工作区进行操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Windows-Server-远程桌面连接&quot;&gt;&lt;a href=&quot;#Windows-Server-远程桌面连接&quot; class=&quot;headerlink&quot; title=&quot;Windows Server 远程桌面连接&quot;&gt;&lt;/a&gt;Windows Server 远程桌面连接&lt;/</summary>
      
    
    
    
    <category term="后端" scheme="http://princesaoke.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="服务器" scheme="http://princesaoke.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Flutter取消ListView过度滑动效果</title>
    <link href="http://princesaoke.github.io/2023/10/11/Flutter%E5%8F%96%E6%B6%88ListView%E8%BF%87%E5%BA%A6%E6%BB%91%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
    <id>http://princesaoke.github.io/2023/10/11/Flutter%E5%8F%96%E6%B6%88ListView%E8%BF%87%E5%BA%A6%E6%BB%91%E5%8A%A8%E6%95%88%E6%9E%9C/</id>
    <published>2023-10-11T07:09:38.000Z</published>
    <updated>2023-10-11T13:49:28.185Z</updated>
    
    <content type="html"><![CDATA[<p>不止ListView，GridView、PageView等组件同样适用。</p><h2 id="Flutter-3-10-1-方法"><a href="#Flutter-3-10-1-方法" class="headerlink" title="Flutter 3.10.1 方法"></a>Flutter 3.10.1 方法</h2><p>在ListView外包裹一个<code>ScrollConfiguration</code>，设置<code>behavior</code>参数，<code>child</code>就是ListView：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ScrollConfiguration(</span><br><span class="line">  behavior: ScrollConfiguration.of(context).copyWith(overscroll: <span class="keyword">false</span>),</span><br><span class="line">  child: ListView(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Flutter-3-3-3-方法"><a href="#Flutter-3-3-3-方法" class="headerlink" title="Flutter 3.3.3 方法"></a>Flutter 3.3.3 方法</h2><p>在早些时候的3.3.3版本我是用下面这个方法的，发现换到3.10.1后失效了。依然会有过度滑动的波纹效果，但变成了白色。</p><p>自定义一个类，继承ScrollBehavior，如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消ListView过度滑动的水波纹效果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverScrollBehavior</span> <span class="keyword">extends</span> <span class="title">ScrollBehavior</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildViewportChrome(</span><br><span class="line">      BuildContext context, Widget child, AxisDirection axisDirection) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (getPlatform(context)) &#123;</span><br><span class="line">      <span class="keyword">case</span> TargetPlatform.iOS:</span><br><span class="line">        <span class="keyword">return</span> child;</span><br><span class="line">      <span class="keyword">case</span> TargetPlatform.android:</span><br><span class="line">      <span class="keyword">case</span> TargetPlatform.fuchsia:</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> GlowingOverscrollIndicator(</span><br><span class="line">          <span class="comment">// 不显示头部水波纹</span></span><br><span class="line">          showLeading: <span class="keyword">false</span>,</span><br><span class="line">          <span class="comment">// 不显示尾部水波纹</span></span><br><span class="line">          showTrailing: <span class="keyword">false</span>,</span><br><span class="line"></span><br><span class="line">          axisDirection: axisDirection,</span><br><span class="line">          color: Theme.of(context).colorScheme.secondary,</span><br><span class="line">          child: child,</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时在ListView外包裹一个<code>ScrollConfiguration</code>，<code>behavior</code>参数里实例化一个<code>OverScrollBehavior</code>即可：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ScrollConfiguration(</span><br><span class="line">    behavior: OverScrollBehavior(),</span><br><span class="line">    child: ListView(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不止ListView，GridView、PageView等组件同样适用。&lt;/p&gt;
&lt;h2 id=&quot;Flutter-3-10-1-方法&quot;&gt;&lt;a href=&quot;#Flutter-3-10-1-方法&quot; class=&quot;headerlink&quot; title=&quot;Flutter 3.10.1</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Flutter" scheme="http://princesaoke.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Android中的ShapeableImageView</title>
    <link href="http://princesaoke.github.io/2023/10/02/Android%E4%B8%AD%E7%9A%84ShapeableImageView/"/>
    <id>http://princesaoke.github.io/2023/10/02/Android%E4%B8%AD%E7%9A%84ShapeableImageView/</id>
    <published>2023-10-02T08:37:53.000Z</published>
    <updated>2023-10-02T11:56:26.099Z</updated>
    
    <content type="html"><![CDATA[<p>效果如下：</p><p><img src="/images/Android%E4%B8%AD%E7%9A%84ShapeableImageView/preview.png" alt="preview"></p><h2 id="声明依赖项"><a href="#声明依赖项" class="headerlink" title="声明依赖项"></a>声明依赖项</h2><p>在 app&#x2F;build.gradle.kts 中的 dependencies 添加：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(<span class="string">&quot;com.google.android.material:material:1.8.0&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了 ShapeableImageView ， Android Material 中还有很多其他有用的东西，以后接触到再慢慢记录。</p><h2 id="添加-style"><a href="#添加-style" class="headerlink" title="添加 style"></a>添加 style</h2><p>在 res&#x2F;values&#x2F;styles.xml 中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 圆形图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;circle_image&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;cornerFamily&quot;</span>&gt;</span>rounded<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;cornerSize&quot;</span>&gt;</span>50%<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 圆角图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;round_image&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;cornerFamily&quot;</span>&gt;</span>rounded<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;cornerSize&quot;</span>&gt;</span>10dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用-ShapeableImageView"><a href="#使用-ShapeableImageView" class="headerlink" title="使用 ShapeableImageView"></a>使用 ShapeableImageView</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.google.android.material.imageview.ShapeableImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/circle_image&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;64dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;64dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:contentDescription</span>=<span class="string">&quot;@null&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:scaleType</span>=<span class="string">&quot;centerCrop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:shapeAppearance</span>=<span class="string">&quot;@style/circle_image&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>若要描边效果，则加上以下属性：</p><table><thead><tr><th align="center">属性</th><th>作用</th></tr></thead><tbody><tr><td align="center">strokeColor</td><td>描边颜色</td></tr><tr><td align="center">strokeWidth</td><td>描边宽度</td></tr><tr><td align="center">padding</td><td>为<code>strokeWidth</code>的一半</td></tr></tbody></table><p>效果：</p><p><img src="/images/Android%E4%B8%AD%E7%9A%84ShapeableImageView/circle_image.jpg" alt="circle_image"></p><p><em>参考<a href="https://blog.csdn.net/chuyouyinghe/article/details/117448536">这篇文章</a></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Android%E4%B8%AD%E7%9A%84ShapeableImageView/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;声明依赖项&quot;&gt;&lt;a href=&quot;#声明依赖项</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android中的RecyclerView</title>
    <link href="http://princesaoke.github.io/2023/09/30/Android%E4%B8%AD%E7%9A%84RecyclerView/"/>
    <id>http://princesaoke.github.io/2023/09/30/Android%E4%B8%AD%E7%9A%84RecyclerView/</id>
    <published>2023-09-30T07:36:50.000Z</published>
    <updated>2023-09-30T09:07:30.728Z</updated>
    
    <content type="html"><![CDATA[<p>RecyclerView 相当于加强版的 ListView ，比 ListView 更灵活、更高效。</p><h2 id="声明依赖项"><a href="#声明依赖项" class="headerlink" title="声明依赖项"></a>声明依赖项</h2><p>在 app&#x2F;build.gradle.kts 中的 dependencies 添加：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(<span class="string">&quot;androidx.recyclerview:recyclerview:1.2.1&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可将 1.2.1 修改为你想要的版本（一般是最新的稳定版），详情见<a href="https://developer.android.google.cn/jetpack/androidx/releases/recyclerview?hl=zh-cn">官方文档</a></p><p><img src="/images/Android%E4%B8%AD%E7%9A%84RecyclerView/document.png" alt="官方文档"></p><p>点击 Android Studio 右上角的 Sync Project with Gradle Files 同步依赖。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>MainActivity.kt:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要显示的数据</span></span><br><span class="line"><span class="keyword">val</span> <span class="keyword">data</span> = arrayOf(<span class="string">&quot;秦广王&quot;</span>, <span class="string">&quot;楚江王&quot;</span>, <span class="string">&quot;宋帝王&quot;</span>, <span class="string">&quot;仵官王&quot;</span>, <span class="string">&quot;阎罗王&quot;</span>, <span class="string">&quot;卞城王&quot;</span>, <span class="string">&quot;泰山王&quot;</span>, <span class="string">&quot;都市王&quot;</span>, <span class="string">&quot;平等王&quot;</span>, <span class="string">&quot;转轮王&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> recyclerView = findViewById&lt;RecyclerView&gt;(R.id.recycler_view)   <span class="comment">// 用 id 找到 RecyclerView</span></span><br><span class="line">recyclerView.layoutManager = LinearLayoutManager(<span class="keyword">this</span>)  <span class="comment">// 配置子视图的布局，可切换其他布局，如下一行</span></span><br><span class="line"><span class="comment">// recyclerView.layoutManager = GridLayoutManager(this, 3)  // 3表示一行有几个子视图</span></span><br><span class="line"><span class="keyword">val</span> recyclerAdapter = MyAdapter(<span class="keyword">this</span>, description.toMutableList());</span><br><span class="line">recyclerView.adapter = recyclerAdapter</span><br></pre></td></tr></table></figure><p>RecyclerViewAdapter.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 自定义的 Adapter 类，继承 RecyclerView.Adapter</span></span><br><span class="line"><span class="comment">/// 其中的 RecyclerView.Adapter 是个泛型，需要传入 ViewHolder</span></span><br><span class="line"><span class="comment">/// 在 MyAdapter 类中实现一个自定义的 ViewHolder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;MyAdapter.MyViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyAdapter</span><span class="params">(Context context, List&lt;String&gt; data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 拿到 RecyclerView 子视图的布局</span></span><br><span class="line">    <span class="comment">/// 其中 R.layout.list_item 是配置子视图布局的 xml 文件</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MyViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup viewGroup, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> View.inflate(context, R.layout.list_item, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyViewHolder</span>(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 将要显示的数据赋值给子视图</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> MyViewHolder myViewHolder, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        myViewHolder.textView.setText(data.get(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 返回 RecyclerView 子视图的数量</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data == <span class="literal">null</span> ? <span class="number">0</span> : data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 自定义的 ViewHolder ，继承 RecyclerView.ViewHolder</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TextView textView;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            textView = itemView.findViewById(R.id.list_item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>res&#x2F;layout&#x2F;list_item.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingStart</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingEnd</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/list_item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>activity_main.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/recycler_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>&lt;RecyclerView&gt;</code>中加上<code>app:layoutManager=&quot;androidx.recyclerview.widget.LinearLayoutManager&quot;</code>可以设置其子视图的布局，与 MainActivity.kt 中的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.layoutManager = LinearLayoutManager(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure><p>起相同作用。</p><p><em>大胆猜测Flutter中的ListView就是由RecyclerView实现的</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;RecyclerView 相当于加强版的 ListView ，比 ListView 更灵活、更高效。&lt;/p&gt;
&lt;h2 id=&quot;声明依赖项&quot;&gt;&lt;a href=&quot;#声明依赖项&quot; class=&quot;headerlink&quot; title=&quot;声明依赖项&quot;&gt;&lt;/a&gt;声明依赖项&lt;/h2&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android中的ListView</title>
    <link href="http://princesaoke.github.io/2023/09/24/Android%E4%B8%AD%E7%9A%84ListView/"/>
    <id>http://princesaoke.github.io/2023/09/24/Android%E4%B8%AD%E7%9A%84ListView/</id>
    <published>2023-09-24T15:31:27.000Z</published>
    <updated>2023-10-02T08:46:56.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><table><thead><tr><th align="center">kotlin属性</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td align="center">adapter</td><td>Adapter类</td><td>适配器，ListView将以该配置为模板显示内容</td></tr></tbody></table><p>用法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="keyword">data</span> = arrayOf(<span class="string">&quot;角木蛟&quot;</span>, <span class="string">&quot;亢金龙&quot;</span>, <span class="string">&quot;尾火虎&quot;</span>, <span class="string">&quot;箕水豹&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数的参数，第一个是上下文对象Context，第二个是适配器Adapter，第三个是要传进ListView展示的数据</span></span><br><span class="line"><span class="keyword">val</span> adapter = ArrayAdapter(<span class="keyword">this</span>, android.R.layout.simple_expandable_list_item_1, <span class="keyword">data</span>)</span><br><span class="line"><span class="keyword">val</span> listView = findViewById&lt;ListView&gt;(R.id.listview)</span><br><span class="line">listView.adapter = adapter</span><br></pre></td></tr></table></figure><p>这里的<code>android.R.layout.simple_expandable_list_item_1</code>还可以改用其他Adapter适配器。</p><h4 id="ArrayAdapter"><a href="#ArrayAdapter" class="headerlink" title="ArrayAdapter"></a>ArrayAdapter</h4><ul><li>simple_list_item_1</li></ul><p><img src="/images/Android%E4%B8%AD%E7%9A%84ListView/simple_list_item_1.png" alt="simple_list_item_1"></p><ul><li>simple_list_item_2</li></ul><p><img src="/images/Android%E4%B8%AD%E7%9A%84ListView/simple_list_item_2.png" alt="simple_list_item_2"></p><ul><li>simple_list_item_single_choice</li></ul><p><img src="/images/Android%E4%B8%AD%E7%9A%84ListView/simple_list_item_single_choice.png" alt="simple_list_item_single_choice"></p><ul><li>simple_list_item_multiple_choice</li></ul><p><img src="/images/Android%E4%B8%AD%E7%9A%84ListView/simple_list_item_multiple_choice.png" alt="simple_list_item_multiple_choice"></p><ul><li>simple_list_item_checked</li></ul><p><img src="/images/Android%E4%B8%AD%E7%9A%84ListView/simple_list_item_checked.png" alt="simple_list_item_checked"></p><h4 id="SimpleAdapter"><a href="#SimpleAdapter" class="headerlink" title="SimpleAdapter"></a>SimpleAdapter</h4><p>SimpleAdapter 允许你写一个布局，然后ListView中的所有行都使用这个布局。基本能实现任意效果。</p><p>res&#x2F;layout&#x2F;list_item.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingStart</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingEnd</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/list_item_title&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/list_item_description&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java&#x2F;MainActivity.kt</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要显示的数据</span></span><br><span class="line"><span class="keyword">val</span> title = arrayOf(<span class="string">&quot;星期一&quot;</span>, <span class="string">&quot;星期二&quot;</span>, <span class="string">&quot;星期三&quot;</span>, <span class="string">&quot;星期四&quot;</span>, <span class="string">&quot;星期五&quot;</span>, <span class="string">&quot;星期六&quot;</span>, <span class="string">&quot;星期天&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> description = arrayOf(<span class="string">&quot;周一周一，奄奄一息&quot;</span>, <span class="string">&quot;周二周二，肚子好饿&quot;</span>, <span class="string">&quot;周三周三，带病上班&quot;</span>, <span class="string">&quot;周四周四，重见天日&quot;</span>, <span class="string">&quot;周五周五，敲锣打鼓&quot;</span>, <span class="string">&quot;周六周六，大鱼大肉&quot;</span>, <span class="string">&quot;周日周日，死期将至&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Adapter要的数据是一个List，List里每个Map对应一行，Map里一个键值对即一个要显示的数据</span></span><br><span class="line"><span class="keyword">val</span> datas = mutableListOf&lt;Map&lt;String, String&gt;&gt;()</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> title.indices) &#123;</span><br><span class="line">    <span class="keyword">val</span> map = hashMapOf(<span class="string">&quot;title&quot;</span> to title[i], <span class="string">&quot;description&quot;</span> to description[i])</span><br><span class="line">    datas.add(map)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> adapter = SimpleAdapter(</span><br><span class="line">    <span class="keyword">this</span>,   <span class="comment">// 上下文 Context</span></span><br><span class="line">    datas,  <span class="comment">// 数据</span></span><br><span class="line">    R.layout.list_item,     <span class="comment">// 布局文件，每一行按该布局文件布局</span></span><br><span class="line">    arrayOf&lt;String&gt;(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;description&quot;</span>),    <span class="comment">// 有哪些数据</span></span><br><span class="line">    intArrayOf(R.id.list_item_title, R.id.list_item_description)    <span class="comment">// 对应上一行，将数据放到布局文件中的哪里</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="/images/Android中的ListView/simple_adapter.jpg" alt="simple_adapter" title="simple_adapter" width="300"/>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ListView&quot;&gt;&lt;a href=&quot;#ListView&quot; class=&quot;headerlink&quot; title=&quot;ListView&quot;&gt;&lt;/a&gt;ListView&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;kotlin属性&lt;</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>转发QQ语音</title>
    <link href="http://princesaoke.github.io/2023/09/22/%E8%BD%AC%E5%8F%91QQ%E8%AF%AD%E9%9F%B3/"/>
    <id>http://princesaoke.github.io/2023/09/22/%E8%BD%AC%E5%8F%91QQ%E8%AF%AD%E9%9F%B3/</id>
    <published>2023-09-22T13:27:26.000Z</published>
    <updated>2023-09-22T14:43:08.155Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何原封不动地转发他人的语音。</p><p><strong><p style="color:red;">注：本文章介绍的方法在本文发布时间 2023-09-22 仍然有效，不排除未来失效的可能</p></strong></p><h2 id="一、找到语音在本地的-amr文件"><a href="#一、找到语音在本地的-amr文件" class="headerlink" title="一、找到语音在本地的.amr文件"></a>一、找到语音在本地的.amr文件</h2><p>手机QQ暂时没有找到办法，需要用电脑端QQ。</p><p>首先登录电脑端QQ，确定目标语音的发送时间以便于在大量本地文件中搜索。</p><p>在QQ中打开设置-&gt;文件管理-&gt;打开个人文件夹，在个人文件夹中打开Audio，按时间排序找到.amr目标语音文件。copy一份保存。</p><p><img src="/images/%E8%BD%AC%E5%8F%91QQ%E8%AF%AD%E9%9F%B3/settings.png" alt="settings"></p><p>但是.amr格式是不能直接播放的，并且普通的格式转换工具也不起作用，QQ从某个时间点开始对语音进行了加密。</p><h2 id="二、-amr-转-mp3"><a href="#二、-amr-转-mp3" class="headerlink" title="二、.amr 转 .mp3"></a>二、.amr 转 .mp3</h2><p>需要用到特制的工具：<a href="https://pan.baidu.com/s/1P8jIr55pHuTiP6s8iQA-xg">silk2mp3</a></p><p><em>注：该工具似乎只能windows环境下运行</em></p><p>下载解压完后运行 silk2mp3.exe ，点击“导入待转换文件”，选择要转换的.amr语音，输出目录可以自己改，然后点开始转换，即可将 .amr 文件转换为 .mp3 文件。</p><p><img src="/images/%E8%BD%AC%E5%8F%91QQ%E8%AF%AD%E9%9F%B3/silk2mp3.png" alt="settings"></p><p><em>在此感谢该工具的作者 kn007</em></p><h2 id="三、将-mp3-文件以语音形式发送"><a href="#三、将-mp3-文件以语音形式发送" class="headerlink" title="三、将 .mp3 文件以语音形式发送"></a>三、将 .mp3 文件以语音形式发送</h2><p>这一步最好用数据线把手机连上电脑，选择文件传输模式，在电脑上对文件进行操作。</p><p>打开手机QQ进入聊天界面，点击录音，录音的时长就是语音发出去要显示的时长，然后结束录音，但注意不要点发送。</p><p>这时候电脑打开“此电脑”，进入手机的存储空间（连数据线的时候要选文件传输才能看到手机），进入 Android&#x2F;data&#x2F;com.tencent.mobileqq&#x2F;Tencent&#x2F;MobileQQ&#x2F;以你的QQ号命名的文件夹&#x2F;ptt&#x2F;以年月命名的文件夹（如202309）&#x2F;以日期命名的文件夹（如22），在其中根据时间找到你刚才的录音文件（.slk），复制其文件名及后缀，然后把你要转发的.mp3文件复制到这个目录，文件名改成刚复制的文件名（.mp3后缀也改成.slk），原来那个.slk文件就可以删掉了。</p><p>然后回到手机QQ点发送，发送出去的语音就是mp3文件的声音。</p><p>这里要注意，发送出去的语音上显示的语音时长和真正播放出来的语音时长是不一样的，显示的时长只取决于你录音录了多久，而播放的时长只取决于你的mp3文件的时长。</p><p>所以记得保证录音的时间和mp3文件的时长一样，否则可能会出现你点开两秒钟的语音却播放了一分钟的情况。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文介绍如何原封不动地转发他人的语音。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;p style=&quot;color:red;&quot;&gt;注：本文章介绍的方法在本文发布时间 2023-09-22 仍然有效，不排除未来失效的可能&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、找到语音在本地的</summary>
      
    
    
    
    <category term="整点花活" scheme="http://princesaoke.github.io/categories/%E6%95%B4%E7%82%B9%E8%8A%B1%E6%B4%BB/"/>
    
    
    <category term="QQ" scheme="http://princesaoke.github.io/tags/QQ/"/>
    
  </entry>
  
  <entry>
    <title>Android笔记</title>
    <link href="http://princesaoke.github.io/2023/09/20/Android%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/09/20/Android%E7%AC%94%E8%AE%B0/</id>
    <published>2023-09-20T05:41:09.000Z</published>
    <updated>2023-10-27T03:50:07.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ul><li>java文件夹下：业务逻辑</li><li>AndroidManifest.xml：项目配置文件</li><li>res&#x2F;layout文件夹下：页面布局</li><li>res&#x2F;values文件夹下：全局常量</li><li>res&#x2F;drawable文件夹下：图片资源</li><li>res&#x2F;mipmap系列：不同分辨率的图片资源，根据屏幕大小使用不同规格的图片，一般放APP图标</li></ul><h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2><table><thead><tr><th align="center">单位</th><th>说明</th></tr></thead><tbody><tr><td align="center">dp</td><td>device independent pixels（设备独立像素），不同设备有不同的显示效果，推荐使用这个</td></tr><tr><td align="center">px</td><td>pixels（像素）</td></tr><tr><td align="center">pt</td><td>point，1pt &#x3D; 1&#x2F;72 英寸</td></tr><tr><td align="center">sp</td><td>scaled pixels（放大像素），字体大小一般用这个</td></tr></tbody></table><h2 id="View-和-ViewGroup"><a href="#View-和-ViewGroup" class="headerlink" title="View 和 ViewGroup"></a>View 和 ViewGroup</h2><ul><li>页面上的一个UI组件就是一个View，如<code>&lt;TextView&gt;</code>、<code>&lt;Button&gt;</code>等</li><li>ViewGroup是一组View的布局方式，如<code>&lt;LinearLayout&gt;</code>、<code>&lt;RelativeLayout&gt;</code>等</li></ul><h2 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h2><ul><li><strong>Activity</strong> ：</li><li><strong>Service</strong> ：</li><li><strong>BroadcastReceiver</strong> ：允许你的应用接收来自各处的广播消息，比如电话、短信等，当然，你的应用也可以向外发出广播消息</li><li><strong>ContentProvider</strong> ：为应用程序之间共享数据提供了可能，比如你想要读取系统通讯录中的联系人，就需要通过ContentProvider来实现</li></ul><h2 id="六大基本布局"><a href="#六大基本布局" class="headerlink" title="六大基本布局"></a>六大基本布局</h2><ul><li><strong>线性布局 LinearLayout</strong> ：View按水平或竖直排列</li><li><strong>相对布局 RelativeLayout</strong> ：使用margin和padding相对父容器布局</li><li><strong>表格布局 TableLayout</strong> ：<code>&lt;TableLayout&gt;</code>内使用<code>&lt;TableRow&gt;</code>定义一行，<code>&lt;TableRow&gt;</code>中几个元素就是几列</li><li><strong>帧布局 FrameLayout</strong> ：即叠层布局。帧布局的大小由控件中最大的子控件决定</li><li><strong>绝对布局 AbsoluteLayout</strong> ：已弃用，建议改用 ConstraintLayout</li><li><strong>网格布局 GridLayout</strong> ：将视图按格子排列</li></ul><h2 id="线性布局-LinearLayout"><a href="#线性布局-LinearLayout" class="headerlink" title="线性布局 LinearLayout"></a>线性布局 LinearLayout</h2><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">layout_width</td><td>“match_parent”、”wrap_content”</td><td>线性布局的宽度</td></tr><tr><td align="center">layout_height</td><td>“match_parent”、”wrap_content”</td><td>线性布局的高度</td></tr><tr><td align="center">orientation</td><td>“vertical”、”horizontal”</td><td>内部视图排序方向</td></tr><tr><td align="center">divider</td><td>一个视图View</td><td>内部每两个相邻视图之间都有一个View</td></tr></tbody></table><h4 id="GridLayout-内视图参数"><a href="#GridLayout-内视图参数" class="headerlink" title="GridLayout 内视图参数"></a>GridLayout 内视图参数</h4><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">layout_width</td><td>“match_parent”、”wrap_content”</td><td>线性布局的宽度</td></tr><tr><td align="center">layout_height</td><td>“match_parent”、”wrap_content”</td><td>线性布局的高度</td></tr><tr><td align="center">layout_weight</td><td>1、2、3、……</td><td>该视图占整个线性布局大小的权重，使用该参数时注意 layout_width 与 layout_height 要有一个为 “wrap_content”</td></tr></tbody></table><h2 id="网格布局-GridLayout"><a href="#网格布局-GridLayout" class="headerlink" title="网格布局 GridLayout"></a>网格布局 GridLayout</h2><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">rowCount</td><td>1、2、3、……</td><td>共有几行</td></tr><tr><td align="center">columnCount</td><td>1、2、3、……</td><td>共有几列</td></tr><tr><td align="center">orientation</td><td>“horizontal”、”vertical”</td><td>内部视图排序方向</td></tr></tbody></table><h4 id="GridLayout-内视图参数-1"><a href="#GridLayout-内视图参数-1" class="headerlink" title="GridLayout 内视图参数"></a>GridLayout 内视图参数</h4><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">layout_rowSpan</td><td>1、2、3、……</td><td>该视图横跨几列</td></tr><tr><td align="center">layout_columnSpan</td><td>1、2、3、……</td><td>该视图竖跨几行</td></tr><tr><td align="center">layout_gravity</td><td>“fill”、……</td><td>有使用以上两参数，则该参数为”fill”</td></tr></tbody></table><h2 id="表格布局-TableLayout"><a href="#表格布局-TableLayout" class="headerlink" title="表格布局 TableLayout"></a>表格布局 TableLayout</h2><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">stretchColumns</td><td>0、1、2、……</td><td>被拉伸的列序号</td></tr><tr><td align="center">hint</td><td>任意字符串</td><td>输入框为空时的提示词，无该参数会报错</td></tr></tbody></table><h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><p>Android中的日志工具类是Log（android.util.Log），这个类中提供了如下5个方法来供我们打印日志（级别从低到高）。</p><ul><li>Log.v()。级别<code>verbose</code>，用于打印那些最为琐碎的、意义最小的日志信息</li><li>Log.d()。级别<code>debug</code>，用于打印一些调试信息，这些信息对你调试程序和分析问题应该是有帮助的</li><li>Log.i()。级别<code>info</code>，用于打印一些比较重要的数据，这些数据应该是你非常想看到的、可以帮你分析用户行为的数据</li><li>Log.w()。级别<code>warn</code>，用于打印一些警告信息，提示程序在这个地方可能会有潜在的风险，最好去修复一下这些出现警告的地方</li><li>Log.e()。级别<code>error</code>，用于打印程序中的错误信息，一般代表你的程序出现严重问题了，必须尽快修复</li></ul><h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">textStyle</td><td>bold、italic等</td><td>字体样式，如加粗、斜体等</td></tr><tr><td align="center">shadowRadius</td><td>浮点数</td><td>阴影模糊程度</td></tr><tr><td align="center">singleLine</td><td>true、false</td><td>文本单行显示</td></tr><tr><td align="center">ellipsize</td><td>end等</td><td>文本超出范围的省略方式</td></tr></tbody></table><h2 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h2><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">inputType</td><td>text、number等</td><td>指明输入内容的类型以弹出对应键盘</td></tr><tr><td align="center">hint</td><td>任意字符串</td><td>输入框为空时的提示词，无该参数会报错</td></tr><tr><td align="center">drawableXXX</td><td>Vector</td><td>在输入框的指定方位添加icon或图片</td></tr><tr><td align="center">hint</td><td>任意字符串</td><td>输入框为空时的提示词，无该参数会报错</td></tr></tbody></table><table><thead><tr><th align="center">kotlin方法</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td align="center">getText</td><td></td><td>返回输入框中的内容</td></tr></tbody></table><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">onClick</td><td>字符串，为点击后要执行的方法名</td><td>点击按钮后会调用对应的方法，与 setOnClickListener 相同</td></tr><tr><td align="center">background</td><td>selector</td><td>按钮背景图片</td></tr><tr><td align="center">backgroundTint</td><td>selector</td><td>按钮背景图片颜色</td></tr></tbody></table><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p>详见我的另一篇文章：<a href="https://princesaoke.github.io/2023/09/24/Android%E4%B8%AD%E7%9A%84ListView">Android中的ListView</a></p><h2 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h2><p>详见我的另一篇文章：<a href="https://princesaoke.github.io/2023/09/30/Android%E4%B8%AD%E7%9A%84RecyclerView">Android中的ListView</a></p><h2 id="ShapeableImageView"><a href="#ShapeableImageView" class="headerlink" title="ShapeableImageView"></a>ShapeableImageView</h2><p>详见我的另一篇文章：<a href="https://princesaoke.github.io/2023/10/02/Android%E4%B8%AD%E7%9A%84ShapeableImageView">Android中的ShapeableImageView</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;java文件夹下：业务逻辑&lt;/li&gt;
&lt;li&gt;AndroidManifest.xml：项目配置文件&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Git提交规范</title>
    <link href="http://princesaoke.github.io/2023/09/18/Git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/"/>
    <id>http://princesaoke.github.io/2023/09/18/Git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</id>
    <published>2023-09-18T06:27:36.000Z</published>
    <updated>2023-09-18T07:11:40.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VSCode-插件：git-commit-plugin"><a href="#VSCode-插件：git-commit-plugin" class="headerlink" title="VSCode 插件：git-commit-plugin"></a>VSCode 插件：git-commit-plugin</h2><p><img src="/images/Git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/git-commit-plugin.png" alt="git-commit-plugin"></p><p>该插件可帮助你规范commit描述格式，便于生成易于阅读且美观的提交。</p><p><img src="/images/Git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/example.png" alt="效果"></p><h2 id="修改上次commit的描述"><a href="#修改上次commit的描述" class="headerlink" title="修改上次commit的描述"></a>修改上次commit的描述</h2><p>有时候我们提交的描述格式或内容填错了，想要覆盖掉之前的描述，只能重新commit一次，但这样就会多一个提交记录。</p><p>其实有一个不需要重新提交就可以修改上次commit描述的方法，详见<a href="https://www.jianshu.com/p/4bbff5508efc">这篇文章</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;VSCode-插件：git-commit-plugin&quot;&gt;&lt;a href=&quot;#VSCode-插件：git-commit-plugin&quot; class=&quot;headerlink&quot; title=&quot;VSCode 插件：git-commit-plugin&quot;&gt;&lt;/a&gt;VSCod</summary>
      
    
    
    
    <category term="整点花活" scheme="http://princesaoke.github.io/categories/%E6%95%B4%E7%82%B9%E8%8A%B1%E6%B4%BB/"/>
    
    
    <category term="Git" scheme="http://princesaoke.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>关于AndroidStudio的一些问题</title>
    <link href="http://princesaoke.github.io/2023/09/17/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://princesaoke.github.io/2023/09/17/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2023-09-17T07:11:53.000Z</published>
    <updated>2023-10-17T10:06:30.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gradle-版本与-Java-版本不匹配"><a href="#Gradle-版本与-Java-版本不匹配" class="headerlink" title="Gradle 版本与 Java 版本不匹配"></a>Gradle 版本与 Java 版本不匹配</h2><p>Gradle 7.4 最高只支持到 Java17，Java20 要 Gradle8.3 。</p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/gradle7.4.png" alt="gradle 7.4"></p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/gradle8.3.png" alt="gradle 8.3"></p><p>之前装了一下Java20，然后出问题了，安卓项目打不开，编译报错，最后改用Java17。</p><h2 id="Android-Studio-内部-jre-路径缓存"><a href="#Android-Studio-内部-jre-路径缓存" class="headerlink" title="Android Studio 内部 jre 路径缓存"></a>Android Studio 内部 jre 路径缓存</h2><p>换了Java版本，路径也变了。即便我配置好了环境变量，Android Studio 还是默认到之前的路径去找jre，看网上说应该是 Android Studio 内部的缓存路径没变。我干脆直接重装，换了2022的版本，用了新UI，颜值稍微高了那么一点点，不过还是难用。</p><h2 id="安卓虚拟机（AVD）的问题"><a href="#安卓虚拟机（AVD）的问题" class="headerlink" title="安卓虚拟机（AVD）的问题"></a>安卓虚拟机（AVD）的问题</h2><p>创建一台设备，一点启动，直接弹窗说设备已终止什么的，反正就是启动不了。检查一下C盘，如果你和我一样C盘爆红，那应该是空间不足。</p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/avd_has_terminated.png" alt="AVD已终止"></p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/c.png" alt="C盘爆红"></p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/not_enough_space.png" alt="空间不足"></p><p>按照<a href="https://blog.csdn.net/xiaopangcame/article/details/127053704">这篇文章</a>的步骤去做，把.android文件夹移到别的磁盘，然后添加环境变量，完美解决。</p><p>启动是可以启动了，但还有别的问题：虚拟机屏幕一闪一闪的，而且动不动就卡死然后直接蓝屏。</p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/blue_screen.jpg" alt="蓝屏"></p><p>终止代码 CLOCK_WATCHDOG_TIMEOUT，暂时还不知道什么原因。</p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/speaker_error.png" alt="未检测到扬声器"></p><p>😅</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Gradle-版本与-Java-版本不匹配&quot;&gt;&lt;a href=&quot;#Gradle-版本与-Java-版本不匹配&quot; class=&quot;headerlink&quot; title=&quot;Gradle 版本与 Java 版本不匹配&quot;&gt;&lt;/a&gt;Gradle 版本与 Java 版本不匹配&lt;/</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Flutter版本切换</title>
    <link href="http://princesaoke.github.io/2023/09/14/Flutter%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/"/>
    <id>http://princesaoke.github.io/2023/09/14/Flutter%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/</id>
    <published>2023-09-14T05:40:25.000Z</published>
    <updated>2023-09-17T07:06:26.020Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录如何切换Flutter到指定版本。使用该方法一步到位，无需再修改Dart版本。</p><p>参考文章：<a href="http://www.taodudu.cc/news/show-3618721.html">http://www.taodudu.cc/news/show-3618721.html</a></p><h2 id="一、切换-Flutter-SDK-分支"><a href="#一、切换-Flutter-SDK-分支" class="headerlink" title="一、切换 Flutter SDK 分支"></a>一、切换 Flutter SDK 分支</h2><p>进入安装 flutter sdk 的文件夹，终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 3.10.1     // 3.10.1 换成要切换到的版本号</span><br></pre></td></tr></table></figure><p>将sdk切换到其他版本。</p><p><img src="/images/Flutter%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/%E5%88%87%E6%8D%A2sdk%E7%89%88%E6%9C%AC.png" alt="切换sdk版本"></p><h2 id="二、Flutter-Doctor-更新-Dart-SDK-及工具包"><a href="#二、Flutter-Doctor-更新-Dart-SDK-及工具包" class="headerlink" title="二、Flutter Doctor 更新 Dart SDK 及工具包"></a>二、Flutter Doctor 更新 Dart SDK 及工具包</h2><p>终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>进行flutter检查，会自动帮你装上与flutter版本对应的 dart sdk 及相关的工具包。</p><p>最后终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter --version</span><br></pre></td></tr></table></figure><p>检查版本是否切换成功。</p><p><img src="/images/Flutter%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/flutter_doctor.png" alt="flutter_doctor"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文记录如何切换Flutter到指定版本。使用该方法一步到位，无需再修改Dart版本。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;http://www.taodudu.cc/news/show-3618721.html&quot;&gt;http://www.taodudu.cc/news</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Flutter" scheme="http://princesaoke.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记</title>
    <link href="http://princesaoke.github.io/2023/09/14/Java%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/09/14/Java%E7%AC%94%E8%AE%B0/</id>
    <published>2023-09-14T05:34:31.000Z</published>
    <updated>2023-09-17T08:03:22.603Z</updated>
    
    <content type="html"><![CDATA[<p>简单记一下</p><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><table><thead><tr><th align="center">修饰符</th><th align="center">当前类</th><th align="center">同一包内</th><th align="center">同一包内的子类</th><th align="center">不同包内的子类</th><th align="center">其他包</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">可访问父类的protected，不可访问父类对象的protected</td><td align="center">×</td></tr><tr><td align="center">default</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h2 id="instanceof：判断一个变量是否是某个类的实例"><a href="#instanceof：判断一个变量是否是某个类的实例" class="headerlink" title="instanceof：判断一个变量是否是某个类的实例"></a>instanceof：判断一个变量是否是某个类的实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Car 是 Vehicle 的子类</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag1</span> <span class="operator">=</span> car <span class="keyword">instanceof</span> Car      <span class="comment">// flag1 = true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag2</span> <span class="operator">=</span> car <span class="keyword">instanceof</span> Vehicle  <span class="comment">// flag2 = true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag3</span> <span class="operator">=</span> car <span class="keyword">instanceof</span> Cat      <span class="comment">// flag1 = false</span></span><br></pre></td></tr></table></figure><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><table><thead><tr><th align="center">原始值</th><th align="center">floor（向下取整）</th><th align="center">round（四舍五入）</th><th align="center">ceil（向上取整）</th></tr></thead><tbody><tr><td align="center">2.7</td><td align="center">2</td><td align="center">3</td><td align="center">3</td></tr><tr><td align="center">2.3</td><td align="center">2</td><td align="center">2</td><td align="center">3</td></tr><tr><td align="center">-2.3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td></tr><tr><td align="center">-2.7</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td></tr></tbody></table><p><em>floor是地板的意思，ceil是天花板，就很好记了</em></p><h2 id="throw-throws"><a href="#throw-throws" class="headerlink" title="throw &amp; throws"></a>throw &amp; throws</h2><p>throw用于主动抛出异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">divide</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x / y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArithmeticException exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加了throws的函数，函数内部抛出的异常要在函数外捕捉到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当抛出异常时，不在函数内捕捉，而是抛出到函数外</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">divide</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> <span class="keyword">throws</span> ArithmeticException &#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕捉到divide方法内部抛出的异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        divide(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArithmeticException exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList-与-LinkedList-的区别"><a href="#ArrayList-与-LinkedList-的区别" class="headerlink" title="ArrayList 与 LinkedList 的区别"></a>ArrayList 与 LinkedList 的区别</h2><h4 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h4><ul><li><p>ArrayList 使用动态数组来存储元素，这意味着在内存中分配一块连续的内存空间来保存元素</p></li><li><p>LinkedList 使用双向链表来存储元素，每个元素都包含对前一个和后一个元素的引用</p></li></ul><h4 id="插入和删除操作"><a href="#插入和删除操作" class="headerlink" title="插入和删除操作"></a>插入和删除操作</h4><ul><li><p>ArrayList 的随机访问非常快速，因为可以通过索引直接访问元素。但是，插入和删除元素时，需要移动后续元素，效率较低</p></li><li><p>LinkedList 的插入和删除操作效率较高，因为只需更改节点的引用。但是，随机访问元素效率较低，因为必须从头或尾部开始遍历链表</p></li></ul><h4 id="内存消耗"><a href="#内存消耗" class="headerlink" title="内存消耗"></a>内存消耗</h4><ul><li><p>ArrayList 在存储大量元素时可能会浪费一些内存，因为它分配一块较大的内存空间。但它在随机访问时效率较高</p></li><li><p>LinkedList 每个元素都需要额外的内存来存储引用，因此在存储大量元素时可能会消耗更多内存。但它在插入和删除操作时效率较高</p></li></ul><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li><p>ArrayList 适用于需要频繁随机访问元素的情况，但不需要频繁执行插入和删除操作的情况</p></li><li><p>LinkedList 适用于需要频繁执行插入和删除操作的情况，但不需要频繁随机访问元素的情况</p></li></ul><p><em>chatGPT原话 : )</em></p><h2 id="LocalDateTime-LocalDate-LocalTime"><a href="#LocalDateTime-LocalDate-LocalTime" class="headerlink" title="LocalDateTime &amp; LocalDate &amp; LocalTime"></a>LocalDateTime &amp; LocalDate &amp; LocalTime</h2><p><em>参考的是<a href="https://blog.csdn.net/LiuQQ567/article/details/131269552">这篇文章</a></em></p><p>三者区别是，LocalDate只能存日期，LocalTime只能存时间，LocalDateTime既可以存日期又可以存时间。这里只介绍LocalDateTime。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="type">var</span> <span class="variable">localDateTime1</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">var</span> <span class="variable">localDateTime2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">00</span>);     <span class="comment">// 2023-09-11 22:23:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转LocalDateTime</span></span><br><span class="line"><span class="type">var</span> <span class="variable">localDateTime3</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2023-09-11T22:23:00&quot;</span>);    <span class="comment">// 必须要有T</span></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">localDateTime4</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2023-09-11 22:23:00&quot;</span>, formatter);     <span class="comment">// 将字符串按照formatter中规定的格式转化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取星期</span></span><br><span class="line"><span class="type">DayOfWeek</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> localDateTime1.getDayOfWeek();    <span class="comment">// 假设为星期天</span></span><br><span class="line">System.out.println(dayOfWeek.getValue());   <span class="comment">// 7</span></span><br><span class="line"><span class="comment">// TextStyle.FULL(星期全称), Locale.CHINA(用中文输出)</span></span><br><span class="line">System.out.println(dayOfWeek.getDisplayName(TextStyle.FULL, Locale.CHINA));     <span class="comment">// 星期日</span></span><br><span class="line"><span class="comment">// TextStyle.FULL(星期全称), Locale.CHINA(用中文输出)</span></span><br><span class="line">System.out.println(dayOfWeek.getDisplayName(TextStyle.Short, Locale.CHINA));    <span class="comment">// 周日</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取月份同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加日期</span></span><br><span class="line">localDateTime1 = localDateTime1.plus(<span class="number">5</span>, ChronoUnit.DAYS);   <span class="comment">// 日期+5，下同</span></span><br><span class="line">localDateTime1 = localDateTime1.plusDays(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="Date-Calendar-（已弃用）"><a href="#Date-Calendar-（已弃用）" class="headerlink" title="Date &amp; Calendar （已弃用）"></a><del>Date &amp; Calendar</del> （已弃用）</h2><p><strong><h3 style="color: red">注：Date类与Calendar类已弃用！</h3></strong></p><p><em>看完一问chatGPT，才知道这俩已经被LocalDateTime取代了，旧教程害人啊……笔记都做完了，就不删了吧</em></p><p>按自定义格式输出时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss E&quot;</span>);</span><br><span class="line">System.out.println(format.format(date));</span><br><span class="line"><span class="comment">// 2023-09-09 19:54:33 周六</span></span><br></pre></td></tr></table></figure><p>其中HH:mm:ss是24小时制，hh:mm:ss是12小时制</p><p>或者用printf：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;现在是：%tY-%tm-%td，%tp%tH:%tM:%tS，%tA&quot;</span>, date, date, date, date, date, date, date, date);</span><br><span class="line"><span class="comment">// 现在是：2023-09-09，下午20:07:02，星期六</span></span><br></pre></td></tr></table></figure><p>使用Calendar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();     <span class="comment">// 创建对象，默认为当前时间</span></span><br><span class="line">calendar.set(<span class="number">2002</span>, <span class="number">11</span>, <span class="number">30</span>);                     <span class="comment">// 设置年月日</span></span><br><span class="line">calendar.set(Calendar.YEAR, <span class="number">2077</span>);              <span class="comment">// 单独设置某个属性</span></span><br><span class="line">System.out.println(calendar.get(Calendar.YEAR));</span><br><span class="line"><span class="comment">// 2077</span></span><br></pre></td></tr></table></figure><p><em>有关Date类与Calendar类的更多信息，参考<a href="https://www.runoob.com/java/java-date-time.html">这里</a></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简单记一下&lt;/p&gt;
&lt;h2 id=&quot;包管理&quot;&gt;&lt;a href=&quot;#包管理&quot; class=&quot;headerlink&quot; title=&quot;包管理&quot;&gt;&lt;/a&gt;包管理&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;修饰符&lt;/th&gt;
&lt;th ali</summary>
      
    
    
    
    <category term="Java相关" scheme="http://princesaoke.github.io/categories/Java%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Java" scheme="http://princesaoke.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Github页面美化</title>
    <link href="http://princesaoke.github.io/2023/09/10/Github%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/"/>
    <id>http://princesaoke.github.io/2023/09/10/Github%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/</id>
    <published>2023-09-10T12:23:58.000Z</published>
    <updated>2023-09-17T07:08:46.428Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何把你的Github首页打扮的花里胡哨。</p><p><strong><p style="color:red;">注：本文章内的icon可能需要vpn才能加载出来</p></strong></p><h2 id="在Github首页展示自定义内容"><a href="#在Github首页展示自定义内容" class="headerlink" title="在Github首页展示自定义内容"></a>在Github首页展示自定义内容</h2><p>每个项目的根目录下的README.md文件是该项目的说明，我们在接触一个项目时要做的第一件事就是阅读这个README.md文件。</p><p>在github，每个仓库的根目录下的README.md文件中的内容会被展示在源代码下方，便于阅读。如果你将仓库名称设为自己的github昵称，系统会提示你这是一个<strong>特殊</strong>的仓库。它的README.md文件不仅会展示在仓库下方，还会被展示在该用户的github首页，这意味着我们可以在其中添加一些自我介绍，让访客可以在首页直接看到。</p><h2 id="添加技术栈icon"><a href="#添加技术栈icon" class="headerlink" title="添加技术栈icon"></a>添加技术栈icon</h2><p>你是否在他人的github首页看到这样花花绿绿的炫酷图标：</p><p><img src="/images/Github%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/cofess.png" alt="技术栈icon"></p><p>这是用到了 <strong><a href="https://shields.io/">shields.io</a></strong> 上的icon图标。进入其官网，点击 Get Started，第一个 Static Badge 就是我们要用的。看它的默认样式，可能会觉得有点眼熟，因为很多地方都有用到，比如VSCode拓展插件介绍页面常用的icon。</p><p>注意，shields.io 的icon可能需要vpn才能正常加载。</p><p><img src="/images/Github%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/code_runner.png" alt="Code Runner"></p><p>简单来说，你可以通过在markdown中输入url来显示icon。</p><p>对于默认的样式，在markdown文件中引入 <a href="https://img.shields.io/badge/%E5%89%8D%E5%8D%8A%E9%83%A8%E5%88%86-%E5%90%8E%E5%8D%8A%E9%83%A8%E5%88%86-blue">https://img.shields.io/badge/前半部分-后半部分-blue</a> 来显示一个icon：</p><p><img src="https://img.shields.io/badge/%E5%89%8D%E5%8D%8A%E9%83%A8%E5%88%86-%E5%90%8E%E5%8D%8A%E9%83%A8%E5%88%86-blue" alt="示例icon1"></p><p>参数可以修改，其中颜色可以用六位十六进制数表示：</p><p><img src="https://img.shields.io/badge/Part1-Part2-FF0000" alt="示例icon2"><br><em><a href="https://img.shields.io/badge/Part1-Part2-FF0000">https://img.shields.io/badge/Part1-Part2-FF0000</a></em></p><p>这和我们想要的效果差的有点远，别担心，回到shields.io的页面，在下方的 Query Parameters 中说明了我们可以在url中添加参数来调整icon的样式。</p><ul><li><p>style：默认为flat，改成 flat-square 变成方角</p></li><li><p>logo：显示在icon左半部分，使用图标slug引用。文档告诉我们可以在 <a href="https://github.com/simple-icons/simple-icons/blob/master/slugs.md">Simple Icons slugs</a> 中找到logo对应的值。</p></li><li><p>logoColor：logo的颜色。同样可以使用十六进制表示。</p></li></ul><p>综上，我们可以实现这样的icon：</p><p><img src="https://img.shields.io/badge/-Hexo-0073AA?style=flat-square&logo=hexo&logoColor=ffffff" alt="Hexo"><br><em><a href="https://img.shields.io/badge/-Hexo-0073AA?style=flat-square&logo=hexo&logoColor=ffffff">https://img.shields.io/badge/-Hexo-0073AA?style=flat-square&amp;logo=hexo&amp;logoColor=ffffff</a></em></p><p>其中左半部分的文字（label）为空</p><p>剩下就是依葫芦画瓢，可以加入其他参数让icon更美观。</p><h2 id="Github-Stats"><a href="#Github-Stats" class="headerlink" title="Github Stats"></a>Github Stats</h2><p>注意到还有张 Github Stats 的图片，上边显示你github的各项数值，同时打了一个等级，看起来也很炫酷，copy了！</p><p>怎么做呢？这其实是引用了 <strong><a href="https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md">GitHub Readme Stats</a></strong> ，可以在README.md中获取动态生成的gitHub统计信息。</p><p>进入 GitHub Readme Stats 的文档，文档里直接告诉你了将以下代码复制进README.md文件就可以：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![GitHub stats</span>](<span class="link">https://github-readme-stats.vercel.app/api?username=你的Github昵称</span>)](<span class="link">https://github.com/你的Github昵称/github-readme-stats</span>)    // 替换其中的Github昵称</span><br></pre></td></tr></table></figure><p>当然官方也提供了其他参数支持自定义，可以选择隐藏指定信息或修改主题颜色等。具体方法文档里都有，此处省略。</p><p>这个项目非常强大，还支持编程语言统计（柱状图、环形图和饼状图），以及将仓库卡片展示到README.md中，最重要的是有中文文档！Star了！</p><h2 id="贪吃蛇动图"><a href="#贪吃蛇动图" class="headerlink" title="贪吃蛇动图"></a>贪吃蛇动图</h2><p>具体步骤参考<a href="https://www.bilibili.com/video/BV1W94y1v7cB/?buvid=XU8C5CD8CA5CCD21BCA0598FC11578AA253A9&is_story_h5=false&mid=Hf5yMXVHanJeWLR1hhRTlg==&p=1&plat_id=287&share_from=ugc&share_medium=android&share_plat=android&share_session_id=f050ac0e-a9bd-4590-9a13-ca8ce69f2c65&share_source=QQ&share_tag=s_i&timestamp=1693472644&unique_k=HHwMfHH&up_id=15445514&vd_source=e3fbdccb87e9bd8a60a0b5e2c27c579d">这个视频</a></p><p>并且，就在我写这篇博文的时候，突然发现这个up还找到了Github上一个profile巨丰富的用户：<a href="https://github.com/BEPb">https://github.com/BEPb</a></p><p>当然这家伙的首页内容对于一般人来说就过于花里胡哨了，我们没必要整太多华而不实的东西，挑一两个喜欢的效果装扮一下自己的主页就好了。</p><p><img src="/images/Github%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/github_overview.png" alt="我的Github首页"></p><p><em>我的Github首页</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文介绍如何把你的Github首页打扮的花里胡哨。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;p style=&quot;color:red;&quot;&gt;注：本文章内的icon可能需要vpn才能加载出来&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;在Github首页展示自定义内容&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="整点花活" scheme="http://princesaoke.github.io/categories/%E6%95%B4%E7%82%B9%E8%8A%B1%E6%B4%BB/"/>
    
    
    <category term="Github" scheme="http://princesaoke.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="http://princesaoke.github.io/2023/09/02/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://princesaoke.github.io/2023/09/02/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-09-02T03:40:09.000Z</published>
    <updated>2023-10-22T11:12:10.644Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何使用Hexo搭建一个个人博客。</p><h2 id="一、安装Node-js"><a href="#一、安装Node-js" class="headerlink" title="一、安装Node.js"></a>一、安装Node.js</h2><p>关于安装node.js这部分，我参考的是<a href="https://blog.csdn.net/WHF__/article/details/129362462" title="https://blog.csdn.net/WHF__/article/details/129362462">这篇文章</a>。</p><p>首先到<a href="https://nodejs.org/zh-cn/download" title="https://nodejs.org/zh-cn/download">node.js中文官网</a>下载安装包。</p><p>运行安装包，修改安装路径，不勾选 necessary tools，一路next安装完毕。默认的设置是有安装npm的，这个很重要，相当于应用商店，第三方的包都通过它下载，必装。</p><p>顺便吐槽一句这个npm明明用了淘宝镜像还是一样下载不动，然后过一会就又好了，玄学网络。而且下载完一个包也无法继续输入命令，只能关掉cmd重新打开，隔壁python的pip都没有这种问题。</p><p>win+r输入cmd打开命令提示符，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure><p>查看node版本，如果提示“不是内部或外部命令”说明没安装成功。</p><p>npm也是一样，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>查看npm版本。</p><h2 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h2><p>成功安装node.js和npm后，继续在cmd中输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装Hexo。</p><p>合理外推卸载命令就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g hexo-cli</span><br></pre></td></tr></table></figure><p>注意到有个-g，意思是全局安装，不加-g就是在当前文件夹局部安装，出了当前文件夹就相当于没安装，类比python的虚拟环境。</p><p>同时还有 hexo 和 hexo-cli 的区别，之前也疑惑过 vue 和 vue-cli，这个我暂时还不太明白。总之有-cli和没有是两个不同的东西。按我理解，用hexo就是把hexo整个框架都下载下来，而用hexo-cli就是只下载hexo的一些命令，用创建hexo项目的时候用命令远程拉取模板。不知道我理解的对不对。</p><h2 id="三、创建Hexo项目"><a href="#三、创建Hexo项目" class="headerlink" title="三、创建Hexo项目"></a>三、创建Hexo项目</h2><p>cmd输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init personal-hexo</span><br></pre></td></tr></table></figure><p>新建hexo项目。其中personal-hexo是创建的hexo项目的名称</p><p>进入hexo项目的文件夹，一手</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>安装依赖包。</p><p>再一手</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>启动hexo服务器。这时会告诉你hexo正在本地运行，打开它给的地址 <a href="http://localhost:4000/">http://localhost:4000/</a> ，就可以看到hexo的默认页面了。</p><h2 id="四、Hexo使用指南"><a href="#四、Hexo使用指南" class="headerlink" title="四、Hexo使用指南"></a>四、Hexo使用指南</h2><p>IDE打开hexo项目，先看项目结构。根目录下，scaffolds文件夹里存放模板文件。scaffolds&#x2F;post.md 文件就是文章的模板文件，比如往里面加一条categories，新建的博文就会带上这个字段。</p><p>scaffolds&#x2F;_config.yml 文件是整个博客网站的配置文件。title就是HTML中的title，subtitle和description想填什么就填什么，author改成自己，language改成zh-CN，url改成 <u><strong>http:&#x2F;&#x2F;你的Github昵称.github.io</strong></u> ，其他暂时都不用改。</p><p>scaffolds&#x2F;source 文件夹下的是网站的主体，其中的文件夹可以通过url访问到，以下划线开头的文件夹除外。</p><p>scaffolds&#x2F;source&#x2F;_posts 中存放的即我们的博客。在终端中执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new Hexo搭建个人博客</span><br></pre></td></tr></table></figure><p>其中”Hexo搭建个人博客”是文章名。</p><p>发现 scaffolds&#x2F;source&#x2F;_posts 中多了刚才新建的文章，打开浏览器也可以看到博文创建成功了。现在可以用markdown尽情编辑博文了！</p><h2 id="五、更换主题"><a href="#五、更换主题" class="headerlink" title="五、更换主题"></a>五、更换主题</h2><p>我使用的是 hexo-theme-pure 主题，Github地址<a href="https://github.com/cofess/hexo-theme-pure" title="https://github.com/cofess/hexo-theme-pure">在这</a>，Gitee地址<a href="https://gitee.com/mirrors_cofess/hexo-theme-pure#hexo-wordcount" title="https://gitee.com/mirrors_cofess/hexo-theme-pure#hexo-wordcount">在这</a>。建议看Gitee上的，文档是中文。</p><p>第三方的主题都放在themes文件夹下。项目根目录下终端执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/cofess/hexo-theme-pure.git themes/pure</span><br></pre></td></tr></table></figure><p>themes&#x2F;pure&#x2F;_config.yml 是主题的配置文件。按需配置，我的配置如下：</p><h4 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h4><p>决定菜单中有哪些栏目。由于我没有豆瓣号，就把豆瓣书单那一栏注释掉了，这样就没有豆瓣书单这个页面。</p><h4 id="site"><a href="#site" class="headerlink" title="site"></a>site</h4><p>决定博客网站的基本配置。</p><p>根据logo中的url找到对应的图片，即博客的头像，改成自己的图片。</p><p>title就是HTML中的title</p><p>favicon即浏览器标签上的图标，找到 themes&#x2F;pure&#x2F;source&#x2F;favicon.png，改成自己的图片。</p><p>board是公告，可以是HTML中的元素</p><h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><p>skin可以更改主题颜色，除默认的白色外还有 theme-black theme-blue theme-green theme-purple 四种。</p><h4 id="donate"><a href="#donate" class="headerlink" title="donate"></a>donate</h4><p>文章底部请作者喝咖啡的赞赏部分。我不喜欢，enable改成false就不显示了。要保留的话按对应路径找到图片替换成自己的。</p><h4 id="share"><a href="#share" class="headerlink" title="share"></a>share</h4><p>文章底部的分享部分。sites是电脑网页显示的，mobile_sites是手机网页端显示的，可以加的值有 qq,wechat,qzone,weibo,facebook,twitter</p><h4 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h4><p>platform有github和gitee两种，username填你对应托管平台的用户名。</p><h4 id="pv"><a href="#pv" class="headerlink" title="pv"></a>pv</h4><p>用于统计你的网站有多少访客。提供了不蒜子和leancloud两种方式，我用的是不蒜子，把busuanzi下的enable设为true。</p><h4 id="postCount"><a href="#postCount" class="headerlink" title="postCount"></a>postCount</h4><p>统计你每一篇文章的字数和阅读时间。要开启哪一个功能就把对应的值设为true，enable为true则这两个功能都失效。</p><h4 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h4><p>一些个人资料。按前面的方法自行配置就好了。</p><h4 id="复制-source"><a href="#复制-source" class="headerlink" title="复制_source"></a>复制_source</h4><p>把 themes&#x2F;pure&#x2F;_source里的所有文件夹（除去你前面menu那里注释掉的界面，比如我不需要豆瓣书单，books文件夹就不需要复制）复制到根目录下的source文件里。_data和404也复制过去。_data里的links.yml文件中是友情链接，每个友情链接按如下格式：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">MyFriendName:</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">https://his_link/</span>         <span class="string">//</span> <span class="string">改成朋友的链接</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">https://his_avatar.png</span>  <span class="string">//</span> <span class="string">改成朋友的头像url</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">&quot;His discription&quot;</span>         <span class="string">//</span> <span class="string">给朋友的描述</span></span><br></pre></td></tr></table></figure><p>_data里的gallery.yml文件是干什么的我暂时还没搞懂。</p><p>现在重新访问浏览器，发现你的博客网站已经大变样了，一切操作正确的话不会出现任何问题。</p><h2 id="六、将Hexo部署到-Github-Pages"><a href="#六、将Hexo部署到-Github-Pages" class="headerlink" title="六、将Hexo部署到 Github Pages"></a>六、将Hexo部署到 Github Pages</h2><p>使用 hexo-deployer-git。参考<a href="https://zhuanlan.zhihu.com/p/611037765" title="https://zhuanlan.zhihu.com/p/611037765">这篇文章</a>。</p><p>先在自己的github上新建一个仓库，仓库名为 <strong>你的Github昵称.github.io</strong> ，如 PrinceSaoKe.github.io。</p><p>在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装 hexo-deployer-git。</p><p>打开根目录下的_config.yml文件，滑到最底下找到deploy，改成</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://github.com/你的github昵称/你的github昵称.github.io</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span>  <span class="string">//</span> <span class="string">注意看你仓库的主分支是master还是main，一般是master</span></span><br></pre></td></tr></table></figure><p>最后，依次在终端输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl     // 清理之前的页面</span><br><span class="line">hexo g      // 生成新的页面</span><br><span class="line">hexo d      // 部署网站到创建的仓库</span><br></pre></td></tr></table></figure><p><code>hexo d</code>这一步需要vpn。</p><p>刚部署完可能要过一两分钟，然后在任意一个设备的浏览器输入网址 <u><strong>http:&#x2F;&#x2F;你的Github昵称.github.io</strong></u> 就可以访问到你的hexo博客啦！</p><hr><p><em>写博客好累，后面应该不会写得这么详细了。我的hexo个人博客也上传到了github，<a href="https://princesaoke.github.io/" title="https://PrinceSaoKe.github.io">欢迎参观</a></em></p><p><img src="/images/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/my_hexo.png" alt="我的个人博客"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文介绍如何使用Hexo搭建一个个人博客。&lt;/p&gt;
&lt;h2 id=&quot;一、安装Node-js&quot;&gt;&lt;a href=&quot;#一、安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;一、安装Node.js&quot;&gt;&lt;/a&gt;一、安装Node.js&lt;/h2&gt;&lt;p&gt;关于安装n</summary>
      
    
    
    
    <category term="整点花活" scheme="http://princesaoke.github.io/categories/%E6%95%B4%E7%82%B9%E8%8A%B1%E6%B4%BB/"/>
    
    
    <category term="Hexo" scheme="http://princesaoke.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
