<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>骚客.的个人博客</title>
  
  <subtitle>记录我的学习过程</subtitle>
  <link href="http://princesaoke.github.io/atom.xml" rel="self"/>
  
  <link href="http://princesaoke.github.io/"/>
  <updated>2024-09-24T15:52:51.987Z</updated>
  <id>http://princesaoke.github.io/</id>
  
  <author>
    <name>骚客.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>字节跳动秋招面经</title>
    <link href="http://princesaoke.github.io/2024/09/24/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/"/>
    <id>http://princesaoke.github.io/2024/09/24/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/</id>
    <published>2024-09-24T14:59:43.000Z</published>
    <updated>2024-09-24T15:52:51.987Z</updated>
    
    <content type="html"><![CDATA[<p>无笔试，直接约一面。飞书部门。</p><h2 id="一面-9-24"><a href="#一面-9-24" class="headerlink" title="一面 9.24"></a>一面 9.24</h2><p>一小时左右。</p><ul><li><span style="color: green">✔</span> 自我介绍</li><li><span style="color: green">✔</span> 谈实习，说一下难点和解决方法</li><li><span style="color: red">❌</span> flutter或Android中的手势消费原理</li><li><span style="color: red">❌</span> flutter是如何生成一个安卓应用的</li><li><span style="color: green">✔</span> flutter渲染原理，三棵树</li><li><span style="color: red">❌</span> flutter的桥，调用native能力，如调用相机</li><li><span style="color: green">✔</span> 线程和进程的区别</li><li><span style="color: red">❌</span> 多线程相关，线程间哪些是共享的？进程间哪些是共享的？</li><li><span style="color: red">❌</span> 什么是线程安全，如何保证线程安全</li><li><span style="color: green">✔</span> Java的基本数据类型与包装类型有哪些？二者有什么区别？</li><li><span style="color: red">❌</span> 深拷贝和浅拷贝的区别？具体是如何copy的？</li><li><span style="color: green">✔</span> 链表和哈希表的区别，适用场景</li><li><span style="color: green">✔</span> HashMap实现原理，若用对象作为键，修改对象的属性，获取到的值会改变吗</li><li><span style="color: red">❌</span> requestlayout 和 invalidate 的区别</li><li><span style="color: red">❌</span> RecyclerView是如何展示列表数据的？notifyItemChanged局部刷新列表数据，其他局部刷新的方法</li><li><span style="color: green">✔</span> MMKV的使用，相对 SharedPreferences 的优点</li><li><span style="color: red">❌</span> TCP和UDP的区别，TCP的可靠传输是怎么实现的？</li><li><span style="color: red">❌</span> 2G的单词，给100M空间，如何知道出现频率top10的单词？</li><li><span style="color: green">✔</span> flutter对比原生安卓的优劣势</li><li><span style="color: red">❌</span> flutter用的布局模型是什么</li><li><span style="color: red">❌</span> 编程题：输出二叉树的后序遍历（不用递归）</li></ul><p>计网基础还是不熟悉。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;无笔试，直接约一面。飞书部门。&lt;/p&gt;
&lt;h2 id=&quot;一面-9-24&quot;&gt;&lt;a href=&quot;#一面-9-24&quot; class=&quot;headerlink&quot; title=&quot;一面 9.24&quot;&gt;&lt;/a&gt;一面 9.24&lt;/h2&gt;&lt;p&gt;一小时左右。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span s</summary>
      
    
    
    
    <category term="面经" scheme="http://princesaoke.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>小红书Android秋招面经</title>
    <link href="http://princesaoke.github.io/2024/09/22/%E5%B0%8F%E7%BA%A2%E4%B9%A6Android%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/"/>
    <id>http://princesaoke.github.io/2024/09/22/%E5%B0%8F%E7%BA%A2%E4%B9%A6Android%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/</id>
    <published>2024-09-22T09:02:16.000Z</published>
    <updated>2024-09-22T10:42:08.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="笔试-9-22"><a href="#笔试-9-22" class="headerlink" title="笔试 9.22"></a>笔试 9.22</h2><p>20道选择题，共40分；3道编程题，共60分。</p><h4 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h4><ul><li>Android中给View添加点击事件的方法</li><li>URL为<a href="http://xxx.com/user/login.do%EF%BC%8C%E6%98%AF%E4%BB%80%E4%B9%88%E6%96%B9%E6%B3%95%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%9F">http://xxx.com/user/login.do，是什么方法的请求？</a></li><li>哪些情况会造成ANR</li><li>不用四大组件中哪个不用Intent启动</li><li>SharedPreferences的文件存储路径，SharedPreferences数据读写方法过程</li><li>银行家算法，判断哪个顺序不会死锁</li><li>合法的出栈顺序</li><li>给出排序的中间状态，判断是哪种排序，归并</li><li>TCP、UDP的特点与区别</li></ul><h4 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h4><p>偏难。</p><p>第一题：给定一个整数数组和一个整数x，将数组分成连续的任意份，要满足每份的乘积都不能是x的倍数，且数组中每个元素都不是x的倍数。问最少需要分多少份？</p><p>有思路，但不知为何只对了18%，小红书的判题器不会给出没通过的测试数据。</p><p>分的要尽可能少，则每一份要尽可能大。由于是连续的，可以从头开始看。当乘积变成x的倍数后，无论之后再乘上什么数都仍是x的倍数，因此当乘积变成倍数时就要分了。</p><p>定义一个curr记录乘积，初始值为数组第一个元素，从第二个元素开始遍历数组。若乘积对x求模不为0，则<code>curr = curr * a[i]</code>；否则，将结果count加一，同时<code>curr = a[i]</code>。遍历结束后，最后一组还要再count加一，输出count。</p><p>第二题：给定收藏夹数n和整数x，接下来n行给出每个收藏夹内所有文章的标签，每个收藏夹内标签的数量可能不同，标签可能重复。现在要找出两个收藏夹，满足二者标签种类刚好为x。有满足则输出YES和收藏夹编号，无满足则输出NO。</p><p>有思路，但只对了83%。</p><p>定义一个<code>vector&lt;vector&lt;string&gt;&gt;</code>用于存储所有收藏夹及其内部的标签。双重循环遍历<code>0 &lt;= i &lt; n - 1)</code>与<code>i + 1 &lt;= j &lt; n</code>，每次循环定义一个集合用于标签去重，将两收藏夹的标签全部加入集合，判断集合大小是否等于x。</p><p>第三题：给出n条直线，接下来n行，每行给出直线斜率k和截距b，k不为0。问x&gt;0的交点有几个？</p><p>没时间写了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;笔试-9-22&quot;&gt;&lt;a href=&quot;#笔试-9-22&quot; class=&quot;headerlink&quot; title=&quot;笔试 9.22&quot;&gt;&lt;/a&gt;笔试 9.22&lt;/h2&gt;&lt;p&gt;20道选择题，共40分；3道编程题，共60分。&lt;/p&gt;
&lt;h4 id=&quot;选择题&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="面经" scheme="http://princesaoke.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>美团客户端秋招面经</title>
    <link href="http://princesaoke.github.io/2024/09/21/%E7%BE%8E%E5%9B%A2%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/"/>
    <id>http://princesaoke.github.io/2024/09/21/%E7%BE%8E%E5%9B%A2%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/</id>
    <published>2024-09-21T04:03:22.000Z</published>
    <updated>2024-09-22T09:02:40.004Z</updated>
    
    <content type="html"><![CDATA[<p>和暑期实习一样的岗位。</p><p><a href="https://princesaoke.github.io/2024/04/28/%E7%BE%8E%E5%9B%A2%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/">美团客户端实习面经</a></p><h2 id="笔试-9-21"><a href="#笔试-9-21" class="headerlink" title="笔试 9.21"></a>笔试 9.21</h2><p>和暑期实习一样，两个小时。30道选择题，共60分；2道编程题，共40分。</p><p>前端岗位和客户端岗位考的是同一场，选择题考了挺多JavaScript，还有一些CSS</p><h4 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h4><ul><li>JS的Promise，then的执行顺序，事件循环相关</li><li>CSS属性，计算元素宽度</li><li>死锁的必要条件</li><li>面向对象特性</li><li>TCP传输相关</li><li>const let var</li><li>创建型设计模式</li><li>单例</li><li>编译原理相关，文法推导</li><li>数据结构相关，完全二叉树的节点个数范围，堆最多和最少的节点数</li></ul><h4 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h4><p>第一题比较简单，AC，题目大致是：</p><p>每次在数组中的任意下标那一格涂色，若某个范围内涂色数量大于未涂色数量，则下一次可以把该范围全部涂色。问：给出数组的长度，至少要多少次才能全部涂色？</p><p>最快的情况当然是迅速按范围涂色，由于是要大于才能把范围全部涂色，因此前三次涂色都是每次涂一格。第四次涂色，最多能涂小于3的最大值即2个，第五次能涂小于5的最大值即4个，数列就是：<code>1，2，3，5，9，17……</code>。从2开始，<code>n + 1 = 2 * n - 1</code>。</p><p>第二题：</p><p><img src="/images/%E7%BE%8E%E5%9B%A2%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/q2.png" alt="编程题第二题"></p><p><img src="/images/%E7%BE%8E%E5%9B%A2%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A7%8B%E6%8B%9B%E9%9D%A2%E7%BB%8F/test_data.png" alt="测试数据"></p><p>做的时候已经有思路了，但是时间来不及细细斟酌代码了。</p><p>一个长度为m的数组，每个格子中是一个链表，所有标签相同的物品都放在同一格中。这里需要遍历一次物品标签。</p><p>一个长度为m的数组match用于保存该位置的标签应该贴在哪个物品上。记标签匹配为good，不匹配为bad。对于一个链表中标签相同的物品，计算最高美观值的步骤：先把所有bad的美观值累加，要得出不同标签匹配的情况的美观值，只要把<code>bad累加 - 自己的bad值 + 自己的good值</code>，再用打擂台的方法得到美观值最高的贴法，对应贴的序号填入数组match。</p><p>知道每个出现的标签应该贴在哪，剩下就简单了。遍历物品，只要判断match中贴的不是自己，如果是，在合计中加上good值，不是就加上bad值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;和暑期实习一样的岗位。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://princesaoke.github.io/2024/04/28/%E7%BE%8E%E5%9B%A2%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9</summary>
      
    
    
    
    <category term="面经" scheme="http://princesaoke.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Java中的HashMap</title>
    <link href="http://princesaoke.github.io/2024/07/26/Java%E4%B8%AD%E7%9A%84HashMap/"/>
    <id>http://princesaoke.github.io/2024/07/26/Java%E4%B8%AD%E7%9A%84HashMap/</id>
    <published>2024-07-26T15:30:21.000Z</published>
    <updated>2024-08-19T08:52:46.934Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/hollischuang/p/12009172.html">为啥HashMap的默认容量是16？</a></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p><code>HashMap</code>用于存储键值对，内部为散列表，每个数组槽位是一个链表或红黑树，即类似<strong>桶排序</strong>的结构。</p><p><img src="/images/Java%E4%B8%AD%E7%9A%84HashMap/hash_map.png" alt="HashMap"></p><p>当调用HashMap的<code>put</code>方法新增键值对时，会根据HashMap类的静态方法<code>hash</code>，用键值对的键来计算出哈希值，并用<code>(散列表大小n - 1) &amp; hash</code>的值作为散列表数组下标，将新增的键值对放入。</p><p><img src="/images/Java%E4%B8%AD%E7%9A%84HashMap/put.png" alt="put"></p><p><img src="/images/Java%E4%B8%AD%E7%9A%84HashMap/put_val.png" alt="put"></p><p>为解决哈希碰撞，每个散列表数组槽位内是一个链表或红黑树。当链表长度大于8，且散列表数组长度大于等64时，链表转化为红黑树；当红黑树节点小于6时退化成链表。</p><p><img src="/images/Java%E4%B8%AD%E7%9A%84HashMap/threshold.png" alt="阈值"></p><p>来说计算哈希值的<code>hashCode</code>方法。当键不为<code>null</code>时，将键的<code>hashCode</code>方法的值，和自身右移16位的值进行异或，结果作为计算后的哈希值返回。键为空则结果为0。</p><p><img src="/images/Java%E4%B8%AD%E7%9A%84HashMap/hash.png" alt="hash"></p><p>再来说说<code>(n - 1) &amp; hash</code>这个式子。其实就等同于hash的值对散列表长度n求模：<code>hash % n</code>。这样能确保计算出的哈希值不会超出散列表下标范围。</p><p>这里使用与运算<code>&amp;</code>而不是模运算，是因为位运算是直接对内存数据进行操作，不需要转成十进制，因此处理速度非常快。</p><p>且：<br>$$ x &#x2F; 2^n &#x3D; x &gt;&gt;&gt; n $$<br>$$ x % 2^n &#x3D; x &amp; (2^n - 1) $$</p><p>当除数是2的n次方时，x除的结果就等于二进制直接右移n位，模的结果就等于x和除数减一的二进制进行与运算。</p><p>例：$ 21 &#x2F; 8 $ 和 $ 21 % 8 $</p><p>21的二进制：10101， 8的二进制：01000， 7的二进制：00111</p><p>$ 21 &#x2F; 8 &#x3D; 21右移三位 &#x3D; 00010 &#x3D; 2 $ ， $ 21 % 8 &#x3D; 21 &amp; 7 &#x3D; 00101 &#x3D; 5 $</p><h2 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h2><p>虽然解决了哈希碰撞的问题，但若散列表太小，键值对太多，频繁出现哈希碰撞，链表或红黑树就会变得很长，此时就需要对散列表扩容。</p><p>前面提到，键值对放在散列表中的哪个位置，是由<code>(散列表大小n - 1) &amp; hash</code>决定的，与散列表大小有关。现在散列表大小改变了，意味着键值对存放的位置可能发生改变，要计算出扩容后所有键值对的新位置。</p><p>JDK1.7 中的做法是每个键值对重新hash映射到新的散列表，在 JDK1.8 进行了改进：</p><p>根据之前的结论，散列表长度必须是 $ 2^n $ ，每次扩容为之前的两倍。这样的好处是，扩容后计算<code>(n - 1) &amp; hash</code>，有变化的只有扩容前的n那一位。</p><p>例：原本散列表长度为8，下标为2处有一键值对，现长度扩容为16</p><p>8-1的二进制为<code>00111</code>，16-1的二进制为<code>01111</code></p><p>则对于<code>(n - 1) &amp; hash</code>，原先的值就是下标2，即<code>00010</code>，说明hash为<code>??010</code>，扩容后的值应该为<code>0?010</code>。</p><p>若<code>?</code>为0，则扩容后位置也不变，无需迁移。若<code>?</code>为1，则扩容后的新位置就是原先的下标加上扩容前的散列表长度。</p><h2 id="HashMap-和-Hashtable-的区别"><a href="#HashMap-和-Hashtable-的区别" class="headerlink" title="HashMap 和 Hashtable 的区别"></a>HashMap 和 Hashtable 的区别</h2><ul><li>父类不同：HashMap继承抽象类<code>AbstractMap</code>；而Hashtable实现<code>Dictionary</code>类。二者都实现<code>Map</code>接口</li><li>线程安全不同：Hashtable是线程安全的，而HashMap不是</li><li>能否有null：Hashtable中key和value都不允许出现null；而HashMap允许有一个为null的key，value可以有多个null，因此不能用<code>get()</code>返回null来判断HashMap中是否有某个键</li><li>哈希值的使用不同：Hashtable直接使用对象的<code>hashCode</code>；而HashMap重新计算哈希值</li><li>扩容方式不同：HashMap内散列表默认大小为16，扩容后一定为2<sup>n</sup>；Hashtable初始大小为11，扩容方式为<code>old * 2 + 1</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/hollischuang/p/12009172.html&quot;&gt;为啥HashMap的默认容量是16？&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="Java" scheme="http://princesaoke.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的static</title>
    <link href="http://princesaoke.github.io/2024/07/21/Java%E4%B8%AD%E7%9A%84static/"/>
    <id>http://princesaoke.github.io/2024/07/21/Java%E4%B8%AD%E7%9A%84static/</id>
    <published>2024-07-20T16:11:09.000Z</published>
    <updated>2024-09-21T08:39:03.034Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/dolphin0520/p/3799052.html">Java中的static关键字解析</a></p><p>静态方法不依赖于任何对象就可以进行访问，因此对于静态方法来说，是没有<code>this</code>的，因为它不依附于任何对象。既然没有对象，就谈不上this了。并且由于这个特性，在静态方法中不能访问类的非静态成员变量和非静态成员方法，因为非静态成员方法&#x2F;变量都是必须依赖具体的对象才能够被调用。</p><p>我们最常见的static方法就是main方法，而main方法必须是static的，是因为程序在执行main方法的时候没有创建任何对象，因此只有通过类名来访问。</p><p>Java规定static不能用来修饰局部变量。</p><p>与C&#x2F;C++中的static不同，Java中的static关键字不会影响到变量或者方法的作用域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Person.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        Person.age = <span class="number">18</span>;    <span class="comment">// 报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Q：Java中可以通过<code>this</code>访问静态成员变量吗？下面的代码输出是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        test.printValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 该value只是函数内部的局部变量，与this无关</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.value); <span class="comment">// 访问的是静态成员变量value</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A：可以，输出为<code>0</code>。</p><p>Q：以下代码输出是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father中的main函数&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Other</span> <span class="variable">other</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Other</span>(<span class="string">&quot;Father&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father中的静态代码块1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father中的静态代码块2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father中的非静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father中的构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="type">Other</span> <span class="variable">other</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Other</span>(<span class="string">&quot;Son&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Son中的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Son中的构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Other</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Other中的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Other</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Other中的构造函数，调用者：&quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Other中的非静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A：输出为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Father中的静态代码块1</span><br><span class="line">Father中的静态代码块2</span><br><span class="line">Father中的main函数</span><br><span class="line">Son中的静态代码块</span><br><span class="line">Other中的静态代码块</span><br><span class="line">Other中的非静态代码块</span><br><span class="line">Other中的构造函数，调用者：Father</span><br><span class="line">Father中的非静态代码块</span><br><span class="line">Father中的构造函数</span><br><span class="line">Other中的非静态代码块</span><br><span class="line">Other中的构造函数，调用者：Son</span><br><span class="line">Son中的构造函数</span><br></pre></td></tr></table></figure><p>要运行静态函数main，首先要加载<code>Father</code>类。加载Father类时按顺序执行<code>static</code>块，输出前两行。</p><p>随后执行<code>main</code>函数，输出第三行。</p><p>再实例化<code>Son</code>。实例化前要先加载Son类，又因Son继承Father，则要先加载Father和Son，而Father已经加载了，于是加载Son，执行Son中的static块，输出第四行。</p><p>接着要实例化Son，在构造函数前要先初始化成员变量。因为继承Father所以要先初始化Father，Father有个<code>Other</code>类型的成员变量和一个非static块，按照先后顺序执行，又需要先加载并实例化Other。</p><p>于是加载Other，static块输出第五行。Other的非static块输出第六行，构造函数输出第七行。</p><p>接着Father初始化完成员变量继续按顺序执行非static块，输出第八行。</p><p>现在Son的父类Father成员变量已经初始化，于是Father的构造函数输出第九行。</p><p>Son的父类结束，轮到Son初始化成员变量，非static块每次实例化一个对象都会执行一次，因此Other的非static块再次执行输出第十行。其构造函数再输出第十一行。</p><p>最后Son的构造函数输出最后一行。Son实例化结束，main函数结束。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/dolphin0520/p/3799052.html&quot;&gt;Java中的static关键字解析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;静态方法不依赖于任何对象就可以进行访问，因此对于静态方法来说，是没有&lt;code&gt;this&lt;/c</summary>
      
    
    
    
    
    <category term="Java" scheme="http://princesaoke.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Flutter笔记</title>
    <link href="http://princesaoke.github.io/2024/07/10/Flutter%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2024/07/10/Flutter%E7%AC%94%E8%AE%B0/</id>
    <published>2024-07-10T01:17:26.000Z</published>
    <updated>2024-07-10T01:29:42.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flutter与其他跨平台方案的区别"><a href="#Flutter与其他跨平台方案的区别" class="headerlink" title="Flutter与其他跨平台方案的区别"></a>Flutter与其他跨平台方案的区别</h2><p><code>ReactNative</code>之类的框架，只是通过<code>JavaScript</code>虚拟机扩展调用系统组件，由<code>Android</code>和<code>iOS</code>系统进行组件的渲染；<code>Flutter</code>则是自己实现了一套组件渲染的逻辑。</p><p>Flutter的底层图像渲染引擎是<code>Skia</code>（它同时也是Android官方的图像渲染引擎）。Skia 是一款用 C++ 开发的、性能彪悍的 2D 图像绘制引擎，因为其出色的绘制表现被广泛应用在 Chrome 和 Android 等核心产品上。Skia 在图形转换、文字渲染、位图渲染方面都表现卓越，并提供了开发者友好的 API。Skia 已经是 Android 官方的图像渲染引擎了，因此 Flutter Android SDK 无需内嵌 Skia 引擎就可以获得天然的 Skia 支持；而对于 iOS 平台来说，由于 Skia 是跨平台的，因此它作为 Flutter iOS 渲染引擎被嵌入到 Flutter 的 iOS SDK 中，替代了 iOS 闭源的 Core Graphics&#x2F;Core Animation&#x2F;Core Text，这也正是 Flutter iOS SDK 打包的 App 包体积比 Android 要大一些的原因。Skia 保证了同一套代码调用在 Android 和 iOS 平台上的渲染效果是完全一致的。</p><p><img src="/images/Flutter%E7%AC%94%E8%AE%B0/flutter_framework.png" alt="flutter架构"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flutter与其他跨平台方案的区别&quot;&gt;&lt;a href=&quot;#Flutter与其他跨平台方案的区别&quot; class=&quot;headerlink&quot; title=&quot;Flutter与其他跨平台方案的区别&quot;&gt;&lt;/a&gt;Flutter与其他跨平台方案的区别&lt;/h2&gt;&lt;p&gt;&lt;code&gt;</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Flutter" scheme="http://princesaoke.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Java中的String</title>
    <link href="http://princesaoke.github.io/2024/06/25/Java%E4%B8%AD%E7%9A%84String/"/>
    <id>http://princesaoke.github.io/2024/06/25/Java%E4%B8%AD%E7%9A%84String/</id>
    <published>2024-06-25T15:01:34.000Z</published>
    <updated>2024-07-25T08:38:51.570Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7235628080219488293">从零开始学Java之StringBuilder与StringBuffer使用及源码解读</a></p><h2 id="String为什么设计为不可变？如何保证String不可变？"><a href="#String为什么设计为不可变？如何保证String不可变？" class="headerlink" title="String为什么设计为不可变？如何保证String不可变？"></a>String为什么设计为不可变？如何保证String不可变？</h2><p>一旦一个<code>String</code>对象被创建，其存储的文本内容就不能被改变。这是因为：</p><ul><li>让并发编程变得更简单。引起线程安全问题的根本原因在于：多个线程需要同时访问同一个共享资源，修改资源，容易出现问题。如果共享资源在创建之后就完全不再变更，如同一个常量，有修改则返回一个新对象，则可以保证线程安全</li><li>不可变的对象因为状态不会改变，所以更容易进行缓存和重用。字符串常量池的出现正是基于这个原因。当代码中出现相同的字符串字面量时，JVM会确保所有的引用都指向常量池中的同一个对象，从而节约内存。</li><li>因为String的内容不会改变，所以它的哈希值也就固定不变。这使得String对象特别适合作为<code>HashMap</code>或<code>HashSet</code>等集合的键，因为计算哈希值只需要进行一次，提高了哈希表操作的效率。</li></ul><p>保证String不可变的措施：</p><ul><li>String类内部使用一个私有的字符数组来存储字符串数据。这个字符数组在创建字符串时被初始化，之后不允许被改变。</li><li>String类也不提供任何可以修改其内容的公共方法，像<code>concat</code>这些看似修改字符串的操作，实际上都是返回一个新创建的字符串对象，而原始字符串对象保持不变。</li><li>String类本身被声明为<code>final</code>，这意味着它不能被继承，防止通过子类添加修改方法来改变字符串内容的可能。</li></ul><h2 id="StringBuilder-和-StringBuffer"><a href="#StringBuilder-和-StringBuffer" class="headerlink" title="StringBuilder 和 StringBuffer"></a>StringBuilder 和 StringBuffer</h2><p><code>StringBuilder</code>和<code>StringBuffer</code>定义的字符串内容可变。</p><p>当遇到大量字符串连接时，由于String的不变性，每次都是返回一个新的String对象，因此用<code>StringBuilder</code>更合适，它不会生成很多新的对象，<code>StringBuffer</code>和<code>StringBuilder</code>类似，但每个方法上都加了<code>synchronized</code>关键字，所以是线程安全的。</p><ul><li>String：适用于字符串内容不会改变的场景，比如说作为<code>HashMap</code>的key</li><li>StringBuilder：适用于单线程环境下需要频繁修改字符串内容的场景，比如在循环中拼接或修改字符串，是String的完美替代品</li><li>StringBuffer：现在已经不怎么用了，因为一般不会在多线程场景下去频繁的修改字符串内容</li></ul><p><code>StringBuilder</code>和<code>StringBuffer</code>均继承自抽象类<code>AbstractStringBuilder</code>，其<code>append</code>方法最终是调用父类的<code>append</code>：</p><p><img src="/images/Java%E4%B8%AD%E7%9A%84String/append1.png" alt="append"></p><p><em>以StringBuilder为例</em></p><p><img src="/images/Java%E4%B8%AD%E7%9A%84String/append2.png" alt="append"></p><p><img src="/images/Java%E4%B8%AD%E7%9A%84String/abstract_string_builder.png" alt="append"></p><p>而父类的append将字符串放入其字符数组中，同时记录字符数量的<code>count</code>也同步增加。其中<code>ensureCapacityInternal</code>方法是用来确保字符数组能放得下新加的字符串，当数组大小不够时会扩容。</p><p><img src="/images/Java%E4%B8%AD%E7%9A%84String/ensure_capacity_internal.png" alt="append"></p><p>若原有容量<code>oldCapacity</code>小于需要的容量<code>minimumCapacity</code>，就会利用<code>Arrays.copyOf()</code>方法，将当前数组的值拷贝给<code>newCapacity()</code>个长度的新数组，最后再重新赋值给value字节数组。<strong>因此是利用数组复制的方法来实现扩容</strong>。</p><p><img src="/images/Java%E4%B8%AD%E7%9A%84String/new_capacity.png" alt="append"></p><p><code>newCapacity</code>方法作用是计算出扩容后新数组的长度，若大于整型的最大值则抛出<code>OutOfMemoryError</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7235628080219488293&quot;&gt;从零开始学Java之StringBuilder与StringBuffer使用及源码解读&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;String为什么设计为不可变？如何保证Stri</summary>
      
    
    
    
    
    <category term="Java" scheme="http://princesaoke.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android中的Service</title>
    <link href="http://princesaoke.github.io/2024/06/09/Android%E4%B8%AD%E7%9A%84Service/"/>
    <id>http://princesaoke.github.io/2024/06/09/Android%E4%B8%AD%E7%9A%84Service/</id>
    <published>2024-06-09T09:21:24.000Z</published>
    <updated>2024-06-11T01:00:03.369Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio 中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android Studio 中&lt;/p&gt;
</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>进程、线程和协程</title>
    <link href="http://princesaoke.github.io/2024/06/07/%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B/"/>
    <id>http://princesaoke.github.io/2024/06/07/%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B/</id>
    <published>2024-06-07T09:34:04.000Z</published>
    <updated>2024-06-13T15:43:07.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><h4 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h4><p>并发就是同一时刻只有一条指令在执行，但由于CPU时间片很小，多个指令间能快速切换，宏观上形成同时执行的效果。</p><p>并行则是真正意义上的同时进行。</p><h4 id="协作式多任务和抢占式多任务"><a href="#协作式多任务和抢占式多任务" class="headerlink" title="协作式多任务和抢占式多任务"></a>协作式多任务和抢占式多任务</h4><p>协作式多任务即一个任务得到了CPU资源，除非自主释放，否则会一直霸占CPU。</p><p>抢占式多任务即由操作系统来分配每个任务的使用时间，每个任务使用一段时间CPU后，操作系统会剥夺其使用权交给下一个任务。</p><p>在协作式多任务中，一个任务死锁，操作系统也会死锁；而抢占式多任务中，一个任务死锁，系统任可运行。</p><p>Q：相比于多进程，多线程有何优势？</p><p>A：</p><blockquote><p>进程之间不能共享数据，线程可以<br>系统创建进程需要为该进程重新分配系统资源，故创建线程代价比较小</p></blockquote><p>Q：Java三种创建线程的方法有什么区别？</p><p>A：</p><blockquote><p>……</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一些概念&quot;&gt;&lt;a href=&quot;#一些概念&quot; class=&quot;headerlink&quot; title=&quot;一些概念&quot;&gt;&lt;/a&gt;一些概念&lt;/h2&gt;&lt;h4 id=&quot;并发和并行&quot;&gt;&lt;a href=&quot;#并发和并行&quot; class=&quot;headerlink&quot; title=&quot;并发和并行&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Android中的数据持久化</title>
    <link href="http://princesaoke.github.io/2024/05/30/Android%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://princesaoke.github.io/2024/05/30/Android%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</id>
    <published>2024-05-30T05:51:38.000Z</published>
    <updated>2024-06-13T15:01:25.672Z</updated>
    
    <content type="html"><![CDATA[<p>可在 Android Studio 打开<code>Device Explorer</code>，在<code>/data/data/&lt;APP包名&gt;</code>中可以看到应用的数据。</p><h2 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 写数据</span></span><br><span class="line"><span class="keyword">val</span> editor = getSharedPreferences(<span class="string">&quot;user&quot;</span>, Context.MODE_PRIVATE).edit()</span><br><span class="line">editor.putString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>)</span><br><span class="line">editor.putInt(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>)</span><br><span class="line">editor.putBoolean(<span class="string">&quot;married&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">editor.apply()  <span class="comment">// 将添加的数据提交，从而完成数据存储操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 读数据</span></span><br><span class="line"><span class="keyword">val</span> prefs = getSharedPreferences(<span class="string">&quot;user&quot;</span>, Context.MODE_PRIVATE)</span><br><span class="line"><span class="keyword">val</span> name = prefs.getString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> age = prefs.getInt(<span class="string">&quot;age&quot;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">val</span> married = prefs.getBoolean(<span class="string">&quot;married&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">Log.d(<span class="string">&quot;MyLog&quot;</span>, <span class="string">&quot;姓名：<span class="variable">$name</span>&quot;</span>)</span><br><span class="line">Log.d(<span class="string">&quot;MyLog&quot;</span>, <span class="string">&quot;年龄：<span class="variable">$age</span>&quot;</span>)</span><br><span class="line">Log.d(<span class="string">&quot;MyLog&quot;</span>, <span class="string">&quot;是否已婚：<span class="variable">$married</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>其中<code>getSharedPreferences</code>的第二个参数<code>Context.MODE_PRIVATE</code>表示只有当前的应用程序才可以对这个SharedPreferences文件进行读写，且只有这一种模式，其他几种操作模式均已被废弃。</p><p>SharedPreferences文件是使用XML格式来对数据进行管理的：</p><p><img src="/images/Android%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/shared_preferences.png" alt="SharedPreferences"></p><h2 id="MMKV"><a href="#MMKV" class="headerlink" title="MMKV"></a>MMKV</h2><p><a href="https://github.com/Tencent/MMKV">MMKV Github 仓库</a></p><p>安装引入：</p><figure class="highlight kts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// 将 &quot;1.3.5&quot; 替换为最新版本</span></span><br><span class="line">    implementation <span class="string">&#x27;com.tencent:mmkv:1.3.5&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在APP启动时初始化MMKV，设定MMKV的根目录：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mmkvPath = MMKV.initialize(<span class="keyword">this</span>)</span><br><span class="line">    Log.i(<span class="string">&quot;MyLog&quot;</span>, <span class="string">&quot;MMKV存储路径: <span class="variable">$mmkvPath</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mmkv = MMKV.defaultMMKV()</span><br><span class="line">    mmkv.encode(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李四&quot;</span>)</span><br><span class="line">    mmkv.encode(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>)</span><br><span class="line">    mmkv.encode(<span class="string">&quot;married&quot;</span>, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> name = mmkv.decodeString(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> age = mmkv.decodeInt(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> married = mmkv.decodeBool(<span class="string">&quot;married&quot;</span>, <span class="literal">false</span>)   <span class="comment">// 当数据不存在时，取第二个参数为默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Q：MMKV与SharedPreferences有何区别？MMKV的适用场景？</p><p>A：</p><blockquote><p>……</p></blockquote><h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><p>Android内置了SQLite数据库，用于本地存储关系复杂的数据。</p><p>自定义一个继承<code>SQLiteOpenHelper</code>的类，当调用它的实例的<code>getReadableDatabase</code>或<code>getWritableDatabase</code>方法时，传入数据库名和版本号，就可以打开指定的数据库。若不存在该数据库，则会自动创建，然后触发SQLiteOpenHelper的<code>onCreate</code>方法。若传入的版本号大于数据库的版本号，就会触发<code>onUpgrade</code>方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyDatabaseHelper</span>(<span class="keyword">val</span> context: Context, name: String, version: <span class="built_in">Int</span>) :</span><br><span class="line">    SQLiteOpenHelper(context, name, <span class="literal">null</span>, version) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> createBookSql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        create table Book (</span></span><br><span class="line"><span class="string">            id integer primary key autoincrement, </span></span><br><span class="line"><span class="string">            name text, </span></span><br><span class="line"><span class="string">            price real, </span></span><br><span class="line"><span class="string">            pages integer</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(db: <span class="type">SQLiteDatabase</span>)</span></span> &#123;</span><br><span class="line">        db.execSQL(createBookSql)</span><br><span class="line">        Toast.makeText(context, <span class="string">&quot;Book表创建成功&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onUpgrade</span><span class="params">(db: <span class="type">SQLiteDatabase</span>, oldVersion: <span class="type">Int</span>, newVersion: <span class="type">Int</span>)</span></span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dbHelper = MyDatabaseHelper(<span class="keyword">this</span>, <span class="string">&quot;BookStore.db&quot;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">val</span> db = dbHelper.writableDatabase  <span class="comment">// 无数据库BookStore，则创建数据库，触发onCreate，创建Book表</span></span><br><span class="line"></span><br><span class="line">dbHelper = MyDatabaseHelper(<span class="keyword">this</span>, <span class="string">&quot;BookStore.db&quot;</span>, <span class="number">2</span>)</span><br><span class="line">db = dbHelper.writableDatabase  <span class="comment">// 打开已有数据库，版本号更新，触发onUpgrade</span></span><br></pre></td></tr></table></figure><p>事务是数据库运行的基本单位。当事务执行成功时，所有对数据库的更新操作都会被提交；事务执行中途失败，那么该事务中所有已经进行的操作都会被撤销，恢复到事务执行前的状态。</p><p>以买书为例，买方得到书和卖方失去书必须同时成功或失败，要放在一个事务中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> dbHelper = MyDatabaseHelper(<span class="keyword">this</span>, <span class="string">&quot;BookStore.db&quot;</span>, <span class="number">1</span>)</span><br><span class="line">db.beginTransaction()   <span class="comment">// 开启事务</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 即 DELETE FROM Book WHERE name == &quot;第一行代码&quot;</span></span><br><span class="line">    db.delete(<span class="string">&quot;Book&quot;</span>, <span class="string">&quot;name == ?&quot;</span>, arrayOf(<span class="string">&quot;第一行代码&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 模拟事务失败</span></span><br><span class="line">        <span class="keyword">throw</span> NullPointerException()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> values = ContentValues().apply &#123;</span><br><span class="line">        put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;第一行代码&quot;</span>)</span><br><span class="line">        put(<span class="string">&quot;price&quot;</span>, <span class="number">50.00</span>)</span><br><span class="line">        put(<span class="string">&quot;pages&quot;</span>, <span class="number">810</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    db.insert(<span class="string">&quot;Store&quot;</span>, <span class="literal">null</span>, values)    <span class="comment">// 将valus插入Store表中</span></span><br><span class="line">    db.setTransactionSuccessful()       <span class="comment">// 事务已经执行成功</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    e.printStackTrace()</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    db.endTransaction()                 <span class="comment">// 结束事务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当事务失败时，<code>beginTransaction</code>到<code>endTransaction</code>之内的逻辑都不会生效</p><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 写文件</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">save</span><span class="params">(inputText: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// data为要打开的文件名</span></span><br><span class="line">        <span class="comment">// 第二个参数默认为`MODE_PRIVATE`，表示若该文件已存在，则直接覆盖原文件</span></span><br><span class="line">        <span class="comment">// `MODE_APPEND`表示若该文件已存在，在原文件基础上追加内容</span></span><br><span class="line">        <span class="keyword">val</span> output = openFileOutput(<span class="string">&quot;data&quot;</span>, Context.MODE_PRIVATE)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> writer = BufferedWriter(OutputStreamWriter(output))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// use作用是在Lambda表达式完成后关闭外层的流，无需手动关闭</span></span><br><span class="line">        writer.use &#123;</span><br><span class="line">            it.write(inputText)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 读文件</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">load</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> content = StringBuilder()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> input = openFileInput(<span class="string">&quot;data&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> reader = BufferedReader(InputStreamReader(input))</span><br><span class="line">        reader.use &#123;</span><br><span class="line">            reader.forEachLine &#123; content.append(it) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> content.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;可在 Android Studio 打开&lt;code&gt;Device Explorer&lt;/code&gt;，在&lt;code&gt;/data/data/&amp;lt;APP包名&amp;gt;&lt;/code&gt;中可以看到应用的数据。&lt;/p&gt;
&lt;h2 id=&quot;SharedPreferences&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android中的BroadcastReceiver</title>
    <link href="http://princesaoke.github.io/2024/05/29/Android%E4%B8%AD%E7%9A%84BroadcastReceiver/"/>
    <id>http://princesaoke.github.io/2024/05/29/Android%E4%B8%AD%E7%9A%84BroadcastReceiver/</id>
    <published>2024-05-29T07:11:41.000Z</published>
    <updated>2024-05-29T12:31:01.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="广播接收"><a href="#广播接收" class="headerlink" title="广播接收"></a>广播接收</h1><p>在以下路径查询所有的 broadcast actions：<code>&lt;Android SDK 安装目录&gt;/platforms/&lt;Android API 版本&gt;/data</code>。</p><p>分为动态注册和静态注册。动态注册将BroadcastReceiver写在Activity中，因此只有APP启动时才能接收广播。静态注册写在<code>Manifest.xml</code>中，APP未启动也能接收广播，但只能接收除隐式广播（没有具体指定发送给哪个应用程序的广播）之外的小部分广播。</p><h2 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h2><p>自定义一个继承<code>BroadcastReceiver</code>的类，重写父类的<code>onReceive</code>方法。然后实例化一个<code>IntentFilter</code>，添加要接收的action。最后用<code>registerReceiver</code>方法将自定义类和IntentFilter对象绑定。这样当收到对应action的广播时就会调用onReceive：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> timeChangeReceiver: TimeChangeReceiver</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="keyword">val</span> intentFilter = IntentFilter()</span><br><span class="line">        intentFilter.addAction(<span class="string">&quot;android.intent.action.TIME_TICK&quot;</span>)</span><br><span class="line">        timeChangeReceiver = TimeChangeReceiver()</span><br><span class="line">        registerReceiver(timeChangeReceiver, intentFilter)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">        unregisterReceiver(timeChangeReceiver)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inner</span> <span class="keyword">class</span> <span class="title class_">TimeChangeReceiver</span> : <span class="type">BroadcastReceiver</span>() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onReceive</span><span class="params">(context: <span class="type">Context</span>, intent: <span class="type">Intent</span>)</span></span> &#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">&quot;时间改变&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注：不要在<code>onReceive</code>方法中添加过多的逻辑或者进行任何的耗时操作，因为BroadcastReceiver中是不允许开启线程的，当onReceive运行了较长时间而没有结束时，程序就会出现错误</em></p><h2 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h2><p>Android 8.0（API 级别 26）或更高级别为目标的应用无法在其清单中注册隐式广播的广播接收器，除非广播是专门发送给这些应用的。不过，有几种广播不受这些限制的约束。具体有哪些可以参考<a href="https://developer.android.google.cn/develop/background-work/background-tasks/broadcasts/broadcast-exceptions?hl=zh-cn">隐式广播例外情况</a>。</p><p><img src="/images/Android%E4%B8%AD%E7%9A%84BroadcastReceiver/new.png" alt="新建隐式BroadcastReceiver"></p><p>以接收开机广播为例，在 Android Studio 中右键新建BroadcastReceiver，会将其自动添加到<code>Manifest.xml</code>。新建窗口中的<code>Exported</code>表示是否允许这个BroadcastReceiver接收本程序以外的广播，<code>Enabled</code>表示是否启用这个BroadcastReceiver。</p><p>在<code>Manifest.xml</code>进行修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.BootCompleteReceiver&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 若是自定义的广播，name为包名 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;action android:name=&quot;com.saoke.androiddemo.MY_BROADCAST&quot;/&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="广播发送"><a href="#广播发送" class="headerlink" title="广播发送"></a>广播发送</h1><p>分为<code>标准广播</code>和<code>有序广播</code>。</p><p>标准广播是一种完全异步执行的广播，在广播发出之后，所有的BroadcastReceiver几乎会在同一时刻收到这条广播消息，因此它们之间没有任何先后顺序可言。这种广播的效率会比较高，但同时也意味着它是无法被截断的。</p><p><img src="/images/Android%E4%B8%AD%E7%9A%84BroadcastReceiver/normal_broadcasts.png" alt="标准广播"></p><p>有序广播则是一种同步执行的广播，在广播发出之后，同一时刻只会有一个BroadcastReceiver能够收到这条广播消息，当这个BroadcastReceiver中的逻辑执行完毕后，广播才会继续传递。所以此时的BroadcastReceiver是有先后顺序的，优先级高的BroadcastReceiver就可以先收到广播消息，并且前面的BroadcastReceiver还可以截断正在传递的广播，这样后面的BroadcastReceiver就无法收到广播消息了。</p><p><img src="/images/Android%E4%B8%AD%E7%9A%84BroadcastReceiver/ordered_broadcasts.png" alt="有序广播"></p><h2 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">val</span> intent = Intent(<span class="string">&quot;com.saoke.androiddemo.MY_BROADCAST&quot;</span>)</span><br><span class="line">    intent.setPackage(packageName)  <span class="comment">// packageName 即 getPackageName()，获取当前APP的包名</span></span><br><span class="line">    sendBroadcast(intent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>setPackage()</code>指定这条广播是发送给哪个应用程序的，从而让它变成一条显式广播，否则静态注册的BroadcastReceiver将无法接收到这条广播</p><h2 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">val</span> intent = Intent(<span class="string">&quot;com.saoke.androiddemo.MY_BROADCAST&quot;</span>)</span><br><span class="line">    intent.setPackage(packageName)</span><br><span class="line">    sendOrderedBroadcast(intent, <span class="string">&quot;saoke.androiddemo&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>sendOrderedBroadcast</code>第二个参数为设置的权限，BroadcastReceiver要有对应权限才能接收到广播。权限为带<code>.</code>的字符串，无须权限可设为<code>null</code>。同样的标准广播也可设置权限。</p><p>可在<code>Manifest.xml</code>中设置BroadcastReceiver优先级，优先级高的先收到广播：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 若要接收的广播有设置权限，则APP要声明对应的权限 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:protectionLevel</span>=<span class="string">&quot;normal&quot;</span> <span class="attr">android:name</span>=<span class="string">&quot;saoke.androiddemo&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.MyBroadcastReceiver&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 设置优先级为 100 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.saoke.androiddemo.MY_BROADCAST&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 若要接收的广播有设置权限，则接收器也要设置对应的权限 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;saoke.androiddemo&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可在<code>onReceive</code>中用<code>abortBroadcast()</code>截断广播，后面的BroadcastReceiver将无法再接收到这条广播：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyBroadcastReceiver</span> : <span class="type">BroadcastReceiver</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onReceive</span><span class="params">(context: <span class="type">Context</span>, intent: <span class="type">Intent</span>)</span></span> &#123;</span><br><span class="line">        Toast.makeText(context, <span class="string">&quot;MyBroadcastReceiver收到广播&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">        abortBroadcast()    <span class="comment">// 截断广播</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;广播接收&quot;&gt;&lt;a href=&quot;#广播接收&quot; class=&quot;headerlink&quot; title=&quot;广播接收&quot;&gt;&lt;/a&gt;广播接收&lt;/h1&gt;&lt;p&gt;在以下路径查询所有的 broadcast actions：&lt;code&gt;&amp;lt;Android SDK 安装目录&amp;gt;/pl</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android中的Activity</title>
    <link href="http://princesaoke.github.io/2024/05/27/Android%E4%B8%AD%E7%9A%84Activity/"/>
    <id>http://princesaoke.github.io/2024/05/27/Android%E4%B8%AD%E7%9A%84Activity/</id>
    <published>2024-05-27T15:14:30.000Z</published>
    <updated>2024-06-13T15:01:43.215Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaokangss/article/details/125547085">Activity的生命周期和启动模式详解</a></p><h2 id="Activity的状态"><a href="#Activity的状态" class="headerlink" title="Activity的状态"></a>Activity的状态</h2><ul><li><strong>运行状态</strong>：Activity位于返回栈的栈顶时就处于运行状态</li><li><strong>暂停状态</strong>：Activity不在栈顶，但仍然可见时，就处于暂停状态</li><li><strong>停止状态</strong>：Activity不在栈顶，且完全不可见的时，就处于停止状态。该状态下的Activity在内存紧张时可能被回收</li><li><strong>销毁状态</strong>：Activity从返回栈中移除，不在栈里后就变成了销毁状态，系统最倾向于回收处于这种状态的Activity</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/images/Android%E4%B8%AD%E7%9A%84Activity/life_cycle.png" alt="Activity的生命周期流程图"></p><ul><li><strong>onCreate</strong>：在Activity第一次被创建的时候调用，执行加载布局、绑定事件等</li><li><strong>onStart</strong>：在Activity由不可见变为可见的时候调用</li><li><strong>onResume</strong>：当焦点从未完全覆盖屏幕的Activity（弹窗等）切换到此Activity时（即此Activity准备好和用户进行交互时）调用，此时的Activity一定位于返回栈的栈顶，并且处于运行状态，在最前台</li><li><strong>onPause</strong>：在系统准备去启动或者恢复另一个Activity的时候调用，该方法的执行速度要快，否则会影响到新的栈顶Activity的使用</li><li><strong>onStop</strong>：在Activity完全不可见时调用。它和onPause方法的主要区别在于，若启动的新Activity是对话框式的，则onPause方法会执行，而onStop不会</li><li><strong>onDestroy</strong>：在Activity被销毁之前调用，之后Activity的状态将变为销毁状态</li><li><strong>onRestart</strong>：在Activity由停止状态变为运行状态之前调用，也就是Activity被重新启动了</li></ul><p>Q：<code>Activity A</code>启动<code>Activity B</code>，那么<code>B</code>的<code>onResume</code>和<code>A</code>的<code>onPause</code>哪个先执行？</p><p>A：</p><blockquote><p><code>A</code>先执行<code>onPause</code>，紧接着<code>B</code>执行<code>onCreate</code>-&gt;<code>onStart</code>-&gt;<code>onResume</code>，接着执行<code>A</code>的<code>onStop</code></p></blockquote><p>Q：Activity进入停止状态后被系统回收，如何还原数据？</p><p>A：</p><blockquote><p>Activity中的<code>onSaveInstanceState</code>方法在Activity被回收前会被调用，它携带一个<code>Bundle</code>类型的参数用于保存数据。<br>可以在Activity中重写<code>onSaveInstanceState</code>方法，在Bundle对象中存入要保存的数据，<br>当Activity被回收后重新创建新的实例，在<code>onCreate</code>方法中可以获取到保存的Bundle对象。<br>判断当Bundle不为空时，对数据进行赋值还原。</p></blockquote><h2 id="Activity的返回栈"><a href="#Activity的返回栈" class="headerlink" title="Activity的返回栈"></a>Activity的返回栈</h2><p>……</p><h2 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h2><p>在<code>Manifest.xml</code>中修改Activity的<code>launchMode</code>切换Activity的启动模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">&quot;standard&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h4><p>standard是Activity默认的启动模式，在不进行显式指定的情况下，所有Activity都会自动使用这种启动模式。在standard模式下，每当启动一个新的Activity，它就会在返回栈中入栈，并处于栈顶的位置。对于使用standard模式的Activity，系统不会在乎这个Activity是否已经在返回栈中存在，每次启动都会创建一个该Activity的新实例。</p><h4 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h4><p>当Activity的启动模式指定为singleTop，在启动Activity时如果发现返回栈的栈顶已经是该Activity，则认为可以直接使用它，不会再创建新的Activity实例。不过当FirstActivity并未处于栈顶位置时，再启动FirstActivity还是会创建新的实例。</p><h4 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h4><p>当Activity的启动模式指定为singleTask，每次启动该Activity时，系统首先会在返回栈中检查是否存在该Activity的实例，如果发现已经存在则直接使用该实例，并把在这个Activity之上的所有其他Activity统统出栈，如果没有发现就会创建一个新的Activity实例。</p><h4 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h4><p>指定为singleInstance模式的Activity会启用一个新的返回栈来管理这个Activity，这样不管是哪个应用程序来访问这个Activity，都共用同一个返回栈，也就解决了共享Activity实例的问题</p><p>Q：<code>A</code>、<code>B</code>、<code>C</code>三个Activity，其中<code>A</code>、<code>C</code>为<code>standard</code>，<code>B</code>为<code>singleInstance</code>，从<code>A</code>进入<code>B</code>再从<code>B</code>进入<code>C</code>。现在连按三次返回，返回顺序是怎样的？</p><p>A：</p><blockquote><p>从<code>C</code>返回到<code>A</code>再返回到<code>B</code>。</p><p>这是因为<code>A</code>、<code>C</code>处于同一返回栈，而<code>B</code>为<code>singleInstance</code>，单独处于一个返回栈。<br>因此<code>C</code>先出栈，<code>A</code>成为栈顶；<code>A</code>再出栈后返回栈为空，于是显示另一个返回栈的栈顶Activity，即<code>B</code>。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/xiaokangss/article/details/125547085&quot;&gt;Activity的生命周期和启动模式详解&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Activity的状态&quot;&gt;&lt;a href=&quot;#Activity</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>阿里智能信息前端实习面经</title>
    <link href="http://princesaoke.github.io/2024/05/15/%E9%98%BF%E9%87%8C%E6%99%BA%E8%83%BD%E4%BF%A1%E6%81%AF%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/"/>
    <id>http://princesaoke.github.io/2024/05/15/%E9%98%BF%E9%87%8C%E6%99%BA%E8%83%BD%E4%BF%A1%E6%81%AF%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/</id>
    <published>2024-05-15T13:34:56.000Z</published>
    <updated>2024-05-17T04:24:21.503Z</updated>
    
    <content type="html"><![CDATA[<p>一面挂，四十五分钟。</p><ul><li><span style="color: green">✔</span> 编程题：URL combo - 字符串分割</li><li><span style="color: green">✔</span> 编程题：统计网页中出现了几种HTML元素</li><li><span style="color: red">❌</span> Array如何转化为Set</li><li><span style="color: green">✔</span> 自我介绍，说一下学习和项目经历</li><li><span style="color: green">✔</span> 为什么学习Flutter？Flutter优势何在？</li><li><span style="color: green">✔</span> Flutter三棵树分别起什么作用？</li><li><span style="color: red">❌</span> Flutter状态管理相关，子组件如何与父组件通信？</li><li><span style="color: red">❌</span> Flutter如何与底层原生通信，如image_picker调用系统相机的原理？</li><li><span style="color: red">❌</span> 说一下MQTT协议？有什么特性？为什么物联网用MQTT？MQTT是基于TCP还是UDP？</li><li><span style="color: red">❌</span> 说一下 HTTP1.0 和 HTTP2.0 的区别</li><li><span style="color: red">❌</span> 说一下前端工程化？Vite有什么优势？</li><li><span style="color: green">✔</span> 为什么没有选择客户端开发？</li><li><span style="color: green">✔</span> 未来规划读研还是就业？</li></ul><p>编程题：URL combo - 字符串分割</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下是天猫首页一个经过 combo 的 js 资源 url，请找出 combo 规律并用 js 写一个可复用的函数来解该 url，得到每个 combo 前的 url 地址。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> urlStr = <span class="string">&#x27;https://g.alicdn.com/??code/npm/web-rax-framework/0.6.5/dist/framework.web.min.js,mtb/lib-windvane/2.1.8/windvane.cmd.js,mtb/lib-promise/3.1.3/polyfillB.js,mtb/lib-mtop/2.4.0/mtop.js,mtb/lib-login/1.5.3/login.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unComboUrl</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="comment">// 以&#x27;/&#x27;分割，还原出baseUrl</span></span><br><span class="line">    <span class="comment">// 再以逗号分割，将每一项与baseUrl合并</span></span><br><span class="line">    <span class="keyword">const</span> l = url.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> baseUrl = l[<span class="number">0</span>] + <span class="string">&#x27;//&#x27;</span> + l[<span class="number">2</span>] + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> list = url.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(list[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        list[i] = baseUrl + list[i]</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(list[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">unComboUrl</span>(urlStr)</span><br></pre></td></tr></table></figure><p>编程题：统计网页中出现了几种HTML元素</p><p>一开始没写出来，因为我没法用DOM操作提取出HTML标签，后来面试官改成字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在一个网页中，用尽可能少的代码，计算出当前网页用了多少种 HTML 元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历字符串，遇到`&lt;`则开始识别HTML标签，`&gt;`或空格前的即为标签，将其入栈</span></span><br><span class="line"><span class="comment">// 遇到`&lt;/`则为闭标签，识别后将栈顶对应标签出栈，若栈顶不匹配，则说明栈顶是非闭合标签，同样出栈，直到匹配为止</span></span><br><span class="line"><span class="comment">// 若是形如`&lt;img /&gt;`的标签，则不用入栈进入下一步</span></span><br><span class="line"><span class="comment">// 将出栈的标签加入集合，得到无重复的标签，集合大小即HTML种类数量</span></span><br></pre></td></tr></table></figure><p>HTTP1.0 和 HTTP2.0的区别：</p><p>HTTP1.0：</p><ul><li><strong>单一请求-响应模式</strong>：每次请求-响应都需要建立一个新的TCP连接，这个过程包括三次握手，增加了延迟</li><li><strong>无状态连接</strong>：每个请求都是独立的，服务器不维护客户端的状态</li><li><strong>请求头和响应头冗余</strong>：每次请求都会发送完整的头部信息，导致数据冗余和效率低下</li><li><strong>文本协议</strong>：所有的请求和响应都是基于文本的，解析速度相对较慢</li><li><strong>有限的并发</strong>：因为每个请求都需要一个单独的TCP连接，浏览器通常限制同一域名下的并发连接数，通常是4到6个</li></ul><p>HTTP2.0：</p><ul><li><strong>多路复用</strong>：实现了多路复用，允许在单个TCP连接上并发多个请求-响应对，从而减少了连接的数量和延迟</li><li><strong>二进制协议</strong>：相对于HTTP&#x2F;1.0的文本协议，HTTP&#x2F;2.0采用二进制格式，解析更高效</li><li><strong>头部压缩</strong>：使用HPACK压缩算法来减少头部信息的大小，从而减少带宽消耗</li><li><strong>服务器推送</strong>：服务器可以主动向客户端推送资源，而无需客户端明确请求，这样可以减少延迟并提高性能</li><li><strong>流优先级</strong>：客户端和服务器可以通过设置流优先级来优化资源的传输顺序</li><li><strong>连接管理</strong>：更有效的连接管理机制，通过单个连接处理多个并发请求，减少了连接建立和维护的开销</li><li><strong>改进的安全性</strong>：虽然HTTP&#x2F;2.0可以在明文（HTTP）和加密（HTTPS）下工作，但通常与TLS（传输层安全协议）结合使用，以提供更好的安全性</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一面挂，四十五分钟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;color: green&quot;&gt;✔&lt;/span&gt; 编程题：URL combo - 字符串分割&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: green&quot;&gt;✔&lt;/span&gt; 编程题：统计网页中出</summary>
      
    
    
    
    <category term="面经" scheme="http://princesaoke.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法总结</title>
    <link href="http://princesaoke.github.io/2024/05/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://princesaoke.github.io/2024/05/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2024-05-14T12:47:03.000Z</published>
    <updated>2024-09-21T07:59:42.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>总共需要比较<code>n - 1</code>趟，每趟<code>n - 1 - i</code>次。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubbleSort</span><span class="params">(T a[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span> - i; j++)</span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) swap(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>基于<code>分治</code>和<code>递归</code>。</p><p>其基本思路是，在数组中选择一个元素作为基准值，然后将数组中小于基准值的元素移动到它的左边，大于基准值的元素移动到它的右边。然后对左右两个子数组递归地重复这个过程，直到子数组的大小为1或0。</p><p>最好情况：每次划分左右两边的元素数量相同各为一半，则此时时间复杂度为<code>O(nlogn)</code></p><p>最坏情况：每次划分所有元素都在一边，另一边为空，则此时与冒泡排序类似，时间复杂度为<code>O(n²)</code></p><p>平均情况：时间复杂度为<code>O(nlogn)</code></p><p>因此关键在于每次基准值的选取。</p><p>通过不同方式选取基准值，有以下几种衍生快排：</p><ul><li><p><strong>随机快速排序</strong>：即在数组中完全随机地挑选一个值作为基准值。</p></li><li><p><strong>三数取中快速排序</strong>：即取数组中第一个、中间、最后一个这三个元素的中位数作为基准值。</p></li><li><p><strong>三划分快速排序</strong>：适用于数组中有较多大小相同的数。对于等于基准值的数分为除左右外的第三部分，不用继续参与递归。</p></li></ul><p>图解：</p><p>以数组中第一个元素为基准值</p><p><img src="/images/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/quick_sort_1.jpg" alt="快排1"></p><p>左指针不断右移，直到找到比基准值大的元素停下；右指针不断左移，直到找到比基准值小的元素停下</p><p><img src="/images/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/quick_sort_2.jpg" alt="快排2"></p><p><img src="/images/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/quick_sort_3.jpg" alt="快排3"></p><p><img src="/images/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/quick_sort_4.jpg" alt="快排4"></p><p><img src="/images/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/quick_sort_5.jpg" alt="快排5"></p><p>当两指针碰面或超过，说明已经全部遍历了</p><p><img src="/images/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/quick_sort_6.jpg" alt="快排6"></p><p><img src="/images/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/quick_sort_7.jpg" alt="快排7"></p><p>交换后左边都小于基准值，右边都大于基准值</p><p><img src="/images/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/quick_sort_8.jpg" alt="快排8"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 以数组中第一个元素为基准值，确定其位置</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(T a[], <span class="type">int</span> begin, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = begin + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right = end;</span><br><span class="line">    T base = a[begin];</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[left++] &lt; base);   <span class="comment">// 左指针不断右移，直到找到比基准值大的元素</span></span><br><span class="line">        <span class="keyword">while</span> (a[right--] &gt; base);  <span class="comment">// 右指针不断左移，直到找到比基准值小的元素</span></span><br><span class="line">        <span class="keyword">if</span>(left &gt;= right) <span class="keyword">break</span>;    <span class="comment">// 当两指针碰面或超过，说明已经全部遍历了</span></span><br><span class="line">        swap(a[left], a[right]);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[right], a[begin]);       <span class="comment">// 交换后right左边都小于base，右边都大于base</span></span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">randomPartition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> randomIndex = Random(begin, end);  <span class="comment">// 可取不同值作为基准值，这里随机一个下标</span></span><br><span class="line">    swap(a[randomIndex], a[begin]);</span><br><span class="line">    <span class="keyword">return</span> partition(a, begin, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">quickSort</span><span class="params">(T a[], <span class="type">int</span> begin, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (begin &lt; end) &#123;</span><br><span class="line">        <span class="type">int</span> middle = partition(a, begin, end);</span><br><span class="line">        quickSort(a, begin, middle - <span class="number">1</span>);</span><br><span class="line">        quickSort(a, middle + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;p&gt;总共需要比较&lt;code&gt;n - 1&lt;/code&gt;趟，每趟&lt;code&gt;n - 1 - i&lt;/code&gt;次。&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="算法" scheme="http://princesaoke.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>饿了么客户端实习面经</title>
    <link href="http://princesaoke.github.io/2024/05/07/%E9%A5%BF%E4%BA%86%E4%B9%88%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/"/>
    <id>http://princesaoke.github.io/2024/05/07/%E9%A5%BF%E4%BA%86%E4%B9%88%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/</id>
    <published>2024-05-07T11:30:21.000Z</published>
    <updated>2024-05-17T04:15:31.399Z</updated>
    
    <content type="html"><![CDATA[<p>答的很烂……就没几个问题是答出来的 T^T</p><p>共四十多分钟。</p><ul><li><span style="color: green">✔</span> 自我介绍</li><li><span style="color: green">✔</span> 详细讲一下实习期间做了哪些事情？实现的细节？</li><li><span style="color: red">❌</span> LazyColumn和Column有什么区别？为什么能提升性能？</li><li><span style="color: red">❌</span> 长列表的数据如果一次性加载会卡顿，如何处理？分页查询相关。如何刷新？前一页的数据如何处理？</li><li><span style="color: red">❌</span> Flutter三个树？嵌套的组件渲染绘制的步骤？</li><li><span style="color: green">✔</span> UDP和TCP的区别</li><li><span style="color: red">❌</span> 2M的数据流，通过TCP发送，要经过哪些步骤？</li><li><span style="color: red">❌</span> APP的启动过程</li><li><span style="color: green">✔</span> Activity的生命周期？两个Activity跳转其分别的生命周期函数调用顺序？哪些情况下不会进入onStop？</li><li><span style="color: red">❌</span> 说一下快排</li><li><span style="color: green">✔</span> 最大递增子串</li><li><span style="color: green">✔</span> 链表翻转</li></ul><p>长列表性能问题应该是想问<code>RecyclerView</code>四级缓存机制吧。即<code>Scrap缓存</code>、<code>Recycle缓存</code>、<code>ViewCacheExtension缓存</code>、<code>RecycledViewPool缓存</code>。</p><p>RecyclerView在滚动时会复用已经存在的ViewHolder对象，而不是每次都创建新的ViewHolder。这样做的好处是减少了对象的创建和销毁次数，提高了内存利用率和性能。当列表项滚出屏幕时，对应的ViewHolder会被移除并加入到RecyclerView的内部缓存池中，当新的列表项需要显示时，RecyclerView会尝试从缓存池中获取可用的ViewHolder对象，避免了重新创建ViewHolder。</p><p>RecyclerView提供了setItemViewCacheSize()方法来设置缓存的ViewHolder数量。通过适当调整这个值，可以控制缓存的大小，避免过多的缓存导致内存占用过高。</p><p>Flutter三棵树指的是<code>Widget树</code>、<code>Element树</code>、<code>RenderObject树</code>。</p><p><a href="https://blog.csdn.net/xiaokangss/article/details/125547085">Activity的生命周期和启动模式详解</a></p><p><code>Fragment</code>在显示到销毁的过程中会执行自己的生命周期：<code>onAttach</code> -&gt; <code>onCreate</code> -&gt;<code>onCreateView</code> -&gt; <code>onActivityCreate</code> -&gt; <code>onStart</code> -&gt; <code>onResume</code> -&gt; <code>onPause</code> -&gt; <code>onStop</code> -&gt; <code>onDestroyView</code> -&gt; <code>onDestroy</code> -&gt; <code>onDetach</code></p><p>同时也受到<code>Activity</code>生命周期的影响，如果Activity触发<code>onPause</code>，Fragment也会执行相应的onPause。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;答的很烂……就没几个问题是答出来的 T^T&lt;/p&gt;
&lt;p&gt;共四十多分钟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;color: green&quot;&gt;✔&lt;/span&gt; 自我介绍&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color: green&quot;&gt;✔&lt;/span&gt; 详</summary>
      
    
    
    
    <category term="面经" scheme="http://princesaoke.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>美团客户端实习面经</title>
    <link href="http://princesaoke.github.io/2024/04/28/%E7%BE%8E%E5%9B%A2%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/"/>
    <id>http://princesaoke.github.io/2024/04/28/%E7%BE%8E%E5%9B%A2%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/</id>
    <published>2024-04-28T14:08:43.000Z</published>
    <updated>2024-09-21T05:06:05.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="笔试-4-27"><a href="#笔试-4-27" class="headerlink" title="笔试 4.27"></a>笔试 4.27</h2><p>题型：30题单选题，2题编程题</p><p>时间：2小时</p><p>单选题主要有计算机网络、操作系统、数据结构、数字找规律、三元一次方程应用题等。</p><p>记录单选题涉及到的知识点</p><ul><li>有效的子网掩码</li><li>SQL共享锁和排它锁，其他事务能否读写</li><li>HTTP2 和 HTTP3 的区别</li></ul><p>编程题AC第一题，第二题是一个九宫格魔法阵，周围的数值改变怎么怎么样的，没一点思路。</p><p>当时没记录，现在忘了。。</p><h2 id="一面-5-16"><a href="#一面-5-16" class="headerlink" title="一面 5.16"></a>一面 5.16</h2><ul><li><span style="color: green">✔</span> C和C++的区别</li><li><span style="color: red">❌</span> 子结构体对父结构体函数的重写</li><li><span style="color: green">✔</span> 进程和线程的区别</li><li><span style="color: green">✔</span> 同步和异步的区别？为什么需要异步？多线程操作时可能出现什么问题？</li><li><span style="color: red">❌</span> OSI七层网络模型</li><li><span style="color: green">✔</span> HTTP和HTTPS的区别？HTTP全称是什么？HTTPS的S指什么？</li><li><span style="color: green">✔</span> TCP和UDP的区别</li><li><span style="color: green">✔</span> 为什么要三次握手</li><li><span style="color: green">✔</span> 服务器如何知道请求中的不同类型的数据格式？</li><li><span style="color: red">❌</span> 编程题：翻转链表</li></ul><p>全都是考基础，没问项目没问实习。</p><p>开头自我介绍，然后问我熟悉什么语言，C++或Java会吗，一开始就是打算考编程语言。</p><p>C和C++的区别，答：一个是面向对象一个是面向过程，C++有输入输出流</p><p>然后出了个题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    f() &#123; <span class="built_in">printf</span>(<span class="string">&#x27;A&#x27;</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> :</span> A &#123;</span><br><span class="line">    f() &#123; <span class="built_in">printf</span>(<span class="string">&#x27;B&#x27;</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    A a = A();</span><br><span class="line">    B b = B();</span><br><span class="line">    a.f();</span><br><span class="line">    b.f();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问输出是什么。又问给<code>B</code>的<code>f()</code>加上<code>virtual</code>，输出是什么。</p><p>最后一题考编程题，两非递减数组原地排序，LeetCode上刷过，心中窃喜，结果语言切到C++，判题器有点问题没给提交模板，判不了题直接编译错误，面试官也弄不明白，就给我换了一题翻转链表，结果没做出来，被自己的抽象操作蠢哭了…… T^T</p><p>最后面试官还指出了我的不足。在我做编程题的时候他看了我的Github和博客，说我项目是足够的，但是要注重基础，编程语言的基础和底层，计网、数据结构四大件的基础等。</p><p>还是第一次有面试官给我提建议，发觉不同面试官之间面试方式还是有挺大差距的，有的没怎么问编程语言，有的不怎么问实践。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;笔试-4-27&quot;&gt;&lt;a href=&quot;#笔试-4-27&quot; class=&quot;headerlink&quot; title=&quot;笔试 4.27&quot;&gt;&lt;/a&gt;笔试 4.27&lt;/h2&gt;&lt;p&gt;题型：30题单选题，2题编程题&lt;/p&gt;
&lt;p&gt;时间：2小时&lt;/p&gt;
&lt;p&gt;单选题主要有计算机网络、操</summary>
      
    
    
    
    <category term="面经" scheme="http://princesaoke.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>各种编码格式</title>
    <link href="http://princesaoke.github.io/2024/04/12/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    <id>http://princesaoke.github.io/2024/04/12/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/</id>
    <published>2024-04-11T16:27:17.000Z</published>
    <updated>2024-04-11T17:11:13.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><table><thead><tr><th align="center">十进制</th><th align="center">缩写&#x2F;字符</th><th align="center">解释</th><th align="center">二进制</th><th align="center">八进制</th><th align="center">十六进制</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">NUL(null)</td><td align="center">空字符</td><td align="center">0000 0000</td><td align="center">00</td><td align="center">0x00</td></tr><tr><td align="center">1</td><td align="center">SOH(start of headline)</td><td align="center">标题开始</td><td align="center">0000 0001</td><td align="center">01</td><td align="center">0x01</td></tr><tr><td align="center">2</td><td align="center">STX (start of text)</td><td align="center">正文开始</td><td align="center">0000 0010</td><td align="center">02</td><td align="center">0x02</td></tr><tr><td align="center">3</td><td align="center">ETX (end of text)</td><td align="center">正文结束</td><td align="center">0000 0011</td><td align="center">03</td><td align="center">0x03</td></tr><tr><td align="center">4</td><td align="center">EOT (end of transmission)</td><td align="center">传输结束</td><td align="center">0000 0100</td><td align="center">04</td><td align="center">0x04</td></tr><tr><td align="center">5</td><td align="center">ENQ (enquiry)</td><td align="center">请求</td><td align="center">0000 0101</td><td align="center">05</td><td align="center">0x05</td></tr><tr><td align="center">6</td><td align="center">ACK (acknowledge)</td><td align="center">收到通知</td><td align="center">0000 0110</td><td align="center">06</td><td align="center">0x06</td></tr><tr><td align="center">7</td><td align="center">BEL (bell)</td><td align="center">响铃</td><td align="center">0000 0111</td><td align="center">07</td><td align="center">0x07</td></tr><tr><td align="center">8</td><td align="center">BS (backspace)</td><td align="center">退格</td><td align="center">0000 1000</td><td align="center">010</td><td align="center">0x08</td></tr><tr><td align="center">9</td><td align="center">HT (horizontal tab)</td><td align="center">水平制表符</td><td align="center">0000 1001</td><td align="center">011</td><td align="center">0x09</td></tr><tr><td align="center">10</td><td align="center">LF (NL line feed, new line)</td><td align="center">换行键</td><td align="center">0000 1010</td><td align="center">012</td><td align="center">0x0A</td></tr><tr><td align="center">11</td><td align="center">VT (vertical tab)</td><td align="center">垂直制表符</td><td align="center">0000 1011</td><td align="center">013</td><td align="center">0x0B</td></tr><tr><td align="center">12</td><td align="center">FF (NP form feed, new page)</td><td align="center">换页键</td><td align="center">0000 1100</td><td align="center">014</td><td align="center">0x0C</td></tr><tr><td align="center">13</td><td align="center">CR (carriage return)</td><td align="center">回车键</td><td align="center">0000 1101</td><td align="center">015</td><td align="center">0x0D</td></tr><tr><td align="center">14</td><td align="center">SO (shift out)</td><td align="center">不用切换</td><td align="center">0000 1110</td><td align="center">016</td><td align="center">0x0E</td></tr><tr><td align="center">15</td><td align="center">SI (shift in)</td><td align="center">启用切换</td><td align="center">0000 1111</td><td align="center">017</td><td align="center">0x0F</td></tr><tr><td align="center">16</td><td align="center">DLE (data link escape)</td><td align="center">数据链路转义</td><td align="center">0001 0000</td><td align="center">020</td><td align="center">0x10</td></tr><tr><td align="center">17</td><td align="center">DC1 (device control 1)</td><td align="center">设备控制1</td><td align="center">0001 0001</td><td align="center">021</td><td align="center">0x11</td></tr><tr><td align="center">18</td><td align="center">DC2 (device control 2)</td><td align="center">设备控制2</td><td align="center">0001 0010</td><td align="center">022</td><td align="center">0x12</td></tr><tr><td align="center">19</td><td align="center">DC3 (device control 3)</td><td align="center">设备控制3</td><td align="center">0001 0011</td><td align="center">023</td><td align="center">0x13</td></tr><tr><td align="center">20</td><td align="center">DC4 (device control 4)</td><td align="center">设备控制4</td><td align="center">0001 0100</td><td align="center">024</td><td align="center">0x14</td></tr><tr><td align="center">21</td><td align="center">NAK (negative acknowledge)</td><td align="center">拒绝接收</td><td align="center">0001 0101</td><td align="center">025</td><td align="center">0x15</td></tr><tr><td align="center">22</td><td align="center">SYN (synchronous idle)</td><td align="center">同步空闲</td><td align="center">0001 0110</td><td align="center">026</td><td align="center">0x16</td></tr><tr><td align="center">23</td><td align="center">ETB (end of trans. block)</td><td align="center">结束传输块</td><td align="center">0001 0111</td><td align="center">027</td><td align="center">0x17</td></tr><tr><td align="center">24</td><td align="center">CAN (cancel)</td><td align="center">取消</td><td align="center">0001 1000</td><td align="center">030</td><td align="center">0x18</td></tr><tr><td align="center">25</td><td align="center">EM (end of medium)</td><td align="center">媒介结束</td><td align="center">0001 1001</td><td align="center">031</td><td align="center">0x19</td></tr><tr><td align="center">26</td><td align="center">SUB (substitute)</td><td align="center">代替</td><td align="center">0001 1010</td><td align="center">032</td><td align="center">0x1A</td></tr><tr><td align="center">27</td><td align="center">ESC (escape)</td><td align="center">换码(溢出)</td><td align="center">0001 1011</td><td align="center">033</td><td align="center">0x1B</td></tr><tr><td align="center">28</td><td align="center">FS (file separator)</td><td align="center">文件分隔符</td><td align="center">0001 1100</td><td align="center">034</td><td align="center">0x1C</td></tr><tr><td align="center">29</td><td align="center">GS (group separator)</td><td align="center">分组符</td><td align="center">0001 1101</td><td align="center">035</td><td align="center">0x1D</td></tr><tr><td align="center">30</td><td align="center">RS (record separator)</td><td align="center">记录分隔符</td><td align="center">0001 1110</td><td align="center">036</td><td align="center">0x1E</td></tr><tr><td align="center">31</td><td align="center">US (unit separator)</td><td align="center">单元分隔符</td><td align="center">0001 1111</td><td align="center">037</td><td align="center">0x1F</td></tr><tr><td align="center">32</td><td align="center">(space)</td><td align="center">空格</td><td align="center">0010 0000</td><td align="center">040</td><td align="center">0x20</td></tr><tr><td align="center">33</td><td align="center">!</td><td align="center">叹号</td><td align="center">0010 0001</td><td align="center">041</td><td align="center">0x21</td></tr><tr><td align="center">34</td><td align="center">“</td><td align="center">双引号</td><td align="center">0010 0010</td><td align="center">042</td><td align="center">0x22</td></tr><tr><td align="center">35</td><td align="center">#</td><td align="center">井号</td><td align="center">0010 0011</td><td align="center">043</td><td align="center">0x23</td></tr><tr><td align="center">36</td><td align="center">$</td><td align="center">美元符</td><td align="center">0010 0100</td><td align="center">044</td><td align="center">0x24</td></tr><tr><td align="center">37</td><td align="center">%</td><td align="center">百分号</td><td align="center">0010 0101</td><td align="center">045</td><td align="center">0x25</td></tr><tr><td align="center">38</td><td align="center">&amp;</td><td align="center">和号</td><td align="center">0010 0110</td><td align="center">046</td><td align="center">0x26</td></tr><tr><td align="center">39</td><td align="center">‘</td><td align="center">闭单引号</td><td align="center">0010 0111</td><td align="center">047</td><td align="center">0x27</td></tr><tr><td align="center">40</td><td align="center">(</td><td align="center">开括号</td><td align="center">0010 1000</td><td align="center">050</td><td align="center">0x28</td></tr><tr><td align="center">41</td><td align="center">)</td><td align="center">闭括号</td><td align="center">0010 1001</td><td align="center">051</td><td align="center">0x29</td></tr><tr><td align="center">42</td><td align="center">*</td><td align="center">星号</td><td align="center">0010 1010</td><td align="center">052</td><td align="center">0x2A</td></tr><tr><td align="center">43</td><td align="center">+</td><td align="center">加号</td><td align="center">0010 1011</td><td align="center">053</td><td align="center">0x2B</td></tr><tr><td align="center">44</td><td align="center">,</td><td align="center">逗号</td><td align="center">0010 1100</td><td align="center">054</td><td align="center">0x2C</td></tr><tr><td align="center">45</td><td align="center">-</td><td align="center">减号&#x2F;破折号</td><td align="center">0010 1101</td><td align="center">055</td><td align="center">0x2D</td></tr><tr><td align="center">46</td><td align="center">.</td><td align="center">句号</td><td align="center">0010 1110</td><td align="center">056</td><td align="center">0x2E</td></tr><tr><td align="center">47</td><td align="center">&#x2F;</td><td align="center">斜杠</td><td align="center">0010 1111</td><td align="center">057</td><td align="center">0x2F</td></tr><tr><td align="center">48</td><td align="center">0</td><td align="center">字符0</td><td align="center">0011 0000</td><td align="center">060</td><td align="center">0x30</td></tr><tr><td align="center">49</td><td align="center">1</td><td align="center">字符1</td><td align="center">0011 0001</td><td align="center">061</td><td align="center">0x31</td></tr><tr><td align="center">50</td><td align="center">2</td><td align="center">字符2</td><td align="center">0011 0010</td><td align="center">062</td><td align="center">0x32</td></tr><tr><td align="center">51</td><td align="center">3</td><td align="center">字符3</td><td align="center">0011 0011</td><td align="center">063</td><td align="center">0x33</td></tr><tr><td align="center">52</td><td align="center">4</td><td align="center">字符4</td><td align="center">0011 0100</td><td align="center">064</td><td align="center">0x34</td></tr><tr><td align="center">53</td><td align="center">5</td><td align="center">字符5</td><td align="center">0011 0101</td><td align="center">065</td><td align="center">0x35</td></tr><tr><td align="center">54</td><td align="center">6</td><td align="center">字符6</td><td align="center">0011 0110</td><td align="center">066</td><td align="center">0x36</td></tr><tr><td align="center">55</td><td align="center">7</td><td align="center">字符7</td><td align="center">0011 0111</td><td align="center">067</td><td align="center">0x37</td></tr><tr><td align="center">56</td><td align="center">8</td><td align="center">字符8</td><td align="center">0011 1000</td><td align="center">070</td><td align="center">0x38</td></tr><tr><td align="center">57</td><td align="center">9</td><td align="center">字符9</td><td align="center">0011 1001</td><td align="center">071</td><td align="center">0x39</td></tr><tr><td align="center">58</td><td align="center">:</td><td align="center">冒号</td><td align="center">0011 1010</td><td align="center">072</td><td align="center">0x3A</td></tr><tr><td align="center">59</td><td align="center">;</td><td align="center">分号</td><td align="center">0011 1011</td><td align="center">073</td><td align="center">0x3B</td></tr><tr><td align="center">60</td><td align="center">&lt;</td><td align="center">小于</td><td align="center">0011 1100</td><td align="center">074</td><td align="center">0x3C</td></tr><tr><td align="center">61</td><td align="center">&#x3D;</td><td align="center">等号</td><td align="center">0011 1101</td><td align="center">075</td><td align="center">0x3D</td></tr><tr><td align="center">62</td><td align="center">&gt;</td><td align="center">大于</td><td align="center">0011 1110</td><td align="center">076</td><td align="center">0x3E</td></tr><tr><td align="center">63</td><td align="center">?</td><td align="center">问号</td><td align="center">0011 1111</td><td align="center">077</td><td align="center">0x3F</td></tr><tr><td align="center">64</td><td align="center">@</td><td align="center">电子邮件符号</td><td align="center">0100 0000</td><td align="center">0100</td><td align="center">0x40</td></tr><tr><td align="center">65</td><td align="center">A</td><td align="center">大写字母A</td><td align="center">0100 0001</td><td align="center">0101</td><td align="center">0x41</td></tr><tr><td align="center">66</td><td align="center">B</td><td align="center">大写字母B</td><td align="center">0100 0010</td><td align="center">0102</td><td align="center">0x42</td></tr><tr><td align="center">67</td><td align="center">C</td><td align="center">大写字母C</td><td align="center">0100 0011</td><td align="center">0103</td><td align="center">0x43</td></tr><tr><td align="center">68</td><td align="center">D</td><td align="center">大写字母D</td><td align="center">0100 0100</td><td align="center">0104</td><td align="center">0x44</td></tr><tr><td align="center">69</td><td align="center">E</td><td align="center">大写字母E</td><td align="center">0100 0101</td><td align="center">0105</td><td align="center">0x45</td></tr><tr><td align="center">70</td><td align="center">F</td><td align="center">大写字母F</td><td align="center">0100 0110</td><td align="center">0106</td><td align="center">0x46</td></tr><tr><td align="center">71</td><td align="center">G</td><td align="center">大写字母G</td><td align="center">0100 0111</td><td align="center">0107</td><td align="center">0x47</td></tr><tr><td align="center">72</td><td align="center">H</td><td align="center">大写字母H</td><td align="center">0100 1000</td><td align="center">0110</td><td align="center">0x48</td></tr><tr><td align="center">73</td><td align="center">I</td><td align="center">大写字母I</td><td align="center">0100 1001</td><td align="center">0111</td><td align="center">0x49</td></tr><tr><td align="center">74</td><td align="center">J</td><td align="center">大写字母J</td><td align="center">01001010</td><td align="center">0112</td><td align="center">0x4A</td></tr><tr><td align="center">75</td><td align="center">K</td><td align="center">大写字母K</td><td align="center">0100 1011</td><td align="center">0113</td><td align="center">0x4B</td></tr><tr><td align="center">76</td><td align="center">L</td><td align="center">大写字母L</td><td align="center">0100 1100</td><td align="center">0114</td><td align="center">0x4C</td></tr><tr><td align="center">77</td><td align="center">M</td><td align="center">大写字母M</td><td align="center">0100 1101</td><td align="center">0115</td><td align="center">0x4D</td></tr><tr><td align="center">78</td><td align="center">N</td><td align="center">大写字母N</td><td align="center">0100 1110</td><td align="center">0116</td><td align="center">0x4E</td></tr><tr><td align="center">79</td><td align="center">O</td><td align="center">大写字母O</td><td align="center">0100 1111</td><td align="center">0117</td><td align="center">0x4F</td></tr><tr><td align="center">80</td><td align="center">P</td><td align="center">大写字母P</td><td align="center">0101 0000</td><td align="center">0120</td><td align="center">0x50</td></tr><tr><td align="center">81</td><td align="center">Q</td><td align="center">大写字母Q</td><td align="center">0101 0001</td><td align="center">0121</td><td align="center">0x51</td></tr><tr><td align="center">82</td><td align="center">R</td><td align="center">大写字母R</td><td align="center">0101 0010</td><td align="center">0122</td><td align="center">0x52</td></tr><tr><td align="center">83</td><td align="center">S</td><td align="center">大写字母S</td><td align="center">0101 0011</td><td align="center">0123</td><td align="center">0x53</td></tr><tr><td align="center">84</td><td align="center">T</td><td align="center">大写字母T</td><td align="center">0101 0100</td><td align="center">0124</td><td align="center">0x54</td></tr><tr><td align="center">85</td><td align="center">U</td><td align="center">大写字母U</td><td align="center">0101 0101</td><td align="center">0125</td><td align="center">0x55</td></tr><tr><td align="center">86</td><td align="center">V</td><td align="center">大写字母V</td><td align="center">0101 0110</td><td align="center">0126</td><td align="center">0x56</td></tr><tr><td align="center">87</td><td align="center">W</td><td align="center">大写字母W</td><td align="center">0101 0111</td><td align="center">0127</td><td align="center">0x57</td></tr><tr><td align="center">88</td><td align="center">X</td><td align="center">大写字母X</td><td align="center">0101 1000</td><td align="center">0130</td><td align="center">0x58</td></tr><tr><td align="center">89</td><td align="center">Y</td><td align="center">大写字母Y</td><td align="center">0101 1001</td><td align="center">0131</td><td align="center">0x59</td></tr><tr><td align="center">90</td><td align="center">Z</td><td align="center">大写字母Z</td><td align="center">0101 1010</td><td align="center">0132</td><td align="center">0x5A</td></tr><tr><td align="center">91</td><td align="center">[</td><td align="center">开方括号</td><td align="center">0101 1011</td><td align="center">0133</td><td align="center">0x5B</td></tr><tr><td align="center">92</td><td align="center">\</td><td align="center">反斜杠</td><td align="center">0101 1100</td><td align="center">0134</td><td align="center">0x5C</td></tr><tr><td align="center">93</td><td align="center">]</td><td align="center">闭方括号</td><td align="center">0101 1101</td><td align="center">0135</td><td align="center">0x5D</td></tr><tr><td align="center">94</td><td align="center">^</td><td align="center">脱字符</td><td align="center">0101 1110</td><td align="center">0136</td><td align="center">0x5E</td></tr><tr><td align="center">95</td><td align="center">_</td><td align="center">下划线</td><td align="center">0101 1111</td><td align="center">0137</td><td align="center">0x5F</td></tr><tr><td align="center">96</td><td align="center">&#96;</td><td align="center">开单引号</td><td align="center">0110 0000</td><td align="center">0140</td><td align="center">0x60</td></tr><tr><td align="center">97</td><td align="center">a</td><td align="center">小写字母a</td><td align="center">0110 0001</td><td align="center">0141</td><td align="center">0x61</td></tr><tr><td align="center">98</td><td align="center">b</td><td align="center">小写字母b</td><td align="center">0110 0010</td><td align="center">0142</td><td align="center">0x62</td></tr><tr><td align="center">99</td><td align="center">c</td><td align="center">小写字母c</td><td align="center">0110 0011</td><td align="center">0143</td><td align="center">0x63</td></tr><tr><td align="center">100</td><td align="center">d</td><td align="center">小写字母d</td><td align="center">0110 0100</td><td align="center">0144</td><td align="center">0x64</td></tr><tr><td align="center">101</td><td align="center">e</td><td align="center">小写字母e</td><td align="center">0110 0101</td><td align="center">0145</td><td align="center">0x65</td></tr><tr><td align="center">102</td><td align="center">f</td><td align="center">小写字母f</td><td align="center">0110 0110</td><td align="center">0146</td><td align="center">0x66</td></tr><tr><td align="center">103</td><td align="center">g</td><td align="center">小写字母g</td><td align="center">0110 0111</td><td align="center">0147</td><td align="center">0x67</td></tr><tr><td align="center">104</td><td align="center">h</td><td align="center">小写字母h</td><td align="center">0110 1000</td><td align="center">0150</td><td align="center">0x68</td></tr><tr><td align="center">105</td><td align="center">i</td><td align="center">小写字母i</td><td align="center">0110 1001</td><td align="center">0151</td><td align="center">0x69</td></tr><tr><td align="center">106</td><td align="center">j</td><td align="center">小写字母j</td><td align="center">0110 1010</td><td align="center">0152</td><td align="center">0x6A</td></tr><tr><td align="center">107</td><td align="center">k</td><td align="center">小写字母k</td><td align="center">0110 1011</td><td align="center">0153</td><td align="center">0x6B</td></tr><tr><td align="center">108</td><td align="center">l</td><td align="center">小写字母l</td><td align="center">0110 1100</td><td align="center">0154</td><td align="center">0x6C</td></tr><tr><td align="center">109</td><td align="center">m</td><td align="center">小写字母m</td><td align="center">0110 1101</td><td align="center">0155</td><td align="center">0x6D</td></tr><tr><td align="center">110</td><td align="center">n</td><td align="center">小写字母n</td><td align="center">0110 1110</td><td align="center">0156</td><td align="center">0x6E</td></tr><tr><td align="center">111</td><td align="center">o</td><td align="center">小写字母o</td><td align="center">0110 1111</td><td align="center">0157</td><td align="center">0x6F</td></tr><tr><td align="center">112</td><td align="center">p</td><td align="center">小写字母p</td><td align="center">0111 0000</td><td align="center">0160</td><td align="center">0x70</td></tr><tr><td align="center">113</td><td align="center">q</td><td align="center">小写字母q</td><td align="center">0111 0001</td><td align="center">0161</td><td align="center">0x71</td></tr><tr><td align="center">114</td><td align="center">r</td><td align="center">小写字母r</td><td align="center">0111 0010</td><td align="center">0162</td><td align="center">0x72</td></tr><tr><td align="center">115</td><td align="center">s</td><td align="center">小写字母s</td><td align="center">0111 0011</td><td align="center">0163</td><td align="center">0x73</td></tr><tr><td align="center">116</td><td align="center">t</td><td align="center">小写字母t</td><td align="center">0111 0100</td><td align="center">0164</td><td align="center">0x74</td></tr><tr><td align="center">117</td><td align="center">u</td><td align="center">小写字母u</td><td align="center">0111 0101</td><td align="center">0165</td><td align="center">0x75</td></tr><tr><td align="center">118</td><td align="center">v</td><td align="center">小写字母v</td><td align="center">0111 0110</td><td align="center">0166</td><td align="center">0x76</td></tr><tr><td align="center">119</td><td align="center">w</td><td align="center">小写字母w</td><td align="center">0111 0111</td><td align="center">0167</td><td align="center">0x77</td></tr><tr><td align="center">120</td><td align="center">x</td><td align="center">小写字母x</td><td align="center">0111 1000</td><td align="center">0170</td><td align="center">0x78</td></tr><tr><td align="center">121</td><td align="center">y</td><td align="center">小写字母y</td><td align="center">0111 1001</td><td align="center">0171</td><td align="center">0x79</td></tr><tr><td align="center">122</td><td align="center">z</td><td align="center">小写字母z</td><td align="center">0111 1010</td><td align="center">0172</td><td align="center">0x7A</td></tr><tr><td align="center">123</td><td align="center">{</td><td align="center">开花括号</td><td align="center">0111 1011</td><td align="center">0173</td><td align="center">0x7B</td></tr><tr><td align="center">124</td><td align="center">|</td><td align="center">垂线</td><td align="center">0111 1100</td><td align="center">0174</td><td align="center">0x7C</td></tr><tr><td align="center">125</td><td align="center">}</td><td align="center">闭花括号</td><td align="center">0111 1101</td><td align="center">0175</td><td align="center">0x7D</td></tr><tr><td align="center">126</td><td align="center">~</td><td align="center">波浪号</td><td align="center">0111 1110</td><td align="center">0176</td><td align="center">0x7E</td></tr><tr><td align="center">127</td><td align="center">DEL (delete)</td><td align="center">删除</td><td align="center">0111 1111</td><td align="center">0177</td><td align="center">0x7F</td></tr></tbody></table><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>将二进制流划分为若干3个字节的块（不足补0），然后再把每个块划分位4个6比特组，每个6比特组对应Base64字母表中的64个字符之一，再转换成字符对应的ASCII码在网络上传输。</p><p><img src="/images/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/base64.png" alt="Base64字母表"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ASCII码&quot;&gt;&lt;a href=&quot;#ASCII码&quot; class=&quot;headerlink&quot; title=&quot;ASCII码&quot;&gt;&lt;/a&gt;ASCII码&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;十进制&lt;/th&gt;
&lt;th alig</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MQTT协议</title>
    <link href="http://princesaoke.github.io/2024/04/03/MQTT%E5%8D%8F%E8%AE%AE/"/>
    <id>http://princesaoke.github.io/2024/04/03/MQTT%E5%8D%8F%E8%AE%AE/</id>
    <published>2024-04-02T16:24:10.000Z</published>
    <updated>2024-05-16T07:42:41.478Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/421109780">MQTT协议，终于有人讲清楚了</a></p><p><code>Flutter</code>中的MQTT库：<a href="https://pub.dev/packages/mqtt_client">mqtt_client</a>、<a href="https://pub.dev/packages/mqtt5_client">mqtt5_client</a></p><p>MQTT（Message Queuing Telemetry Transport）是一种轻量级的、开放的、基于发布&#x2F;订阅模式的消息传输协议。它具有以下特性：</p><ol><li><p><strong>轻量级</strong>: MQTT的设计目标之一是在网络带宽和设备资源有限的环境下运行。它的协议头部较小，传输效率高，适用于各种物联网设备，包括嵌入式系统和传感器。</p></li><li><p><strong>发布&#x2F;订阅模式</strong>: MQTT采用发布&#x2F;订阅模式进行消息传输，其中发布者（publisher）发布消息到特定的主题（topic），而订阅者（subscriber）则订阅感兴趣的主题。这种模式可以实现解耦，让设备和应用程序之间的通信更加灵活。</p></li><li><p><strong>可靠性</strong>: MQTT支持三种级别的服务质量（QoS），包括最多一次（QoS 0）、至少一次（QoS 1）和只有一次（QoS 2）。通过这些级别，可以根据应用程序的需求选择适当的消息传输可靠性。</p></li><li><p><strong>持久性会话</strong>: 客户端可以选择使用持久性会话，这意味着即使客户端断开连接，服务器仍然会保留客户端的订阅状态和未传递的消息。这对于设备的稳健性和状态管理非常有用。</p></li><li><p><strong>安全性</strong>: MQTT支持使用TLS&#x2F;SSL进行加密，以确保传输数据的安全性。此外，它还支持基于用户名和密码的身份验证机制，以及其他高级的安全特性。</p></li></ol><h2 id="物联网适合使用MQTT的原因"><a href="#物联网适合使用MQTT的原因" class="headerlink" title="物联网适合使用MQTT的原因"></a>物联网适合使用MQTT的原因</h2><ol><li><p><strong>低带宽、高延迟环境</strong>: MQTT的轻量级设计使其非常适合在带宽有限、延迟较高的网络环境中运行，这正是许多物联网应用所面临的情况。</p></li><li><p><strong>异构性</strong>: 物联网涉及各种设备，包括传感器、嵌入式系统、移动设备等，这些设备可能具有不同的处理能力和通信能力。MQTT作为一种通用的、轻量级的协议，可以轻松地在这些异构设备之间进行通信。</p></li><li><p><strong>解耦性</strong>: MQTT的发布&#x2F;订阅模式允许设备和应用程序之间进行解耦，从而提高了系统的灵活性和可扩展性。设备可以发布数据到特定的主题，而应用程序可以订阅感兴趣的主题，双方无需直接通信。</p></li><li><p><strong>可靠性和持久性</strong>: MQTT支持不同级别的服务质量，可以根据应用程序的需求选择适当的级别。它还支持持久性会话，保证了设备和应用程序之间的稳健通信。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/421109780&quot;&gt;MQTT协议，终于有人讲清楚了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Flutter&lt;/code&gt;中的MQTT库：&lt;a href=&quot;https://pub.dev/packages</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Jetpack_Compose</title>
    <link href="http://princesaoke.github.io/2024/04/03/Jetpack-Compose/"/>
    <id>http://princesaoke.github.io/2024/04/03/Jetpack-Compose/</id>
    <published>2024-04-02T16:19:28.000Z</published>
    <updated>2024-04-02T16:22:43.610Z</updated>
    
    <content type="html"><![CDATA[<p>声明式UI，类似<code>Flutter</code>。</p><p><a href="https://juejin.cn/post/7246665046257008696">从0上手Jetpack Compose，看这一篇就够了～</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;声明式UI，类似&lt;code&gt;Flutter&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7246665046257008696&quot;&gt;从0上手Jetpack Compose，看这一篇就够了～&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>防双击</title>
    <link href="http://princesaoke.github.io/2024/04/02/%E9%98%B2%E5%8F%8C%E5%87%BB/"/>
    <id>http://princesaoke.github.io/2024/04/02/%E9%98%B2%E5%8F%8C%E5%87%BB/</id>
    <published>2024-04-01T16:32:41.000Z</published>
    <updated>2024-04-01T16:34:24.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleClickFilter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">int</span> lastClickTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">int</span> lastKey = <span class="number">0</span>; <span class="comment">//区分不同点击事件</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">Function</span>() debounce(<span class="built_in">Function</span> fn, [<span class="built_in">int</span> key = <span class="number">0</span>, <span class="built_in">int</span> interval = <span class="number">500</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> () &#123;</span><br><span class="line">      <span class="keyword">if</span> (key != lastKey) &#123;</span><br><span class="line">        lastClickTime = <span class="number">0</span>;</span><br><span class="line">        lastKey = key;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">int</span> currTime = <span class="built_in">DateTime</span>.now().millisecondsSinceEpoch;</span><br><span class="line">      <span class="keyword">if</span> (currTime - lastClickTime &gt; interval) &#123;</span><br><span class="line">        lastClickTime = currTime;</span><br><span class="line">        fn();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> FunctionExtension <span class="keyword">on</span> <span class="built_in">Function</span> &#123;</span><br><span class="line">  <span class="comment">/// <span class="language-markdown">[key]用于区分不同点击事件</span></span></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">[interval]为防双击的时间间隔，单位毫秒</span></span></span><br><span class="line">  <span class="built_in">Function</span>() debounce([<span class="built_in">int</span> key = <span class="number">0</span>, <span class="built_in">int</span> interval = <span class="number">500</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> DoubleClickFilter.debounce(<span class="keyword">this</span>, key, interval);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ElevatedButton(</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;500毫秒内点击不会触发第二次&#x27;</span>);</span><br><span class="line">  &#125;.debounce(),</span><br><span class="line">  child: <span class="keyword">const</span> Text(<span class="string">&#x27;防双击按钮&#x27;</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
  </entry>
  
</feed>
