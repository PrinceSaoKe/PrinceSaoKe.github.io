<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>骚客.的个人博客</title>
  
  <subtitle>记录我的学习过程</subtitle>
  <link href="http://princesaoke.github.io/atom.xml" rel="self"/>
  
  <link href="http://princesaoke.github.io/"/>
  <updated>2024-01-11T09:21:19.076Z</updated>
  <id>http://princesaoke.github.io/</id>
  
  <author>
    <name>骚客.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web安全漏洞</title>
    <link href="http://princesaoke.github.io/2024/01/10/Web%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/"/>
    <id>http://princesaoke.github.io/2024/01/10/Web%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/</id>
    <published>2024-01-09T16:23:39.000Z</published>
    <updated>2024-01-11T09:21:19.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p><a href="https://zhuanlan.zhihu.com/p/22521378">CSRF是什么</a></p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><h4 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h4><h4 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CSRF&quot;&gt;&lt;a href=&quot;#CSRF&quot; class=&quot;headerlink&quot; title=&quot;CSRF&quot;&gt;&lt;/a&gt;CSRF&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22521378&quot;&gt;CSRF是什么&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSS笔记</title>
    <link href="http://princesaoke.github.io/2023/12/26/CSS%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/12/26/CSS%E7%AC%94%E8%AE%B0/</id>
    <published>2023-12-25T16:37:29.000Z</published>
    <updated>2023-12-25T16:57:53.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p><img src="/images/CSS%E7%AC%94%E8%AE%B0/box_model.png" alt="盒子模型"></p><p>元素的总宽度为：<code>margin-left</code>+<code>border</code>+<code>padding-left</code>+<code>width</code>+<code>padding-right</code>+<code>border</code>+<code>margin-right</code></p><p>所以如果元素有margin、border、padding，实际大小会比CSS中写的width和height更大。</p><p><code>box-sizing</code>属性可以令width和height直接包含padding和border。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;盒子模型&quot;&gt;&lt;a href=&quot;#盒子模型&quot; class=&quot;headerlink&quot; title=&quot;盒子模型&quot;&gt;&lt;/a&gt;盒子模型&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/CSS%E7%AC%94%E8%AE%B0/box_model.png&quot; alt=&quot;盒子</summary>
      
    
    
    
    <category term="前端" scheme="http://princesaoke.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="http://princesaoke.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>智元机器人客户端实习面经</title>
    <link href="http://princesaoke.github.io/2023/12/12/%E6%99%BA%E5%85%83%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/"/>
    <id>http://princesaoke.github.io/2023/12/12/%E6%99%BA%E5%85%83%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/</id>
    <published>2023-12-12T08:01:09.000Z</published>
    <updated>2024-01-02T16:28:39.007Z</updated>
    
    <content type="html"><![CDATA[<p>面试是一个月以前的事了，已经被录用，有些地方记不清了。总共面了两轮，都是飞书线上面试。每次面试最后都有反问环节，我都事先准备了要反问的问题。</p><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>一面问的都是Flutter相关的技术问题，完全没有牵扯到其他方面，面试官是负责社招的，实习后也由他来带我。总共面了40分钟左右，问题如下，打钩的是我觉得算回答出来的：</p><ul><li><span style="color: green">√</span> 自我介绍</li><li><span style="color: green">√</span> 学习Flutter多久了？</li><li><span style="color: red">×</span> 了解Dart中的dynamic和var吗？它们赋值后可以更改数据类型吗？</li><li><span style="color: green">√</span> const和final的区别，late的用法？</li><li><span style="color: green">√</span> Dart空安全相关，<code>?.</code>和<code>??</code></li><li><span style="color: red">×</span> Dart如何实现单例？</li><li><span style="color: red">×</span> 给一张UI图，说出大致的布局实现方式？</li><li><span style="color: green">√</span> 要点击导航栏切换body，如何实现？</li><li><span style="color: red">×</span> 快速点击导航栏切换页面，多个页面请求完成后在短时间内快速渲染，页面会出现闪烁，如何解决？</li><li><span style="color: red">×</span> 更改页面的宽度，要icon不变，仅缩小文字的宽度，文字溢出设置成省略号的样式，如何实现？</li><li><span style="color: green">√</span> Dart中的可选参数是什么，有什么用，如何设置其默认值？</li><li><span style="color: red">×</span> 组件前加const起到什么作用？</li><li><span style="color: red">×</span> 如何实现局部刷新？</li><li><span style="color: green">√</span> 如何实现动画？如改变透明度、位移、旋转等</li><li><span style="color: green">√</span> 如何用Flutter的Canvas绘制出折线、带填充的矩形？</li></ul><p>问到动画和Canvas是因为简历上有写。</p><p>一面个人感觉挺失败的，很多问题都没回答上来。比如给UI图实现布局，我有开发经验按理这不是难事，但面试官给的是PC端的页面，我之前做的都是移动端，导航栏在底部，PC端导航栏在左边，而且一些布局也略微不同，加上面试是直接口述而非敲代码可以修改，一时有点无从下手，气氛明显尴尬了起来。问到局部刷新，我记得似乎曾经在某个帖子有看到过SafeArea与之相关，就半蒙半猜地说了，面试结束后一百度，根本是牛头不对马嘴……面到后面自己都没自信了，只想快点结束。</p><p>当时面完就觉得没戏了，没想到过了两天居然收到了hr的电话，约了二面。</p><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>二面的问题更有开放性，面试官好像是软件部门的主管，有开摄像头，在我回答不出来的时候会引导我思考，所以感觉会轻松一些，总共20多分钟。</p><ul><li><span style="color: green">√</span> 自我介绍</li><li><span style="color: green">√</span> 为什么想要来实习？</li><li><span style="color: green">√</span> 为什么学习Flutter？</li><li><span style="color: red">×</span> 为什么Flutter选用Dart作语言？Dart优势何在？</li><li><span style="color: green">√</span> 问项目，哪些功能是调用第三方接口？项目是否获奖？开发中最大的困难是什么？</li><li><span style="color: red">×</span> 结合信安专业，如何防止攻击者破解用户账号密码？</li><li><span style="color: green">√</span> 除了移动端、Flutter，是否关注了其他技术相关的东西或行业发展？</li></ul><p>和一面相比明显感觉二面的问题更综合考量一个人的能力、行业理解和培养价值。</p><p>有点出乎我意料的是，面试官看到我是信安专业的，问了我安全方面的问题。先是问有什么提高账号安全性的方法，我回答数据库密码存储哈希值而非明文、做输入检查防止SQL注入等。又问如果有人尝试用暴力尝试的方法破解密码应该如何防御？我回答加验证码。又问现在AI很强大，可以完成验证，是否有别的方法？面试官提示如果绕过客户端直接给后端发包呢，我回答APP加混淆避免反编译，不要让攻击者知道接口URL。面试官说加混淆可以，但接口总是要暴露在外的，有没有别的办法？我回答后端判断短时间内是否有同一个IP地址多次尝试登录同一个账号，如果是说明有人在暴力破解，就拒绝请求。面试官说如果是在连校园网的环境下，很多设备的IP地址是一样的，可能造成“误伤”，并且后端如何知道设备的登录次数呢？又问如果是固定密码去试账号要如何防御？最后我没有回答出来，面试官说这可能要不止一次网络请求，应该是属于进阶一点的问题了。</p><p>最后反问环节我问面试官我有哪些地方表达得不好，面试官回答这不能说。他告诉我大概五个工作日内会有结果，这一等就是半个月，就在我以为凉凉了要准备投下一份简历的时候，又接到了hr的电话，被录用了。</p><p>现在回想起来，还是有很多可以改进的地方。</p><p>首先是自我介绍，我觉得可以准备得充分些，简历上有的就不用说太多了，可以突出个人优势，也好暗示面试官的关注重点。如果只是把简历上已有的信息说一遍意义不大。</p><p>其次是有些地方没get到面试官想问的点。比如二面问后端如何知道设备的登录次数，应该是想问服务器如何识别是同一台设备，需要用到cookie什么的，当时脑子没转过弯来没想到考察的是cookie。</p><p>复盘后发觉两次面试都答的不咋地，没想到还能被录用，或许技术栈符合也是很重要的原因之一吧，也是很感谢面试官能给我这个机会。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;面试是一个月以前的事了，已经被录用，有些地方记不清了。总共面了两轮，都是飞书线上面试。每次面试最后都有反问环节，我都事先准备了要反问的问题。&lt;/p&gt;
&lt;h2 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面</summary>
      
    
    
    
    <category term="面经" scheme="http://princesaoke.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue3笔记</title>
    <link href="http://princesaoke.github.io/2023/11/28/Vue3%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/11/28/Vue3%E7%AC%94%E8%AE%B0/</id>
    <published>2023-11-28T08:55:45.000Z</published>
    <updated>2024-03-12T16:02:58.228Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cn.vuejs.org/guide/introduction.html">Vue3官方文档</a></p><p>参考文章：</p><p><a href="https://zhuanlan.zhihu.com/p/654327710">手把手教你使用Vite创建Vue3项目</a></p><p><a href="https://blog.csdn.net/weixin_42382758/article/details/131080818?spm=1001.2014.3001.5502">尚硅谷甄选</a></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>终端运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vue@latest</span><br></pre></td></tr></table></figure><h4 id="使用-Vite-创建项目"><a href="#使用-Vite-创建项目" class="headerlink" title="使用 Vite 创建项目"></a>使用 Vite 创建项目</h4><p><strong>注意：Vite 需要 Node.js 版本 18+，20+</strong></p><p>终端执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p><code>&#123;&#123; button &#125;&#125;</code>中元素不会被解析，需要用<code>&lt;div v-html=&quot;button&quot;&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> button = <span class="title function_">ref</span>(<span class="string">&#x27;&lt;button&gt;Click Me&lt;/button&gt;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;button&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相当于将<code>&lt;div&gt;</code>的innerHTML设为button中的元素</p><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>使用指令<code>v-bind:属性名=&quot;&quot;</code>或其简写<code>:属性名=&quot;&quot;</code>为元素添加单个属性，或者使用<code>v-bind=&quot;&quot;</code>添加多个属性，具体如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> myId = <span class="title function_">ref</span>(<span class="string">&#x27;nav&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> myClass = <span class="title function_">ref</span>(<span class="string">&#x27;container&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> isButtonDisabled = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> myAttr = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">id</span>: <span class="string">&#x27;nav&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">class</span>: <span class="string">&#x27;container&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;myId&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;myClass&quot;</span>&gt;</span>bind<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind</span>=<span class="string">&quot;myAttr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> stars = <span class="title function_">reactive</span>([</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">name</span>: <span class="string">&#x27;角木蛟&#x27;</span>, <span class="attr">part</span>: <span class="string">&#x27;东方苍龙&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">name</span>: <span class="string">&#x27;井木犴&#x27;</span>, <span class="attr">part</span>: <span class="string">&#x27;南方朱雀&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">name</span>: <span class="string">&#x27;奎木狼&#x27;</span>, <span class="attr">part</span>: <span class="string">&#x27;西方白虎&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">name</span>: <span class="string">&#x27;斗木獬&#x27;</span>, <span class="attr">part</span>: <span class="string">&#x27;北方玄武&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    ])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;star in stars&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星宿名：&#123;&#123; star.name &#125;&#125;，所属星象：&#123;&#123; star.part &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-if-和-v-show-的区别"><a href="#v-if-和-v-show-的区别" class="headerlink" title="v-if 和 v-show 的区别"></a>v-if 和 v-show 的区别</h4><p><code>v-show</code>不管初始条件是否为真，元素都会被渲染，只不过是根据条件修改元素的样式来判断是否显示。当<code>v-show=&quot;false&quot;</code>时，给元素加上<code>style=&quot;display: none;&quot;</code>，当<code>v-show=&quot;true&quot;</code>时，移除该样式。因此元素始终是存在的。</p><p><code>v-if=&quot;false&quot;</code>则是将元素直接删除，DOM元素不再存在。</p><p>由于<code>v-show</code>始终都会渲染元素，因此有更高的初始渲染消耗，而<code>v-if</code>若为假则初始时不需要渲染，则没有这部分的消耗。但切换时<code>v-show</code>只需要移除<code>display: none</code>，因此相比<code>v-if</code>的切换消耗会更低。</p><p>如果需要频繁切换则用<code>v-show</code>，如果在运行时很少改变则用<code>v-if</code>。</p><h2 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h2><h4 id="ref-和-reactive-的区别"><a href="#ref-和-reactive-的区别" class="headerlink" title="ref 和 reactive 的区别"></a>ref 和 reactive 的区别</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;星日马&#x27;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>ref</code>可以用于基本数据类型和对象，但<code>reactive</code>只能用于对象</li><li>访问<code>ref</code>的值要<code>count.value</code>，而访问<code>reactive</code>的值直接<code>user</code>不需要加value</li><li><code>ref</code>适合基本数据类型，<code>reactive</code>适合对象</li><li>单独将<code>ref</code>对象中的变量赋值给新变量，新变量也支持响应式；但对<code>reactive</code>进行同样操作则新变量不具备响应式</li><li><code>ref</code>通过外层包裹一个对象来实现，<code>reactive</code>通过<code>proxy</code>实现</li></ul><h4 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h4><p>将普通变量和响应式对象的成员变量进行双向响应式绑定，不论是改变普通变量的值还是成员变量的值，数据都会更新，解决了reactive无法抽离出响应式变量的问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref, reactive, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> flower = <span class="title function_">ref</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;梅花&#x27;</span>, <span class="attr">price</span>: <span class="number">48</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;房日兔&#x27;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> flowerPrice = <span class="title function_">toRef</span>(flower.<span class="property">value</span>, <span class="string">&#x27;price&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> userId = <span class="title function_">toRef</span>(user, <span class="string">&#x27;id&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        flower.<span class="property">value</span>.<span class="property">price</span>++    <span class="comment">// 改变对象的成员变量的值，普通变量的值也会更新</span></span></span><br><span class="line"><span class="language-javascript">        userId.<span class="property">value</span>++          <span class="comment">// 改变普通变量的值，成员变量也会更新</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>flowerPrice: &#123;&#123; flowerPrice &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>userId: &#123;&#123; userId &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h4><p>与<code>toRef</code>的区别尚不明确。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref, reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> flower = <span class="title function_">ref</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;梅花&#x27;</span>, <span class="attr">price</span>: <span class="number">48</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;房日兔&#x27;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> flowerPrice = <span class="title function_">toRefs</span>(flower.<span class="property">value</span>)[<span class="string">&#x27;price&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> userId = <span class="title function_">toRefs</span>(user).<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        flower.<span class="property">value</span>.<span class="property">price</span>++</span></span><br><span class="line"><span class="language-javascript">        userId.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>flowerPrice: &#123;&#123; flowerPrice &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>user.id: &#123;&#123; user.id &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>可以使用<code>v-on</code>指令来监听DOM事件，也可缩写成<code>@</code>，用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了myFunction方法&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;myFunction&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFunction&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p>在原生JS中，我们可以使用<code>even.preventDefault()</code>来阻止默认事件或使用<code>event.stopPropagation()</code>阻止事件冒泡，Vue提供了更优雅的实现方式，即事件修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了myFunction方法&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">clickDiv</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">clickP</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://PrinceSaoKe.github.io&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;myFunction&quot;</span>&gt;</span>点了不会跳转的超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;clickDiv&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click.stop</span>=<span class="string">&quot;clickP&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">点击了p</span><br></pre></td></tr></table></figure><p>若不加<code>.stop</code>，则输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">点击了p</span><br><span class="line">点击了div</span><br></pre></td></tr></table></figure><p>该写法等同于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    event.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了myFunction方法&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">clickDiv</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    event.<span class="title function_">stopPropagation</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">clickP</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    event.<span class="title function_">stopPropagation</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://princesaoke.github.io&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;myFunction&quot;</span>&gt;</span>点了不会跳转的超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;clickDiv&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;clickP&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="public-文件夹和-src-assets-文件夹的区别"><a href="#public-文件夹和-src-assets-文件夹的区别" class="headerlink" title="&#x2F;public 文件夹和 &#x2F;src&#x2F;assets 文件夹的区别"></a>&#x2F;public 文件夹和 &#x2F;src&#x2F;assets 文件夹的区别</h2><ul><li>引用<code>/public</code>中的文件时不需要写public目录，直接<code>&lt;img src=&quot;/logo.png&quot;&gt;</code>，而引用<code>/src/assets</code>中的文件要写全路径<code>&lt;img src=&quot;@/assets/logo.png&quot;&gt;</code></li><li>打包时<code>/src/assets</code>下的文件会被打包工具处理，包括压缩、重命名等，而<code>/public</code>则不会，是直接复制到<code>dist</code>里</li><li>如果文件不需要被处理，如网站的结构用图（favicon.ico、logo图片等），放<code>public</code>；否则如内容图片或者需要被构建为base64的小图标放<code>assets</code></li></ul><h2 id="开发过程中的跨域问题"><a href="#开发过程中的跨域问题" class="headerlink" title="开发过程中的跨域问题"></a>开发过程中的跨域问题</h2><p>浏览器和后端服务器之间存在跨域问题，但服务器和服务器之间可以随意访问，因此要在本地配置一个代理服务器来做中转，浏览器将请求发到本地代理服务器，代理服务器再发到后端服务器，就不会跨域报错了。</p><p>先将axios的baseURL设置为<code>&#39;/api&#39;</code>，然后修改<code>vite.config.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">5173</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://saoke.fun:8080&#x27;</span>,                <span class="comment">// 代理地址，这里设置的地址会代替axios中设置的baseURL</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,                             <span class="comment">// 如果接口跨域，需要进行这个参数配置</span></span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,                                  <span class="comment">// 如果是https接口需要进行此配置</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://blog.csdn.net/c327127960/article/details/123195356">一篇看懂vue如何做调试后台接口的配置和proxy的工作原理以及为什么能解决跨域</a></p><h2 id="简单请求与复杂请求"><a href="#简单请求与复杂请求" class="headerlink" title="简单请求与复杂请求"></a>简单请求与复杂请求</h2><p>满足以下条件的才是简单请求：</p><ul><li>请求方式为<code>GET</code>、<code>POST</code>、<code>HEAD</code></li><li>不能手动设置除<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code>、<code>Last-Event-ID</code>、<code>Content-Type</code>之外的请求头</li><li><code>Content-Type</code>的值只限于<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li><li>不能为<code>XMLHttpRequestUpdate</code>注册监听器</li><li>请求中没有使用<code>readableStream</code>对象</li></ul><p>非简单请求就是复杂请求。</p><p>复杂请求会多发一次<code>OPTIONS</code>预请求，服务器返回预响应，成功后才会发送真实请求。预请求存在跨域问题。</p><p>参考文章：</p><p><a href="https://blog.csdn.net/qq_61233877/article/details/124716768">简单请求和复杂请求的区别</a></p><p><a href="https://zhuanlan.zhihu.com/p/101074873">ajax请求：简单请求&amp;复杂请求</a></p><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><p>要将打包好的文件按css、js进行分类，在<code>vite.config.ts</code>进行以下配置：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">chunkFileNames</span>: <span class="string">&#x27;static/js/[name]-[hash].js&#x27;</span>,</span><br><span class="line">        <span class="attr">entryFileNames</span>: <span class="string">&#x27;static/js/[name]-[hash].js&#x27;</span>,</span><br><span class="line">        <span class="attr">assetFileNames</span>: <span class="string">&#x27;static/[ext]/[name]-[hash][extname]&#x27;</span>,</span><br><span class="line">        <span class="comment">//manualChunks 两种使用形式</span></span><br><span class="line">        <span class="comment">// manualChunks:&#123;</span></span><br><span class="line">        <span class="comment">//   elementPlus:[&#x27;element-plus&#x27;]</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="title function_">manualChunks</span>(<span class="params">id</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (id.<span class="title function_">includes</span>(<span class="string">&#x27;element-plus&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://juejin.cn/post/7176149108611416123">vue3打包后没有默认进行分包？立马解决⚡</a></p><h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><p><a href="https://cn.vitejs.dev/guide/">Vite官方文档</a></p><h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h2><p><a href="https://router.vuejs.org/zh/guide/">Vue Router 官方文档</a></p><p><a href="https://blog.csdn.net/w137160164/article/details/131152766">参考文章</a></p><h2 id="Element-Plus"><a href="#Element-Plus" class="headerlink" title="Element Plus"></a>Element Plus</h2><p><a href="https://element-plus.gitee.io/zh-CN/component/overview.html">Element Plus 官方文档</a></p><h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><p><a href="https://pinia.web3doc.top/introduction.html">Pinia官方文档</a></p><p><a href="https://www.jianshu.com/p/80e5a12f43dc">参考文章</a></p><h2 id="可能用到的工具"><a href="#可能用到的工具" class="headerlink" title="可能用到的工具"></a>可能用到的工具</h2><table><thead><tr><th align="center">名称</th><th align="center">下载方式</th><th align="center">官方文档</th><th>描述</th></tr></thead><tbody><tr><td align="center">NVM</td><td align="center"><a href="https://github.com/coreybutler/nvm-windows/releases">NVM下载地址</a></td><td align="center"></td><td>一个nodejs的版本管理工具，通过它可以安装和切换不同版本的nodejs</td></tr><tr><td align="center">NRM</td><td align="center">npm install -g nrm</td><td align="center"></td><td>npm的镜像管理工具，可以在npm镜像源间快速切换</td></tr><tr><td align="center">v-md-editor</td><td align="center">npm i @kangc&#x2F;v-md-editor -S</td><td align="center"><a href="http://ckang1229.gitee.io/vue-markdown-editor/zh/">v-md-editor官方文档</a></td><td>markdown编辑器</td></tr><tr><td align="center">highlight.js</td><td align="center">npm install highlight.js</td><td align="center"><a href="https://highlightjs.org/">highlight.js 官方文档</a></td><td>为markdown代码块添加高亮</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/guide/introduction.html&quot;&gt;Vue3官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/654327710&quot;&gt;</summary>
      
    
    
    
    <category term="前端" scheme="http://princesaoke.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue3" scheme="http://princesaoke.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>MySQL笔记</title>
    <link href="http://princesaoke.github.io/2023/11/22/MySQL%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/11/22/MySQL%E7%AC%94%E8%AE%B0/</id>
    <published>2023-11-22T08:03:48.000Z</published>
    <updated>2023-11-23T12:25:55.475Z</updated>
    
    <content type="html"><![CDATA[<p><em><a href="https://blog.csdn.net/select_myname/article/details/126314725">很全的MySQL常用指令</a></em></p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>在<a href="https://downloads.mysql.com/archives/community/">官方下载地址</a>下载压缩包。</p><p><img src="/images/MySQL%E7%AC%94%E8%AE%B0/mysql_download.png" alt="mysql_download"></p><p>解压到要保存的路径，在 环境变量 -&gt; 系统变量 -&gt; Path 里面添加一行，指向MySQL的bin目录，如<code>D:\mysql-8.0.33-winx64\bin</code>。</p><p>在MySQL的bin文件夹里新建文件<code>my.ini</code>，文件内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置mysql的安装目录(能看到bin即可)</span><br><span class="line">basedir=D:\mysql-8.0.33-winx64\</span><br><span class="line"># 设置mysql的数据存放目录</span><br><span class="line">datadir=D:\mysql-8.0.33-winx64\data\</span><br><span class="line"># mysql端口</span><br><span class="line">port=3306</span><br><span class="line"># 跳过授权</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><p>记得把其中的路径换成你自己的安装路径。</p><p>然后以管理员身份打开cmd，进入MySQL的bin目录，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 mysql 服务</span></span><br><span class="line">mysqld –install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 data 文件夹 （你可以初始化多次，但是每次必须清空data文件夹）</span></span><br><span class="line">mysqld --initialize-insecure --user=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 mysql 服务</span></span><br><span class="line">net start mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 mysql(让你输密码，直接回车即可)</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 root 账户密码</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH <span class="string">&#x27;mysql_native_password&#x27;</span> BY <span class="string">&#x27;新密码&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新权限，使之生效</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>然后将my.ini里跳过授权给注释掉<code># skip-grant-tables</code></p><p>输入<code>\q</code>退出登录MySQL，然后重启MySQL用新设置的密码登录即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p><code>mysql -uroot -p</code>这句意思是用户名为<code>root</code>，也可以在<code>-p</code>后直接跟密码，这样密码是可见的。</p><h3 id="Windows-Server-2022-上遇到的问题"><a href="#Windows-Server-2022-上遇到的问题" class="headerlink" title="Windows Server 2022 上遇到的问题"></a>Windows Server 2022 上遇到的问题</h3><h5 id="安装MySQL和初始化data文件夹时报错：找不到MSVCP140-dll文件"><a href="#安装MySQL和初始化data文件夹时报错：找不到MSVCP140-dll文件" class="headerlink" title="安装MySQL和初始化data文件夹时报错：找不到MSVCP140.dll文件"></a>安装MySQL和初始化data文件夹时报错：找不到<code>MSVCP140.dll</code>文件</h5><p>解决方法：安装 Microsoft Visual C++ Redistributable 客户端库，<a href="https://www.microsoft.com/en-us/download/details.aspx?id=48145">点击前往下载</a>。</p><h5 id="输入net-start-mysql时报错：服务没有响应控制功能"><a href="#输入net-start-mysql时报错：服务没有响应控制功能" class="headerlink" title="输入net start mysql时报错：服务没有响应控制功能"></a>输入<code>net start mysql</code>时报错：服务没有响应控制功能</h5><p>解决方法：下载<a href="https://cn.dll-files.com/vcruntime140_1.dll.html">VCRUNTIME140_1.dll</a>，解压后拷贝到MySQL的bin文件夹下。</p><h2 id="远程连接数据库"><a href="#远程连接数据库" class="headerlink" title="远程连接数据库"></a>远程连接数据库</h2><h4 id="开放MySQL端口"><a href="#开放MySQL端口" class="headerlink" title="开放MySQL端口"></a>开放MySQL端口</h4><p>首先要确保服务器的MySQL端口是放行的，在my.ini中我们设置了3306端口。</p><p>以阿里云服务器为例，在安全组中手动添加访问规则，目的端口3306，源0.0.0.0。</p><p>若端口没有放行，则会有以下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 2003 (HY000): Can<span class="string">&#x27;t connect to MySQL server on &#x27;</span>XXX.XXX.XXX.XXX:3306<span class="string">&#x27; (10060)</span></span><br></pre></td></tr></table></figure><h4 id="设置远程登录权限"><a href="#设置远程登录权限" class="headerlink" title="设置远程登录权限"></a>设置远程登录权限</h4><p>在服务器上登录MySQL，然后输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host=&#x27;%&#x27; where user=&#x27;root&#x27;; // 开放远程登录权限</span><br><span class="line">flush privileges;   // 刷新权限</span><br></pre></td></tr></table></figure><p>若没开启权限，则报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1130 (HY000): Host <span class="string">&#x27;XXX.XXX.XXX.XXX&#x27;</span> is not allowed to connect to this MySQL server</span><br></pre></td></tr></table></figure><h4 id="远程登录MySQL"><a href="#远程登录MySQL" class="headerlink" title="远程登录MySQL"></a>远程登录MySQL</h4><p>在自己的电脑上打开cmd，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h主机地址 -u用户名 -p</span><br></pre></td></tr></table></figure><h2 id="MySQL数据的备份"><a href="#MySQL数据的备份" class="headerlink" title="MySQL数据的备份"></a>MySQL数据的备份</h2><p>终端进入MySQL安装目录下的bin目录，执行指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p 数据库名 &gt; 备份文件路径及文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">mysqldump -uroot -p flower_shop &gt; flower_shop_backup.sql</span><br></pre></td></tr></table></figure><h2 id="MySQL备份数据的还原"><a href="#MySQL备份数据的还原" class="headerlink" title="MySQL备份数据的还原"></a>MySQL备份数据的还原</h2><p>登录MySQL后执行以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名称;  // 创建一个新的数据库用于承载迁移来的数据</span><br><span class="line">use 数据库名称;              // 切换到该数据库</span><br><span class="line">source 文件路径;             // 导入备份数据</span><br></pre></td></tr></table></figure><h2 id="存储过程-Procedure"><a href="#存储过程-Procedure" class="headerlink" title="存储过程 &#x2F; Procedure"></a>存储过程 &#x2F; Procedure</h2><p>相当于编程语言中的方法，定义SQL语句模板，可以传参调用。</p><p>创建一个存储过程，用于查询某种花的价格，调用后删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure getFlowerPrice(in name varchar(15))</span><br><span class="line">begin</span><br><span class="line">    select price from flower where flower.name=name;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call getFlowerPrice(&#x27;红玫瑰&#x27;);</span><br><span class="line"></span><br><span class="line">drop procedure getFlowerPrice;  # 删除存储过程</span><br></pre></td></tr></table></figure><p>其中<code>delimiter</code>作用是修改SQL语句结束符，避免存储过程中的<code>;</code>和语句结束符混淆。</p><h2 id="触发器-Trigger"><a href="#触发器-Trigger" class="headerlink" title="触发器 &#x2F; Trigger"></a>触发器 &#x2F; Trigger</h2><p>在数据插入、修改、删除时自动执行某些操作，可用于数据库日志记录等。</p><p>创建一个触发器，当录入一种花但未给出花语时，将花语设为“暂无”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create trigger my_trigger before insert on flower for each row</span><br><span class="line">begin</span><br><span class="line">    if new.flower_language is null then</span><br><span class="line">        set new.flower_language=&#x27;暂无&#x27;;</span><br><span class="line">    end if;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">show triggers;  # 查看触发器</span><br><span class="line"></span><br><span class="line">drop trigger flower_shop.my_trigger;    # 删除触发器</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.csdn.net/select_myname/article/details/126314725&quot;&gt;很全的MySQL常用指令&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装MySQL&quot;&gt;&lt;a href=&quot;#安装MySQL&quot;</summary>
      
    
    
    
    <category term="后端" scheme="http://princesaoke.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="MySQL" scheme="http://princesaoke.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Dart笔记</title>
    <link href="http://princesaoke.github.io/2023/11/08/Dart%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/11/08/Dart%E7%AC%94%E8%AE%B0/</id>
    <published>2023-11-08T08:34:56.000Z</published>
    <updated>2023-11-09T16:33:58.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="var-和-dynamic"><a href="#var-和-dynamic" class="headerlink" title="var 和 dynamic"></a>var 和 dynamic</h2><p><code>var</code>未赋初值时，默认值为<code>null</code>，赋值后数据类型可变。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable;</span><br><span class="line"><span class="built_in">print</span>(variable);    <span class="comment">// null</span></span><br><span class="line">variable = <span class="string">&#x27;我是字符串&#x27;</span></span><br><span class="line">variable = <span class="number">10.00</span></span><br></pre></td></tr></table></figure><p><code>dynamic</code>未赋初值时，默认值为<code>null</code>，赋值后数据类型可变，同<code>var</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;var-和-dynamic&quot;&gt;&lt;a href=&quot;#var-和-dynamic&quot; class=&quot;headerlink&quot; title=&quot;var 和 dynamic&quot;&gt;&lt;/a&gt;var 和 dynamic&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var&lt;/code&gt;未赋初值时，默认值为</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Flutter" scheme="http://princesaoke.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin笔记</title>
    <link href="http://princesaoke.github.io/2023/10/27/Kotlin%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/10/27/Kotlin%E7%AC%94%E8%AE%B0/</id>
    <published>2023-10-27T02:52:41.000Z</published>
    <updated>2023-10-27T07:21:40.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kotlin-与-Java-的关系"><a href="#Kotlin-与-Java-的关系" class="headerlink" title="Kotlin 与 Java 的关系"></a>Kotlin 与 Java 的关系</h2><p><code>Java</code>运行过程：Java源代码 -&gt; 编译 -&gt; 生成class文件 -&gt; JVM解释执行</p><p>Java虚拟机并不关心class文件是如何生成的，因此也可以使用<code>Kotlin</code>生成class文件，JVM也可以解释执行。</p><p><code>Kotlin</code>可以无缝使用<code>Java</code>第三方的开源库。</p><h2 id="val-与-var"><a href="#val-与-var" class="headerlink" title="val 与 var"></a>val 与 var</h2><p>类比<code>JavaScript</code>中的<code>const</code>和<code>let</code>。</p><p><code>val</code>用于声明常量，相当于加了<code>final</code>，赋值后无法修改；<code>var</code>用于声明变量。</p><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p><code>Kotlin</code>中的<code>if</code>是带有返回值的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> max = <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">    a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="when"><a href="#when" class="headerlink" title="when"></a>when</h2><p>相当于<code>switch</code>，不过用起来更方便。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">(name: <span class="type">String</span>)</span></span> = <span class="keyword">when</span> (name) &#123;</span><br><span class="line">    <span class="string">&quot;张三&quot;</span> -&gt; <span class="number">85</span></span><br><span class="line">    <span class="string">&quot;李四&quot;</span> -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">91</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h2><h4 id="闭区间"><a href="#闭区间" class="headerlink" title="闭区间"></a>闭区间</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">0.</span><span class="number">.10</span>   <span class="comment">// [0, 10]</span></span><br></pre></td></tr></table></figure><h4 id="左闭右开区间"><a href="#左闭右开区间" class="headerlink" title="左闭右开区间"></a>左闭右开区间</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">0</span> until <span class="number">10</span>   <span class="comment">// [0, 10)</span></span><br></pre></td></tr></table></figure><h4 id="降序闭区间"><a href="#降序闭区间" class="headerlink" title="降序闭区间"></a>降序闭区间</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">10</span> downTo <span class="number">0</span>   <span class="comment">// [10, 0]</span></span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h4 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for - in 循环"></a>for - in 循环</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出 0~9</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">10</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次循环 i+=2</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.10</span> step <span class="number">2</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 0~10 内的偶数</span></span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>Kotlin中有主次构造函数之分。</p><p>主构造函数没有函数体，直接定义在类名的后面。若想在主构造函数中编写一些逻辑，将代码写在<code>init</code>中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="keyword">val</span> name, <span class="keyword">val</span> grade) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">// 主构造函数的逻辑写在这里</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(<span class="string">&#x27;张三&#x27;</span>, <span class="number">86</span>)</span><br></pre></td></tr></table></figure><p>次构造函数有函数体，且必须调用主构造函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="keyword">val</span> name, <span class="keyword">val</span> grade) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">// 主构造函数的逻辑写在这里</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(name: String) : <span class="keyword">this</span>(name, <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 次构造函数逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(<span class="string">&#x27;张三&#x27;</span>, <span class="number">86</span>)</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Kotlin中非抽象类默认都是不可以被继承的，相当于给类加上了<code>final</code>。要声明为可继承类，需要加上<code>open</code>关键字。</p><p>同时子类中的构造函数必须调用父类中的构造函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name) &#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="keyword">val</span> name, <span class="keyword">val</span> grade) : Person(name) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">// 主构造函数的逻辑写在这里</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(<span class="string">&#x27;张三&#x27;</span>, <span class="number">86</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Kotlin-与-Java-的关系&quot;&gt;&lt;a href=&quot;#Kotlin-与-Java-的关系&quot; class=&quot;headerlink&quot; title=&quot;Kotlin 与 Java 的关系&quot;&gt;&lt;/a&gt;Kotlin 与 Java 的关系&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Java</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Kotlin" scheme="http://princesaoke.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>前端笔记</title>
    <link href="http://princesaoke.github.io/2023/10/22/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/10/22/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/</id>
    <published>2023-10-22T05:47:29.000Z</published>
    <updated>2023-12-31T07:43:39.626Z</updated>
    
    <content type="html"><![CDATA[<p>均以<code>Chrome</code>浏览器为例。</p><h2 id="const、let、var的区别"><a href="#const、let、var的区别" class="headerlink" title="const、let、var的区别"></a>const、let、var的区别</h2><p><code>const</code>是常量，定义时必须赋初值，值不可修改。只限制变量绑定的值，不会限制引用数据类型内部的变动。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">a = <span class="number">2</span>   <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">b.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span>     <span class="comment">// 不会报错</span></span><br><span class="line">b = <span class="number">1</span>   <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p><code>let</code>声明的是变量。</p><p><code>const</code>和<code>let</code>只在块内有效，即两个花括号之间，相当于局部的值。</p><p><code>var</code>定义的变量是全局的，但一个函数内<code>var</code>的变量不能在函数外访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;我是a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// 输出&#x27;我是a&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&#x27;我是b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>用<code>var</code>定义两个同名变量，后定义的会覆盖掉先定义的。<code>const</code>和<code>let</code>不允许重复定义。</p><p><code>var</code>存在变量提升的特性。当用<code>var</code>定义了一个变量，即便还未执行到，该变量也已经存在了，且值为<code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// 输出为10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>造成这种现象的原因是，<code>if</code>中用<code>var</code>定义了<code>a</code>，因变量提升（hoisting）特性，在执行前<code>a</code>被提升到函数作用域顶部，且初始值为<code>undefined</code>，于是<code>if</code>成立，早已存在的<code>a</code>由<code>undefined</code>被赋值为<code>10</code>。</p><p>将<code>var</code>改用<code>let</code>就不会有这样的问题。</p><p><strong>总结：无特殊情况不要用<code>var</code>，声明变量用<code>let</code>。声明对象类型用<code>const</code>，非对象类型用<code>let</code>。</strong></p><h2 id="innerHTML-和-innerText-的区别"><a href="#innerHTML-和-innerText-的区别" class="headerlink" title="innerHTML 和 innerText 的区别"></a>innerHTML 和 innerText 的区别</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>innerHTML与innerText的区别<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>hello world <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(div1.<span class="property">innerHTML</span>);    <span class="comment">// &lt;p id=&quot;p1&quot;&gt;hello world &lt;/p&gt;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(div1.<span class="property">innerText</span>)    <span class="comment">// hello world</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><a href="https://zhuanlan.zhihu.com/p/624027494">各种正则表达式样例</a></p><p><a href="https://blog.csdn.net/qq_42581563/article/details/129280355">一些常用的正则校验</a></p><h2 id="事件循环-消息循环"><a href="#事件循环-消息循环" class="headerlink" title="事件循环 &#x2F; 消息循环"></a>事件循环 &#x2F; 消息循环</h2><h4 id="浏览器的进程模型"><a href="#浏览器的进程模型" class="headerlink" title="浏览器的进程模型"></a>浏览器的进程模型</h4><p>浏览器运行时有很多个进程，我们重点关注三大进程：</p><ul><li>浏览器进程</li><li>网络进程</li><li>渲染进程（不止一个，每一个标签页就是一个渲染进程）</li></ul><p>其中<code>浏览器进程</code>是打开浏览器后最先启动的，负责：</p><ul><li>浏览器通用界面显示，如浏览器工具栏、浏览器设置等</li><li>用户交互，如监听点击、滚动等</li><li>子进程管理，浏览器其他进程均由浏览器进程开启</li><li>……</li></ul><p><code>网络进程</code>负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。</p><p><code>渲染进程</code>可以有多个，每一个标签页就是一个渲染进程，该进程包括一个<code>渲染主线程</code>和其他多个子线程。</p><h4 id="渲染主线程是如何工作的"><a href="#渲染主线程是如何工作的" class="headerlink" title="渲染主线程是如何工作的"></a>渲染主线程是如何工作的</h4><p>渲染主线程的任务包括但不限于：</p><ul><li>解析<code>HTML</code></li><li>解析<code>CSS</code></li><li>计算样式，如把<code>rem</code>转换为<code>px</code>等</li><li>计算布局，如计算元素宽高</li><li>处理图层，如根据<code>z-index</code>判断叠层关系</li><li>每帧绘制页面</li><li>执行<code>JavaSctipt</code></li><li>执行事件处理函数</li><li>执行计时器的回调函数</li><li>……</li></ul><p>主线程每次执行一个任务，执行完后从消息队列中取出下一个任务。所有线程可以随时向消息队列中添加任务。这整个过程称为<code>事件循环</code>。</p><p>若是需要等待的任务，如<code>setTimeout()</code>函数会在等待规定时间后才执行，则不能直接加入消息队列，否则会导致主线程要等待，而后面的任务也无法执行。</p><p>主线程执行到js中的<code>setTimeout()</code>，会把要计时等待的任务交给计时线程，由计时线程到时间后将回调函数加入消息队列。</p><p>Q：如何理解JS的异步？</p><p>A：</p><blockquote><p>JS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。<br>渲染主线程承担着诸多的工作，渲染页面、执行JS都在其中运行。<br>如果使用同步的方式，就极有可能导致主线程阻塞，从而导致消息队列中的很多其他任务无法得到执行。<br>这一方面会导致繁忙的主线程白白消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。<br>所以浏览器采用异步方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。<br>在这种异步模式下，浏览器永不阻塞，最大限度保证了单线程的流畅运行。</p></blockquote><h4 id="任务的优先级"><a href="#任务的优先级" class="headerlink" title="任务的优先级"></a>任务的优先级</h4><p>实际上消息队列不止一个队列，而是有多个队列：<code>微队列</code>、<code>延时队列</code>、<code>交互队列</code>等。</p><p>在W3C标准中，规定<code>微队列</code>是优先级最高的，意味着只有当微队列中所有任务都执行完了才会轮到其他队列。</p><p>在Chrome浏览器中，<code>延时队列</code>用于存放计时器到达后的回调函数，优先级为【中】；交互队列用于存放用户操作后产生的事件处理任务，优先级为【高】。</p><p>Q：阐释一下JS的事件循环？</p><p>A：</p><blockquote><p>事件循环又叫消息循环，是浏览器渲染主线程的工作方式。<br>在Chrome中，它开启一个不会结束的循环，每次循环从消息队列中取出第一个任务执行，而其他线程只要在合适的时候将任务加入到队列末尾即可。<br>过去把消息队列简单分为<code>宏队列</code>和<code>微队列</code>，这种方式已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。<br>根据W3C官方的规定，每个任务有不同的类型，同类型的任务必须在同一个队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务优先级最高，必须优先调度。</p></blockquote><p>Q：JS中的计时器能做到精确计时吗？为什么？</p><p>A：</p><blockquote><p>不行。<br>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，回调函数需要时间排队等待调度，因此带来了时间偏差。<br>操作系统的计时函数本身就有少量偏差，而JS的计时器最终调用的是操作系统的计时函数，因此也具有一定偏差。</p></blockquote><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise.resolve().then(fn) 会将函数fn加入微队列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(fn1)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>Q：浏览器执行以上js代码后输出是什么？</p><p>解析：</p><ol><li><code>setTimeout</code>将函数<code>fn3</code>添加到计时线程，0秒后时间到，计时线程将<code>fn3</code>添加到延时队列中排队等待调度；</li><li>全局js还未执行完，主线程继续执行，将<code>fn4</code>添加到微队列；</li><li>输出<code>5</code>；</li><li>全局js执行完毕，从消息队列中取出下一个任务。由于微队列优先级最高，因此取出<code>fn4</code>执行，输出<code>4</code>；</li><li><code>fn4</code>执行完毕，取出<code>fn3</code>执行，输出<code>3</code>，然后将<code>fn1</code>加入微队列；</li><li><code>fn3</code>执行完毕，取出<code>fn1</code>执行，输出<code>1</code>，然后将<code>fn2</code>加入微队列；</li><li><code>fn1</code>执行完毕，取出<code>fn2</code>执行，输出<code>2</code>；</li></ol><p>A：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;均以&lt;code&gt;Chrome&lt;/code&gt;浏览器为例。&lt;/p&gt;
&lt;h2 id=&quot;const、let、var的区别&quot;&gt;&lt;a href=&quot;#const、let、var的区别&quot; class=&quot;headerlink&quot; title=&quot;const、let、var的区别&quot;&gt;&lt;/a&gt;con</summary>
      
    
    
    
    <category term="前端" scheme="http://princesaoke.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>在HTML中使用阿里巴巴图标库的图标</title>
    <link href="http://princesaoke.github.io/2023/10/20/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E5%9B%BE%E6%A0%87/"/>
    <id>http://princesaoke.github.io/2023/10/20/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E5%9B%BE%E6%A0%87/</id>
    <published>2023-10-20T09:45:39.000Z</published>
    <updated>2023-11-29T16:12:31.346Z</updated>
    
    <content type="html"><![CDATA[<p>这里只介绍通过在线链接的方法。</p><p>进入(阿里巴巴图标库)[<a href="https://www.iconfont.cn]，选好需要的图标，放入购物车后将其加入项目。">https://www.iconfont.cn]，选好需要的图标，放入购物车后将其加入项目。</a></p><p>进入资源管理-&gt;我的项目，切换到<code>Font class</code>，点击查看在线链接。</p><p><img src="/images/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E5%9B%BE%E6%A0%87/link.png" alt="在线链接"></p><p>生成一个css链接，如<code>//at.alicdn.com/t/c/font_4287312_tew9cz81kg.css</code>，需要在前面加上<code>http:</code>，然后在HTML中引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入阿里巴巴图标库的项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://at.alicdn.com/t/c/font_4287312_tew9cz81kg.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用<code>&lt;i&gt;</code>元素使用图表，需要添加两个class：<code>iconfont</code>和对应的图标代码，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 假设图标代码为`icon-qq` --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-qq&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中图标代码可以在阿里巴巴图标库中复制</p><p><img src="/images/%E5%9C%A8HTML%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E5%9B%BE%E6%A0%87/icon_code.png" alt="图标代码"></p><p><em>附上<a href="https://blog.csdn.net/qq_63141957/article/details/130641116">参考文章</a>，其中有说明其他的引入图标方式</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里只介绍通过在线链接的方法。&lt;/p&gt;
&lt;p&gt;进入(阿里巴巴图标库)[&lt;a href=&quot;https://www.iconfont.cn]，选好需要的图标，放入购物车后将其加入项目。&quot;&gt;https://www.iconfont.cn]，选好需要的图标，放入购物车后将其加入项目</summary>
      
    
    
    
    <category term="前端" scheme="http://princesaoke.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="http://princesaoke.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Flutter中的一些问题</title>
    <link href="http://princesaoke.github.io/2023/10/17/Flutter%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://princesaoke.github.io/2023/10/17/Flutter%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2023-10-17T09:57:05.000Z</published>
    <updated>2023-12-04T06:59:10.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令行创建-Flutter"><a href="#命令行创建-Flutter" class="headerlink" title="命令行创建 Flutter"></a>命令行创建 Flutter</h2><p>使用命令行创建项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create --platforms=android,ios D:\flutter_projects\project_name</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–project-name</td><td>项目名，全部小写+下划线</td></tr><tr><td>–platforms</td><td>支持的平台，可选值为：android、ios、windows、linux、macos、web，此参数仅在“–template”设置为应用程序或插件时有效</td></tr><tr><td>–description</td><td>项目描述，此字符串最终位于<code>pubspec.yaml</code>文件中，默认为：A new Flutter project.</td></tr><tr><td>–org</td><td>项目的组织，使用反向域名表示法。此字符串用于Java包名称，并作为iOS捆绑包标识符中的前缀，默认为：com.example</td></tr></tbody></table><p>有关该命令的更多信息，参见<code>flutter --help create</code>。</p><h2 id="Android-未开启网络权限"><a href="#Android-未开启网络权限" class="headerlink" title="Android 未开启网络权限"></a>Android 未开启网络权限</h2><p>APP开发时正常，build后报错如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR:flutter/lib/ui/http://ui_dart_state.cc(148)] Unhandled Exception: SocketException: Failed host lookup: &#x27;api.douban.com&#x27; (OS Error: No address associated with hostname, errno = 7)</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><p>在<code>android\app\src\main\AndroidManifest.xml</code>中添加网络权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>如：<img src="/images/Flutter%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/internet_permission.png" alt="网络权限"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;命令行创建-Flutter&quot;&gt;&lt;a href=&quot;#命令行创建-Flutter&quot; class=&quot;headerlink&quot; title=&quot;命令行创建 Flutter&quot;&gt;&lt;/a&gt;命令行创建 Flutter&lt;/h2&gt;&lt;p&gt;使用命令行创建项目：&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Flutter" scheme="http://princesaoke.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>远程连接服务器的一些方法</title>
    <link href="http://princesaoke.github.io/2023/10/15/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/"/>
    <id>http://princesaoke.github.io/2023/10/15/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/</id>
    <published>2023-10-14T16:07:40.000Z</published>
    <updated>2023-10-31T06:38:37.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows-Server-远程桌面连接"><a href="#Windows-Server-远程桌面连接" class="headerlink" title="Windows Server 远程桌面连接"></a>Windows Server 远程桌面连接</h2><p>如果你的服务器装的操作系统是 Windows Server ，那么可以在自己的 Windows 电脑上直接远程控制图形化界面。</p><p>Win+R输入<code>mstsc</code>运行，进入远程桌面连接，在计算机一栏中填写要连接的服务器IP地址或域名，用户名即服务器登录的用户名，输入密码连接，可以将记录保存在本地这样下次就不用再输密码了。</p><h2 id="终端SSH远程连接服务器"><a href="#终端SSH远程连接服务器" class="headerlink" title="终端SSH远程连接服务器"></a>终端SSH远程连接服务器</h2><p>要求本地主机装有SSH客户端，服务器装有SSH服务器。可在 PowerShell 输入以下命令查看是否安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-WindowsCapability -Online | Where-Object Name -like <span class="string">&#x27;OpenSSH*&#x27;</span></span><br></pre></td></tr></table></figure><p>若均未安装则输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name  : OpenSSH.Client~~~~0.0.1.0</span><br><span class="line">State : NotPresent</span><br><span class="line"></span><br><span class="line">Name  : OpenSSH.Server~~~~0.0.1.0</span><br><span class="line">State : NotPresent</span><br></pre></td></tr></table></figure><p>SSH客户端不用特地安装，安装git时自带。</p><p>Windows Server 2022 没有SSH服务器，需要自行安装。</p><h4 id="用-PowerShell-安装"><a href="#用-PowerShell-安装" class="headerlink" title="用 PowerShell 安装"></a>用 PowerShell 安装</h4><p>管理员权限运行 PowerShell ，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 OpenSSH 客户端</span></span><br><span class="line">Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 OpenSSH 服务器</span></span><br><span class="line">Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0</span><br></pre></td></tr></table></figure><p>安装完成后继续运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 SSH 服务器</span></span><br><span class="line">Start-Service sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># OPTIONAL but recommended:</span></span><br><span class="line">Set-Service -Name sshd -StartupType <span class="string">&#x27;Automatic&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认防火墙规则已配置。它应该由安装程序自动创建。运行以下程序进行验证</span></span><br><span class="line"><span class="keyword">if</span> (!(Get-NetFirewallRule -Name <span class="string">&quot;OpenSSH-Server-In-TCP&quot;</span> -ErrorAction SilentlyContinue | Select-Object Name, Enabled)) &#123;</span><br><span class="line">    Write-Output <span class="string">&quot;防火墙规则 &#x27;OpenSSH-Server-In-TCP&#x27; 不存在，正在创建...&quot;</span></span><br><span class="line">    New-NetFirewallRule -Name <span class="string">&#x27;OpenSSH-Server-In-TCP&#x27;</span> -DisplayName <span class="string">&#x27;OpenSSH Server (sshd)&#x27;</span> -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Write-Output <span class="string">&quot;防火墙规则 &#x27;OpenSSH-Server-In-TCP&#x27; 已存在。&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得开放端口，默认为<code>22</code>端口。</p><p>一切都完成后，在本地计算机终端中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh 服务器登录用户名@IP地址 -p 连接端口</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举例如下，端口可省略</span></span><br><span class="line">ssh Administrator@123.123.123.123 -p 22</span><br></pre></td></tr></table></figure><p>然后输入密码即可连接成功。</p><h4 id="Windows-设置中安装-OpenSSH"><a href="#Windows-设置中安装-OpenSSH" class="headerlink" title="Windows 设置中安装 OpenSSH"></a>Windows 设置中安装 OpenSSH</h4><p><img src="/images/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/install_OpenSSH.png" alt="设置中安装OpenSSH"></p><h2 id="VSCode-中使用-Remote-SSH-远程连接服务器"><a href="#VSCode-中使用-Remote-SSH-远程连接服务器" class="headerlink" title="VSCode 中使用 Remote - SSH 远程连接服务器"></a>VSCode 中使用 Remote - SSH 远程连接服务器</h2><p>首先确保上一方法是可行的。</p><p>VSCode 安装拓展<code>Remote - SSH</code>，左侧菜单会多出一个远程资源管理器图标。如图操作进入<code>.ssh\config</code>。</p><p><img src="/images/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/vscode.png" alt="vscode"></p><p><code>.ssh\config</code>中这样填写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host my_server</span><br><span class="line">    HostName 123.123.123.123</span><br><span class="line">    User Administrator</span><br><span class="line">    Port 22</span><br></pre></td></tr></table></figure><p>其中<code>my_server</code>是给服务器起的名称，随便填，<code>HostName</code>是服务器IP地址，<code>User</code>是服务器登录用户名，<code>Port</code>是连接端口，可省略，默认为22。</p><p>保存后左侧出现对应的服务器，选择在新窗口连接，输入密码，选择服务器操作系统，即可像在本地工作区一样对远程工作区进行操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Windows-Server-远程桌面连接&quot;&gt;&lt;a href=&quot;#Windows-Server-远程桌面连接&quot; class=&quot;headerlink&quot; title=&quot;Windows Server 远程桌面连接&quot;&gt;&lt;/a&gt;Windows Server 远程桌面连接&lt;/</summary>
      
    
    
    
    <category term="后端" scheme="http://princesaoke.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="服务器" scheme="http://princesaoke.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Flutter取消ListView过度滑动效果</title>
    <link href="http://princesaoke.github.io/2023/10/11/Flutter%E5%8F%96%E6%B6%88ListView%E8%BF%87%E5%BA%A6%E6%BB%91%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
    <id>http://princesaoke.github.io/2023/10/11/Flutter%E5%8F%96%E6%B6%88ListView%E8%BF%87%E5%BA%A6%E6%BB%91%E5%8A%A8%E6%95%88%E6%9E%9C/</id>
    <published>2023-10-11T07:09:38.000Z</published>
    <updated>2023-10-11T13:49:28.185Z</updated>
    
    <content type="html"><![CDATA[<p>不止ListView，GridView、PageView等组件同样适用。</p><h2 id="Flutter-3-10-1-方法"><a href="#Flutter-3-10-1-方法" class="headerlink" title="Flutter 3.10.1 方法"></a>Flutter 3.10.1 方法</h2><p>在ListView外包裹一个<code>ScrollConfiguration</code>，设置<code>behavior</code>参数，<code>child</code>就是ListView：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ScrollConfiguration(</span><br><span class="line">  behavior: ScrollConfiguration.of(context).copyWith(overscroll: <span class="keyword">false</span>),</span><br><span class="line">  child: ListView(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Flutter-3-3-3-方法"><a href="#Flutter-3-3-3-方法" class="headerlink" title="Flutter 3.3.3 方法"></a>Flutter 3.3.3 方法</h2><p>在早些时候的3.3.3版本我是用下面这个方法的，发现换到3.10.1后失效了。依然会有过度滑动的波纹效果，但变成了白色。</p><p>自定义一个类，继承ScrollBehavior，如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消ListView过度滑动的水波纹效果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverScrollBehavior</span> <span class="keyword">extends</span> <span class="title">ScrollBehavior</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildViewportChrome(</span><br><span class="line">      BuildContext context, Widget child, AxisDirection axisDirection) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (getPlatform(context)) &#123;</span><br><span class="line">      <span class="keyword">case</span> TargetPlatform.iOS:</span><br><span class="line">        <span class="keyword">return</span> child;</span><br><span class="line">      <span class="keyword">case</span> TargetPlatform.android:</span><br><span class="line">      <span class="keyword">case</span> TargetPlatform.fuchsia:</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> GlowingOverscrollIndicator(</span><br><span class="line">          <span class="comment">// 不显示头部水波纹</span></span><br><span class="line">          showLeading: <span class="keyword">false</span>,</span><br><span class="line">          <span class="comment">// 不显示尾部水波纹</span></span><br><span class="line">          showTrailing: <span class="keyword">false</span>,</span><br><span class="line"></span><br><span class="line">          axisDirection: axisDirection,</span><br><span class="line">          color: Theme.of(context).colorScheme.secondary,</span><br><span class="line">          child: child,</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时在ListView外包裹一个<code>ScrollConfiguration</code>，<code>behavior</code>参数里实例化一个<code>OverScrollBehavior</code>即可：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ScrollConfiguration(</span><br><span class="line">    behavior: OverScrollBehavior(),</span><br><span class="line">    child: ListView(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不止ListView，GridView、PageView等组件同样适用。&lt;/p&gt;
&lt;h2 id=&quot;Flutter-3-10-1-方法&quot;&gt;&lt;a href=&quot;#Flutter-3-10-1-方法&quot; class=&quot;headerlink&quot; title=&quot;Flutter 3.10.1</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Flutter" scheme="http://princesaoke.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Android中的ShapeableImageView</title>
    <link href="http://princesaoke.github.io/2023/10/02/Android%E4%B8%AD%E7%9A%84ShapeableImageView/"/>
    <id>http://princesaoke.github.io/2023/10/02/Android%E4%B8%AD%E7%9A%84ShapeableImageView/</id>
    <published>2023-10-02T08:37:53.000Z</published>
    <updated>2023-10-02T11:56:26.099Z</updated>
    
    <content type="html"><![CDATA[<p>效果如下：</p><p><img src="/images/Android%E4%B8%AD%E7%9A%84ShapeableImageView/preview.png" alt="preview"></p><h2 id="声明依赖项"><a href="#声明依赖项" class="headerlink" title="声明依赖项"></a>声明依赖项</h2><p>在 app&#x2F;build.gradle.kts 中的 dependencies 添加：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(<span class="string">&quot;com.google.android.material:material:1.8.0&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了 ShapeableImageView ， Android Material 中还有很多其他有用的东西，以后接触到再慢慢记录。</p><h2 id="添加-style"><a href="#添加-style" class="headerlink" title="添加 style"></a>添加 style</h2><p>在 res&#x2F;values&#x2F;styles.xml 中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 圆形图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;circle_image&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;cornerFamily&quot;</span>&gt;</span>rounded<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;cornerSize&quot;</span>&gt;</span>50%<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 圆角图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;round_image&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;cornerFamily&quot;</span>&gt;</span>rounded<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;cornerSize&quot;</span>&gt;</span>10dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用-ShapeableImageView"><a href="#使用-ShapeableImageView" class="headerlink" title="使用 ShapeableImageView"></a>使用 ShapeableImageView</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.google.android.material.imageview.ShapeableImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/circle_image&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;64dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;64dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:contentDescription</span>=<span class="string">&quot;@null&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:scaleType</span>=<span class="string">&quot;centerCrop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:shapeAppearance</span>=<span class="string">&quot;@style/circle_image&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>若要描边效果，则加上以下属性：</p><table><thead><tr><th align="center">属性</th><th>作用</th></tr></thead><tbody><tr><td align="center">strokeColor</td><td>描边颜色</td></tr><tr><td align="center">strokeWidth</td><td>描边宽度</td></tr><tr><td align="center">padding</td><td>为<code>strokeWidth</code>的一半</td></tr></tbody></table><p>效果：</p><p><img src="/images/Android%E4%B8%AD%E7%9A%84ShapeableImageView/circle_image.jpg" alt="circle_image"></p><p><em>参考<a href="https://blog.csdn.net/chuyouyinghe/article/details/117448536">这篇文章</a></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Android%E4%B8%AD%E7%9A%84ShapeableImageView/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;声明依赖项&quot;&gt;&lt;a href=&quot;#声明依赖项</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android中的RecyclerView</title>
    <link href="http://princesaoke.github.io/2023/09/30/Android%E4%B8%AD%E7%9A%84RecyclerView/"/>
    <id>http://princesaoke.github.io/2023/09/30/Android%E4%B8%AD%E7%9A%84RecyclerView/</id>
    <published>2023-09-30T07:36:50.000Z</published>
    <updated>2023-12-20T15:59:45.356Z</updated>
    
    <content type="html"><![CDATA[<p>RecyclerView 相当于加强版的 ListView ，比 ListView 更灵活、更高效。</p><h2 id="声明依赖项"><a href="#声明依赖项" class="headerlink" title="声明依赖项"></a>声明依赖项</h2><p>在 app&#x2F;build.gradle.kts 中的 dependencies 添加：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(<span class="string">&quot;androidx.recyclerview:recyclerview:1.2.1&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可将 1.2.1 修改为你想要的版本（一般是最新的稳定版），详情见<a href="https://developer.android.google.cn/jetpack/androidx/releases/recyclerview?hl=zh-cn">官方文档</a></p><p><img src="/images/Android%E4%B8%AD%E7%9A%84RecyclerView/document.png" alt="官方文档"></p><p>点击 Android Studio 右上角的 Sync Project with Gradle Files 同步依赖。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>MainActivity.kt:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要显示的数据</span></span><br><span class="line"><span class="keyword">val</span> <span class="keyword">data</span> = arrayOf(<span class="string">&quot;秦广王&quot;</span>, <span class="string">&quot;楚江王&quot;</span>, <span class="string">&quot;宋帝王&quot;</span>, <span class="string">&quot;仵官王&quot;</span>, <span class="string">&quot;阎罗王&quot;</span>, <span class="string">&quot;卞城王&quot;</span>, <span class="string">&quot;泰山王&quot;</span>, <span class="string">&quot;都市王&quot;</span>, <span class="string">&quot;平等王&quot;</span>, <span class="string">&quot;转轮王&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> recyclerView = findViewById&lt;RecyclerView&gt;(R.id.recycler_view)   <span class="comment">// 用 id 找到 RecyclerView</span></span><br><span class="line">recyclerView.layoutManager = LinearLayoutManager(<span class="keyword">this</span>)  <span class="comment">// 配置子视图的布局，可切换其他布局，如下一行</span></span><br><span class="line"><span class="comment">// recyclerView.layoutManager = GridLayoutManager(this, 3)  // 3表示一行有几个子视图</span></span><br><span class="line"><span class="keyword">val</span> recyclerAdapter = MyAdapter(<span class="keyword">this</span>, description.toMutableList());</span><br><span class="line">recyclerView.adapter = recyclerAdapter</span><br></pre></td></tr></table></figure><p>RecyclerViewAdapter.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 自定义的 Adapter 类，继承 RecyclerView.Adapter</span></span><br><span class="line"><span class="comment">/// 其中的 RecyclerView.Adapter 是个泛型，需要传入 ViewHolder</span></span><br><span class="line"><span class="comment">/// 在 MyAdapter 类中实现一个自定义的 ViewHolder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;MyAdapter.MyViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyAdapter</span><span class="params">(Context context, List&lt;String&gt; data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 拿到 RecyclerView 子视图的布局</span></span><br><span class="line">    <span class="comment">/// 其中 R.layout.list_item 是配置子视图布局的 xml 文件</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MyViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup viewGroup, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> View.inflate(context, R.layout.list_item, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyViewHolder</span>(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 将要显示的数据赋值给子视图</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> MyViewHolder myViewHolder, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        myViewHolder.textView.setText(data.get(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 返回 RecyclerView 子视图的数量</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data == <span class="literal">null</span> ? <span class="number">0</span> : data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 自定义的 ViewHolder ，继承 RecyclerView.ViewHolder</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TextView textView;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            textView = itemView.findViewById(R.id.list_item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>res&#x2F;layout&#x2F;list_item.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingStart</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingEnd</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/list_item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>activity_main.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/recycler_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>&lt;RecyclerView&gt;</code>中加上<code>app:layoutManager=&quot;androidx.recyclerview.widget.LinearLayoutManager&quot;</code>可以设置其子视图的布局，与 MainActivity.kt 中的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.layoutManager = LinearLayoutManager(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure><p>起相同作用。</p><h2 id="删除数据并更新"><a href="#删除数据并更新" class="headerlink" title="删除数据并更新"></a>删除数据并更新</h2><ol><li>获取要删除的item的位置position</li><li>从数据源中删除该item</li><li>调用RecyclerView的Adapter的<code>notifyItemRemoved(position)</code>方法通知RecyclerView删除该item</li><li>如果需要更新删除item后的位置，可以调用Adapter的<code>notifyItemRangeChanged(position, itemCount)</code>方法更新</li><li>如果需要撤销删除操作，可以调用Adapter的<code>notifyItemInserted(position)</code>方法插入该item</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;RecyclerView 相当于加强版的 ListView ，比 ListView 更灵活、更高效。&lt;/p&gt;
&lt;h2 id=&quot;声明依赖项&quot;&gt;&lt;a href=&quot;#声明依赖项&quot; class=&quot;headerlink&quot; title=&quot;声明依赖项&quot;&gt;&lt;/a&gt;声明依赖项&lt;/h2&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android中的ListView</title>
    <link href="http://princesaoke.github.io/2023/09/24/Android%E4%B8%AD%E7%9A%84ListView/"/>
    <id>http://princesaoke.github.io/2023/09/24/Android%E4%B8%AD%E7%9A%84ListView/</id>
    <published>2023-09-24T15:31:27.000Z</published>
    <updated>2023-10-02T08:46:56.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><table><thead><tr><th align="center">kotlin属性</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td align="center">adapter</td><td>Adapter类</td><td>适配器，ListView将以该配置为模板显示内容</td></tr></tbody></table><p>用法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="keyword">data</span> = arrayOf(<span class="string">&quot;角木蛟&quot;</span>, <span class="string">&quot;亢金龙&quot;</span>, <span class="string">&quot;尾火虎&quot;</span>, <span class="string">&quot;箕水豹&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数的参数，第一个是上下文对象Context，第二个是适配器Adapter，第三个是要传进ListView展示的数据</span></span><br><span class="line"><span class="keyword">val</span> adapter = ArrayAdapter(<span class="keyword">this</span>, android.R.layout.simple_expandable_list_item_1, <span class="keyword">data</span>)</span><br><span class="line"><span class="keyword">val</span> listView = findViewById&lt;ListView&gt;(R.id.listview)</span><br><span class="line">listView.adapter = adapter</span><br></pre></td></tr></table></figure><p>这里的<code>android.R.layout.simple_expandable_list_item_1</code>还可以改用其他Adapter适配器。</p><h4 id="ArrayAdapter"><a href="#ArrayAdapter" class="headerlink" title="ArrayAdapter"></a>ArrayAdapter</h4><ul><li>simple_list_item_1</li></ul><p><img src="/images/Android%E4%B8%AD%E7%9A%84ListView/simple_list_item_1.png" alt="simple_list_item_1"></p><ul><li>simple_list_item_2</li></ul><p><img src="/images/Android%E4%B8%AD%E7%9A%84ListView/simple_list_item_2.png" alt="simple_list_item_2"></p><ul><li>simple_list_item_single_choice</li></ul><p><img src="/images/Android%E4%B8%AD%E7%9A%84ListView/simple_list_item_single_choice.png" alt="simple_list_item_single_choice"></p><ul><li>simple_list_item_multiple_choice</li></ul><p><img src="/images/Android%E4%B8%AD%E7%9A%84ListView/simple_list_item_multiple_choice.png" alt="simple_list_item_multiple_choice"></p><ul><li>simple_list_item_checked</li></ul><p><img src="/images/Android%E4%B8%AD%E7%9A%84ListView/simple_list_item_checked.png" alt="simple_list_item_checked"></p><h4 id="SimpleAdapter"><a href="#SimpleAdapter" class="headerlink" title="SimpleAdapter"></a>SimpleAdapter</h4><p>SimpleAdapter 允许你写一个布局，然后ListView中的所有行都使用这个布局。基本能实现任意效果。</p><p>res&#x2F;layout&#x2F;list_item.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingStart</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingEnd</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/list_item_title&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/list_item_description&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java&#x2F;MainActivity.kt</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要显示的数据</span></span><br><span class="line"><span class="keyword">val</span> title = arrayOf(<span class="string">&quot;星期一&quot;</span>, <span class="string">&quot;星期二&quot;</span>, <span class="string">&quot;星期三&quot;</span>, <span class="string">&quot;星期四&quot;</span>, <span class="string">&quot;星期五&quot;</span>, <span class="string">&quot;星期六&quot;</span>, <span class="string">&quot;星期天&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> description = arrayOf(<span class="string">&quot;周一周一，奄奄一息&quot;</span>, <span class="string">&quot;周二周二，肚子好饿&quot;</span>, <span class="string">&quot;周三周三，带病上班&quot;</span>, <span class="string">&quot;周四周四，重见天日&quot;</span>, <span class="string">&quot;周五周五，敲锣打鼓&quot;</span>, <span class="string">&quot;周六周六，大鱼大肉&quot;</span>, <span class="string">&quot;周日周日，死期将至&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Adapter要的数据是一个List，List里每个Map对应一行，Map里一个键值对即一个要显示的数据</span></span><br><span class="line"><span class="keyword">val</span> datas = mutableListOf&lt;Map&lt;String, String&gt;&gt;()</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> title.indices) &#123;</span><br><span class="line">    <span class="keyword">val</span> map = hashMapOf(<span class="string">&quot;title&quot;</span> to title[i], <span class="string">&quot;description&quot;</span> to description[i])</span><br><span class="line">    datas.add(map)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> adapter = SimpleAdapter(</span><br><span class="line">    <span class="keyword">this</span>,   <span class="comment">// 上下文 Context</span></span><br><span class="line">    datas,  <span class="comment">// 数据</span></span><br><span class="line">    R.layout.list_item,     <span class="comment">// 布局文件，每一行按该布局文件布局</span></span><br><span class="line">    arrayOf&lt;String&gt;(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;description&quot;</span>),    <span class="comment">// 有哪些数据</span></span><br><span class="line">    intArrayOf(R.id.list_item_title, R.id.list_item_description)    <span class="comment">// 对应上一行，将数据放到布局文件中的哪里</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>效果如下：</p><img src="/images/Android中的ListView/simple_adapter.jpg" alt="simple_adapter" title="simple_adapter" width="300"/>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ListView&quot;&gt;&lt;a href=&quot;#ListView&quot; class=&quot;headerlink&quot; title=&quot;ListView&quot;&gt;&lt;/a&gt;ListView&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;kotlin属性&lt;</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>转发QQ语音</title>
    <link href="http://princesaoke.github.io/2023/09/22/%E8%BD%AC%E5%8F%91QQ%E8%AF%AD%E9%9F%B3/"/>
    <id>http://princesaoke.github.io/2023/09/22/%E8%BD%AC%E5%8F%91QQ%E8%AF%AD%E9%9F%B3/</id>
    <published>2023-09-22T13:27:26.000Z</published>
    <updated>2024-02-14T09:23:15.011Z</updated>
    
    <content type="html"><![CDATA[<p><strong><p style="color:red;">注：本文章介绍的方法在 2024-02-09 仍然有效，不排除未来失效的可能</p></strong></p><h2 id="一、找到要转发的语音在本地的-amr-文件"><a href="#一、找到要转发的语音在本地的-amr-文件" class="headerlink" title="一、找到要转发的语音在本地的 .amr 文件"></a>一、找到要转发的语音在本地的 .amr 文件</h2><p>从电脑端进入用户个人文件夹：</p><p>对于电脑端新版的QQ9，打开设置-&gt;存储管理，进入“聊天信息默认保存到”的路径，进入以你的QQ号命名的个人文件夹。</p><p><img src="/images/%E8%BD%AC%E5%8F%91QQ%E8%AF%AD%E9%9F%B3/settings_1.png" alt="settings"></p><p>对于旧版的腾讯QQ，打开设置-&gt;文件管理-&gt;打开个人文件夹。</p><p><img src="/images/%E8%BD%AC%E5%8F%91QQ%E8%AF%AD%E9%9F%B3/settings_2.png" alt="settings"></p><p>个人文件夹中，Audio里就是所有聊天记录的语音，可以按时间排序找到要转发的.amr目标语音文件；也可以将要转发的语音收藏，在MyCollection&#x2F;Audio中找。找到后copy一份保存。</p><p>但是.amr格式是不能直接播放的，并且普通的格式转换工具也不起作用，QQ从某个时间点开始对语音进行了加密。</p><h2 id="二、-amr-转-mp3"><a href="#二、-amr-转-mp3" class="headerlink" title="二、.amr 转 .mp3"></a>二、.amr 转 .mp3</h2><p>需要用到特制的工具：<a href="https://pan.baidu.com/s/1P8jIr55pHuTiP6s8iQA-xg">silk2mp3</a></p><p><em>注：该工具似乎只能windows环境下运行</em></p><p>下载解压完后运行 silk2mp3.exe ，点击“导入待转换文件”，选择要转换的.amr语音，输出目录可以自己改，然后点开始转换，即可将 .amr 文件转换为 .mp3 文件。</p><p><img src="/images/%E8%BD%AC%E5%8F%91QQ%E8%AF%AD%E9%9F%B3/silk2mp3.png" alt="settings"></p><p><em>在此感谢该工具的作者 kn007</em></p><h2 id="三、将-mp3-文件以语音形式发送"><a href="#三、将-mp3-文件以语音形式发送" class="headerlink" title="三、将 .mp3 文件以语音形式发送"></a>三、将 .mp3 文件以语音形式发送</h2><p>这一步最好用数据线把手机连上电脑，选择文件传输模式，在电脑上对文件进行操作。</p><p>打开手机QQ进入聊天界面，点击录音，录音的时长就是语音发出去要显示的时长，然后结束录音，但注意不要点发送。</p><p>这时候电脑打开“此电脑”，进入手机的存储空间（连数据线的时候要选文件传输才能看到手机），进入<code>Android/data/com.tencent.mobileqq/Tencent/MobileQQ/以你的QQ号命名的文件夹/ptt/以年月命名的文件夹(如202309)/以日期命名的文件夹(如22)</code>，在其中根据时间找到你刚才的录音文件（.slk），复制其文件名及后缀，然后把你要转发的.mp3文件复制到这个目录，文件名改成刚复制的文件名（.mp3后缀也改成.slk），原来那个.slk文件就可以删掉了。</p><p>然后回到手机QQ点发送，发送出去的语音就是mp3文件的声音。</p><p>这里要注意，发送出去的语音上显示的语音时长和真正播放出来的语音时长是不一样的，显示的时长只取决于你录音录了多久，而播放的时长只取决于你的mp3文件的时长。</p><p>所以记得保证录音的时间和mp3文件的时长一样，否则可能会出现你点开两秒钟的语音却播放了一分钟的情况。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;p style=&quot;color:red;&quot;&gt;注：本文章介绍的方法在 2024-02-09 仍然有效，不排除未来失效的可能&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、找到要转发的语音在本地的-amr-文件&quot;&gt;&lt;a href=&quot;#一、找到要转发的语音</summary>
      
    
    
    
    <category term="整点花活" scheme="http://princesaoke.github.io/categories/%E6%95%B4%E7%82%B9%E8%8A%B1%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Android笔记</title>
    <link href="http://princesaoke.github.io/2023/09/20/Android%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/09/20/Android%E7%AC%94%E8%AE%B0/</id>
    <published>2023-09-20T05:41:09.000Z</published>
    <updated>2023-10-27T03:50:07.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ul><li>java文件夹下：业务逻辑</li><li>AndroidManifest.xml：项目配置文件</li><li>res&#x2F;layout文件夹下：页面布局</li><li>res&#x2F;values文件夹下：全局常量</li><li>res&#x2F;drawable文件夹下：图片资源</li><li>res&#x2F;mipmap系列：不同分辨率的图片资源，根据屏幕大小使用不同规格的图片，一般放APP图标</li></ul><h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2><table><thead><tr><th align="center">单位</th><th>说明</th></tr></thead><tbody><tr><td align="center">dp</td><td>device independent pixels（设备独立像素），不同设备有不同的显示效果，推荐使用这个</td></tr><tr><td align="center">px</td><td>pixels（像素）</td></tr><tr><td align="center">pt</td><td>point，1pt &#x3D; 1&#x2F;72 英寸</td></tr><tr><td align="center">sp</td><td>scaled pixels（放大像素），字体大小一般用这个</td></tr></tbody></table><h2 id="View-和-ViewGroup"><a href="#View-和-ViewGroup" class="headerlink" title="View 和 ViewGroup"></a>View 和 ViewGroup</h2><ul><li>页面上的一个UI组件就是一个View，如<code>&lt;TextView&gt;</code>、<code>&lt;Button&gt;</code>等</li><li>ViewGroup是一组View的布局方式，如<code>&lt;LinearLayout&gt;</code>、<code>&lt;RelativeLayout&gt;</code>等</li></ul><h2 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h2><ul><li><strong>Activity</strong> ：</li><li><strong>Service</strong> ：</li><li><strong>BroadcastReceiver</strong> ：允许你的应用接收来自各处的广播消息，比如电话、短信等，当然，你的应用也可以向外发出广播消息</li><li><strong>ContentProvider</strong> ：为应用程序之间共享数据提供了可能，比如你想要读取系统通讯录中的联系人，就需要通过ContentProvider来实现</li></ul><h2 id="六大基本布局"><a href="#六大基本布局" class="headerlink" title="六大基本布局"></a>六大基本布局</h2><ul><li><strong>线性布局 LinearLayout</strong> ：View按水平或竖直排列</li><li><strong>相对布局 RelativeLayout</strong> ：使用margin和padding相对父容器布局</li><li><strong>表格布局 TableLayout</strong> ：<code>&lt;TableLayout&gt;</code>内使用<code>&lt;TableRow&gt;</code>定义一行，<code>&lt;TableRow&gt;</code>中几个元素就是几列</li><li><strong>帧布局 FrameLayout</strong> ：即叠层布局。帧布局的大小由控件中最大的子控件决定</li><li><strong>绝对布局 AbsoluteLayout</strong> ：已弃用，建议改用 ConstraintLayout</li><li><strong>网格布局 GridLayout</strong> ：将视图按格子排列</li></ul><h2 id="线性布局-LinearLayout"><a href="#线性布局-LinearLayout" class="headerlink" title="线性布局 LinearLayout"></a>线性布局 LinearLayout</h2><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">layout_width</td><td>“match_parent”、”wrap_content”</td><td>线性布局的宽度</td></tr><tr><td align="center">layout_height</td><td>“match_parent”、”wrap_content”</td><td>线性布局的高度</td></tr><tr><td align="center">orientation</td><td>“vertical”、”horizontal”</td><td>内部视图排序方向</td></tr><tr><td align="center">divider</td><td>一个视图View</td><td>内部每两个相邻视图之间都有一个View</td></tr></tbody></table><h4 id="GridLayout-内视图参数"><a href="#GridLayout-内视图参数" class="headerlink" title="GridLayout 内视图参数"></a>GridLayout 内视图参数</h4><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">layout_width</td><td>“match_parent”、”wrap_content”</td><td>线性布局的宽度</td></tr><tr><td align="center">layout_height</td><td>“match_parent”、”wrap_content”</td><td>线性布局的高度</td></tr><tr><td align="center">layout_weight</td><td>1、2、3、……</td><td>该视图占整个线性布局大小的权重，使用该参数时注意 layout_width 与 layout_height 要有一个为 “wrap_content”</td></tr></tbody></table><h2 id="网格布局-GridLayout"><a href="#网格布局-GridLayout" class="headerlink" title="网格布局 GridLayout"></a>网格布局 GridLayout</h2><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">rowCount</td><td>1、2、3、……</td><td>共有几行</td></tr><tr><td align="center">columnCount</td><td>1、2、3、……</td><td>共有几列</td></tr><tr><td align="center">orientation</td><td>“horizontal”、”vertical”</td><td>内部视图排序方向</td></tr></tbody></table><h4 id="GridLayout-内视图参数-1"><a href="#GridLayout-内视图参数-1" class="headerlink" title="GridLayout 内视图参数"></a>GridLayout 内视图参数</h4><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">layout_rowSpan</td><td>1、2、3、……</td><td>该视图横跨几列</td></tr><tr><td align="center">layout_columnSpan</td><td>1、2、3、……</td><td>该视图竖跨几行</td></tr><tr><td align="center">layout_gravity</td><td>“fill”、……</td><td>有使用以上两参数，则该参数为”fill”</td></tr></tbody></table><h2 id="表格布局-TableLayout"><a href="#表格布局-TableLayout" class="headerlink" title="表格布局 TableLayout"></a>表格布局 TableLayout</h2><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">stretchColumns</td><td>0、1、2、……</td><td>被拉伸的列序号</td></tr><tr><td align="center">hint</td><td>任意字符串</td><td>输入框为空时的提示词，无该参数会报错</td></tr></tbody></table><h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><p>Android中的日志工具类是Log（android.util.Log），这个类中提供了如下5个方法来供我们打印日志（级别从低到高）。</p><ul><li>Log.v()。级别<code>verbose</code>，用于打印那些最为琐碎的、意义最小的日志信息</li><li>Log.d()。级别<code>debug</code>，用于打印一些调试信息，这些信息对你调试程序和分析问题应该是有帮助的</li><li>Log.i()。级别<code>info</code>，用于打印一些比较重要的数据，这些数据应该是你非常想看到的、可以帮你分析用户行为的数据</li><li>Log.w()。级别<code>warn</code>，用于打印一些警告信息，提示程序在这个地方可能会有潜在的风险，最好去修复一下这些出现警告的地方</li><li>Log.e()。级别<code>error</code>，用于打印程序中的错误信息，一般代表你的程序出现严重问题了，必须尽快修复</li></ul><h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">textStyle</td><td>bold、italic等</td><td>字体样式，如加粗、斜体等</td></tr><tr><td align="center">shadowRadius</td><td>浮点数</td><td>阴影模糊程度</td></tr><tr><td align="center">singleLine</td><td>true、false</td><td>文本单行显示</td></tr><tr><td align="center">ellipsize</td><td>end等</td><td>文本超出范围的省略方式</td></tr></tbody></table><h2 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h2><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">inputType</td><td>text、number等</td><td>指明输入内容的类型以弹出对应键盘</td></tr><tr><td align="center">hint</td><td>任意字符串</td><td>输入框为空时的提示词，无该参数会报错</td></tr><tr><td align="center">drawableXXX</td><td>Vector</td><td>在输入框的指定方位添加icon或图片</td></tr><tr><td align="center">hint</td><td>任意字符串</td><td>输入框为空时的提示词，无该参数会报错</td></tr></tbody></table><table><thead><tr><th align="center">kotlin方法</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td align="center">getText</td><td></td><td>返回输入框中的内容</td></tr></tbody></table><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><table><thead><tr><th align="center">xml参数</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td align="center">onClick</td><td>字符串，为点击后要执行的方法名</td><td>点击按钮后会调用对应的方法，与 setOnClickListener 相同</td></tr><tr><td align="center">background</td><td>selector</td><td>按钮背景图片</td></tr><tr><td align="center">backgroundTint</td><td>selector</td><td>按钮背景图片颜色</td></tr></tbody></table><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p>详见我的另一篇文章：<a href="https://princesaoke.github.io/2023/09/24/Android%E4%B8%AD%E7%9A%84ListView">Android中的ListView</a></p><h2 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h2><p>详见我的另一篇文章：<a href="https://princesaoke.github.io/2023/09/30/Android%E4%B8%AD%E7%9A%84RecyclerView">Android中的ListView</a></p><h2 id="ShapeableImageView"><a href="#ShapeableImageView" class="headerlink" title="ShapeableImageView"></a>ShapeableImageView</h2><p>详见我的另一篇文章：<a href="https://princesaoke.github.io/2023/10/02/Android%E4%B8%AD%E7%9A%84ShapeableImageView">Android中的ShapeableImageView</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;java文件夹下：业务逻辑&lt;/li&gt;
&lt;li&gt;AndroidManifest.xml：项目配置文件&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Git提交规范</title>
    <link href="http://princesaoke.github.io/2023/09/18/Git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/"/>
    <id>http://princesaoke.github.io/2023/09/18/Git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</id>
    <published>2023-09-18T06:27:36.000Z</published>
    <updated>2023-09-18T07:11:40.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VSCode-插件：git-commit-plugin"><a href="#VSCode-插件：git-commit-plugin" class="headerlink" title="VSCode 插件：git-commit-plugin"></a>VSCode 插件：git-commit-plugin</h2><p><img src="/images/Git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/git-commit-plugin.png" alt="git-commit-plugin"></p><p>该插件可帮助你规范commit描述格式，便于生成易于阅读且美观的提交。</p><p><img src="/images/Git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/example.png" alt="效果"></p><h2 id="修改上次commit的描述"><a href="#修改上次commit的描述" class="headerlink" title="修改上次commit的描述"></a>修改上次commit的描述</h2><p>有时候我们提交的描述格式或内容填错了，想要覆盖掉之前的描述，只能重新commit一次，但这样就会多一个提交记录。</p><p>其实有一个不需要重新提交就可以修改上次commit描述的方法，详见<a href="https://www.jianshu.com/p/4bbff5508efc">这篇文章</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;VSCode-插件：git-commit-plugin&quot;&gt;&lt;a href=&quot;#VSCode-插件：git-commit-plugin&quot; class=&quot;headerlink&quot; title=&quot;VSCode 插件：git-commit-plugin&quot;&gt;&lt;/a&gt;VSCod</summary>
      
    
    
    
    <category term="整点花活" scheme="http://princesaoke.github.io/categories/%E6%95%B4%E7%82%B9%E8%8A%B1%E6%B4%BB/"/>
    
    
    <category term="Git" scheme="http://princesaoke.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>关于AndroidStudio的一些问题</title>
    <link href="http://princesaoke.github.io/2023/09/17/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://princesaoke.github.io/2023/09/17/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2023-09-17T07:11:53.000Z</published>
    <updated>2023-10-17T10:06:30.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gradle-版本与-Java-版本不匹配"><a href="#Gradle-版本与-Java-版本不匹配" class="headerlink" title="Gradle 版本与 Java 版本不匹配"></a>Gradle 版本与 Java 版本不匹配</h2><p>Gradle 7.4 最高只支持到 Java17，Java20 要 Gradle8.3 。</p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/gradle7.4.png" alt="gradle 7.4"></p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/gradle8.3.png" alt="gradle 8.3"></p><p>之前装了一下Java20，然后出问题了，安卓项目打不开，编译报错，最后改用Java17。</p><h2 id="Android-Studio-内部-jre-路径缓存"><a href="#Android-Studio-内部-jre-路径缓存" class="headerlink" title="Android Studio 内部 jre 路径缓存"></a>Android Studio 内部 jre 路径缓存</h2><p>换了Java版本，路径也变了。即便我配置好了环境变量，Android Studio 还是默认到之前的路径去找jre，看网上说应该是 Android Studio 内部的缓存路径没变。我干脆直接重装，换了2022的版本，用了新UI，颜值稍微高了那么一点点，不过还是难用。</p><h2 id="安卓虚拟机（AVD）的问题"><a href="#安卓虚拟机（AVD）的问题" class="headerlink" title="安卓虚拟机（AVD）的问题"></a>安卓虚拟机（AVD）的问题</h2><p>创建一台设备，一点启动，直接弹窗说设备已终止什么的，反正就是启动不了。检查一下C盘，如果你和我一样C盘爆红，那应该是空间不足。</p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/avd_has_terminated.png" alt="AVD已终止"></p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/c.png" alt="C盘爆红"></p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/not_enough_space.png" alt="空间不足"></p><p>按照<a href="https://blog.csdn.net/xiaopangcame/article/details/127053704">这篇文章</a>的步骤去做，把.android文件夹移到别的磁盘，然后添加环境变量，完美解决。</p><p>启动是可以启动了，但还有别的问题：虚拟机屏幕一闪一闪的，而且动不动就卡死然后直接蓝屏。</p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/blue_screen.jpg" alt="蓝屏"></p><p>终止代码 CLOCK_WATCHDOG_TIMEOUT，暂时还不知道什么原因。</p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/speaker_error.png" alt="未检测到扬声器"></p><p>😅</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Gradle-版本与-Java-版本不匹配&quot;&gt;&lt;a href=&quot;#Gradle-版本与-Java-版本不匹配&quot; class=&quot;headerlink&quot; title=&quot;Gradle 版本与 Java 版本不匹配&quot;&gt;&lt;/a&gt;Gradle 版本与 Java 版本不匹配&lt;/</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Flutter版本切换</title>
    <link href="http://princesaoke.github.io/2023/09/14/Flutter%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/"/>
    <id>http://princesaoke.github.io/2023/09/14/Flutter%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/</id>
    <published>2023-09-14T05:40:25.000Z</published>
    <updated>2023-09-17T07:06:26.020Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录如何切换Flutter到指定版本。使用该方法一步到位，无需再修改Dart版本。</p><p>参考文章：<a href="http://www.taodudu.cc/news/show-3618721.html">http://www.taodudu.cc/news/show-3618721.html</a></p><h2 id="一、切换-Flutter-SDK-分支"><a href="#一、切换-Flutter-SDK-分支" class="headerlink" title="一、切换 Flutter SDK 分支"></a>一、切换 Flutter SDK 分支</h2><p>进入安装 flutter sdk 的文件夹，终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 3.10.1     // 3.10.1 换成要切换到的版本号</span><br></pre></td></tr></table></figure><p>将sdk切换到其他版本。</p><p><img src="/images/Flutter%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/%E5%88%87%E6%8D%A2sdk%E7%89%88%E6%9C%AC.png" alt="切换sdk版本"></p><h2 id="二、Flutter-Doctor-更新-Dart-SDK-及工具包"><a href="#二、Flutter-Doctor-更新-Dart-SDK-及工具包" class="headerlink" title="二、Flutter Doctor 更新 Dart SDK 及工具包"></a>二、Flutter Doctor 更新 Dart SDK 及工具包</h2><p>终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>进行flutter检查，会自动帮你装上与flutter版本对应的 dart sdk 及相关的工具包。</p><p>最后终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter --version</span><br></pre></td></tr></table></figure><p>检查版本是否切换成功。</p><p><img src="/images/Flutter%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/flutter_doctor.png" alt="flutter_doctor"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文记录如何切换Flutter到指定版本。使用该方法一步到位，无需再修改Dart版本。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;http://www.taodudu.cc/news/show-3618721.html&quot;&gt;http://www.taodudu.cc/news</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Flutter" scheme="http://princesaoke.github.io/tags/Flutter/"/>
    
  </entry>
  
</feed>
