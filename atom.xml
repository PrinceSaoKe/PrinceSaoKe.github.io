<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>骚客.的个人博客</title>
  
  <subtitle>记录我的学习过程</subtitle>
  <link href="http://princesaoke.github.io/atom.xml" rel="self"/>
  
  <link href="http://princesaoke.github.io/"/>
  <updated>2023-09-17T07:56:53.263Z</updated>
  <id>http://princesaoke.github.io/</id>
  
  <author>
    <name>骚客.</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于AndroidStudio的一些问题</title>
    <link href="http://princesaoke.github.io/2023/09/17/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://princesaoke.github.io/2023/09/17/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2023-09-17T07:11:53.000Z</published>
    <updated>2023-09-17T07:56:53.263Z</updated>
    
    <content type="html"><![CDATA[<p><strong><p style="color: red;">Android Studio 真的难用的一批！</p></strong></p><h2 id="Gradle-版本与-Java-版本不匹配"><a href="#Gradle-版本与-Java-版本不匹配" class="headerlink" title="Gradle 版本与 Java 版本不匹配"></a>Gradle 版本与 Java 版本不匹配</h2><p>Gradle 7.4 最高只支持到 Java17，Java20 要 Gradle8.3 。</p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/gradle7.4.png" alt="gradle 7.4"></p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/gradle8.3.png" alt="gradle 8.3"></p><p>之前装了一下Java20，然后出问题了，安卓项目打不开，编译报错，最后改用Java17。</p><h2 id="Android-Studio-内部-jre-路径缓存"><a href="#Android-Studio-内部-jre-路径缓存" class="headerlink" title="Android Studio 内部 jre 路径缓存"></a>Android Studio 内部 jre 路径缓存</h2><p>换了Java版本，路径也变了。即便我配置好了环境变量，Android Studio 还是默认到之前的路径去找jre，看网上说应该是 Android Studio 内部的缓存路径没变。我干脆直接重装，换了2022的版本，用了新UI，颜值稍微高了那么一点点，不过还是难用。</p><h2 id="安卓虚拟机（AVD）的问题"><a href="#安卓虚拟机（AVD）的问题" class="headerlink" title="安卓虚拟机（AVD）的问题"></a>安卓虚拟机（AVD）的问题</h2><p>创建一台设备，一点启动，直接弹窗说设备已终止什么的，反正就是启动不了。检查一下C盘，如果你和我一样C盘爆红，那应该是空间不足。</p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/c.png" alt="C盘爆红"></p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/not_enough_space.png" alt="空间不足"></p><p>按照<a href="https://blog.csdn.net/xiaopangcame/article/details/127053704">这篇文章</a>的步骤去做，把.android文件夹移到别的磁盘，然后添加环境变量，完美解决。</p><p>启动是可以启动了，但还有别的问题：虚拟机屏幕一闪一闪的，而且动不动就卡死然后直接蓝屏。</p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/blue_screen.jpg" alt="蓝屏"></p><p>终止代码 CLOCK_WATCHDOG_TIMEOUT，暂时还不知道什么原因，所以 Android Studio 你还是哪凉快哪待着去吧。</p><p><img src="/images/%E5%85%B3%E4%BA%8EAndroidStudio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/speaker_error.png" alt="未检测到扬声器"></p><p><em>重启后还说检测不到扬声器😅</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;p style=&quot;color: red;&quot;&gt;Android Studio 真的难用的一批！&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Gradle-版本与-Java-版本不匹配&quot;&gt;&lt;a href=&quot;#Gradle-版本与-Java-版本不匹配&quot; c</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Android" scheme="http://princesaoke.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Flutter版本切换</title>
    <link href="http://princesaoke.github.io/2023/09/14/Flutter%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/"/>
    <id>http://princesaoke.github.io/2023/09/14/Flutter%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/</id>
    <published>2023-09-14T05:40:25.000Z</published>
    <updated>2023-09-17T07:06:26.020Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录如何切换Flutter到指定版本。使用该方法一步到位，无需再修改Dart版本。</p><p>参考文章：<a href="http://www.taodudu.cc/news/show-3618721.html">http://www.taodudu.cc/news/show-3618721.html</a></p><h2 id="一、切换-Flutter-SDK-分支"><a href="#一、切换-Flutter-SDK-分支" class="headerlink" title="一、切换 Flutter SDK 分支"></a>一、切换 Flutter SDK 分支</h2><p>进入安装 flutter sdk 的文件夹，终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 3.10.1     // 3.10.1 换成要切换到的版本号</span><br></pre></td></tr></table></figure><p>将sdk切换到其他版本。</p><p><img src="/images/Flutter%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/%E5%88%87%E6%8D%A2sdk%E7%89%88%E6%9C%AC.png" alt="切换sdk版本"></p><h2 id="二、Flutter-Doctor-更新-Dart-SDK-及工具包"><a href="#二、Flutter-Doctor-更新-Dart-SDK-及工具包" class="headerlink" title="二、Flutter Doctor 更新 Dart SDK 及工具包"></a>二、Flutter Doctor 更新 Dart SDK 及工具包</h2><p>终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>进行flutter检查，会自动帮你装上与flutter版本对应的 dart sdk 及相关的工具包。</p><p>最后终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter --version</span><br></pre></td></tr></table></figure><p>检查版本是否切换成功。</p><p><img src="/images/Flutter%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/flutter_doctor.png" alt="flutter_doctor"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文记录如何切换Flutter到指定版本。使用该方法一步到位，无需再修改Dart版本。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;http://www.taodudu.cc/news/show-3618721.html&quot;&gt;http://www.taodudu.cc/news</summary>
      
    
    
    
    <category term="移动端" scheme="http://princesaoke.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="Flutter" scheme="http://princesaoke.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记</title>
    <link href="http://princesaoke.github.io/2023/09/14/Java%E7%AC%94%E8%AE%B0/"/>
    <id>http://princesaoke.github.io/2023/09/14/Java%E7%AC%94%E8%AE%B0/</id>
    <published>2023-09-14T05:34:31.000Z</published>
    <updated>2023-09-17T07:06:07.597Z</updated>
    
    <content type="html"><![CDATA[<p>简单记一下</p><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><table><thead><tr><th align="center">修饰符</th><th align="center">当前类</th><th align="center">同一包内</th><th align="center">同一包内的子类</th><th align="center">不同包内的子类</th><th align="center">其他包</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">可访问父类的protected，不可访问父类对象的protected</td><td align="center">×</td></tr><tr><td align="center">default</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h2 id="instanceof：判断一个变量是否是某个类的实例"><a href="#instanceof：判断一个变量是否是某个类的实例" class="headerlink" title="instanceof：判断一个变量是否是某个类的实例"></a>instanceof：判断一个变量是否是某个类的实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Car 是 Vehicle 的子类</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag1</span> <span class="operator">=</span> car <span class="keyword">instanceof</span> Car      <span class="comment">// flag1 = true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag2</span> <span class="operator">=</span> car <span class="keyword">instanceof</span> Vehicle  <span class="comment">// flag2 = true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag3</span> <span class="operator">=</span> car <span class="keyword">instanceof</span> Cat      <span class="comment">// flag1 = false</span></span><br></pre></td></tr></table></figure><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><table><thead><tr><th align="center">原始值</th><th align="center">floor（向下取整）</th><th align="center">round（四舍五入）</th><th align="center">ceil（向上取整）</th></tr></thead><tbody><tr><td align="center">2.7</td><td align="center">2</td><td align="center">3</td><td align="center">3</td></tr><tr><td align="center">2.3</td><td align="center">2</td><td align="center">2</td><td align="center">3</td></tr><tr><td align="center">-2.3</td><td align="center">-3</td><td align="center">-2</td><td align="center">-2</td></tr><tr><td align="center">-2.7</td><td align="center">-3</td><td align="center">-3</td><td align="center">-2</td></tr></tbody></table><p><em>floor是地板的意思，ceil是天花板，就很好记了</em></p><h2 id="throw-throws"><a href="#throw-throws" class="headerlink" title="throw &amp; throws"></a>throw &amp; throws</h2><p>throw用于主动抛出异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">divide</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x / y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArithmeticException exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加了throws的函数，函数内部抛出的异常要在函数外捕捉到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当抛出异常时，不在函数内捕捉，而是抛出到函数外</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">divide</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> <span class="keyword">throws</span> ArithmeticException &#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕捉到divide方法内部抛出的异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        divide(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ArithmeticException exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList-与-LinkedList-的区别"><a href="#ArrayList-与-LinkedList-的区别" class="headerlink" title="ArrayList 与 LinkedList 的区别"></a>ArrayList 与 LinkedList 的区别</h2><h3 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h3><ul><li><p>ArrayList 使用动态数组来存储元素，这意味着在内存中分配一块连续的内存空间来保存元素</p></li><li><p>LinkedList 使用双向链表来存储元素，每个元素都包含对前一个和后一个元素的引用</p></li></ul><h3 id="插入和删除操作"><a href="#插入和删除操作" class="headerlink" title="插入和删除操作"></a>插入和删除操作</h3><ul><li><p>ArrayList 的随机访问非常快速，因为可以通过索引直接访问元素。但是，插入和删除元素时，需要移动后续元素，效率较低</p></li><li><p>LinkedList 的插入和删除操作效率较高，因为只需更改节点的引用。但是，随机访问元素效率较低，因为必须从头或尾部开始遍历链表</p></li></ul><h3 id="内存消耗"><a href="#内存消耗" class="headerlink" title="内存消耗"></a>内存消耗</h3><ul><li><p>ArrayList 在存储大量元素时可能会浪费一些内存，因为它分配一块较大的内存空间。但它在随机访问时效率较高</p></li><li><p>LinkedList 每个元素都需要额外的内存来存储引用，因此在存储大量元素时可能会消耗更多内存。但它在插入和删除操作时效率较高</p></li></ul><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li><p>ArrayList 适用于需要频繁随机访问元素的情况，但不需要频繁执行插入和删除操作的情况</p></li><li><p>LinkedList 适用于需要频繁执行插入和删除操作的情况，但不需要频繁随机访问元素的情况</p></li></ul><p><em>chatGPT原话 : )</em></p><h2 id="LocalDateTime-LocalDate-LocalTime"><a href="#LocalDateTime-LocalDate-LocalTime" class="headerlink" title="LocalDateTime &amp; LocalDate &amp; LocalTime"></a>LocalDateTime &amp; LocalDate &amp; LocalTime</h2><p><em>参考的是<a href="https://blog.csdn.net/LiuQQ567/article/details/131269552">这篇文章</a></em></p><p>三者区别是，LocalDate只能存日期，LocalTime只能存时间，LocalDateTime既可以存日期又可以存时间。这里只介绍LocalDateTime。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="type">var</span> <span class="variable">localDateTime1</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">var</span> <span class="variable">localDateTime2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2023</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">00</span>);     <span class="comment">// 2023-09-11 22:23:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转LocalDateTime</span></span><br><span class="line"><span class="type">var</span> <span class="variable">localDateTime3</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2023-09-11T22:23:00&quot;</span>);    <span class="comment">// 必须要有T</span></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">var</span> <span class="variable">localDateTime4</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2023-09-11 22:23:00&quot;</span>, formatter);     <span class="comment">// 将字符串按照formatter中规定的格式转化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取星期</span></span><br><span class="line"><span class="type">DayOfWeek</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> localDateTime1.getDayOfWeek();    <span class="comment">// 假设为星期天</span></span><br><span class="line">System.out.println(dayOfWeek.getValue());   <span class="comment">// 7</span></span><br><span class="line"><span class="comment">// TextStyle.FULL(星期全称), Locale.CHINA(用中文输出)</span></span><br><span class="line">System.out.println(dayOfWeek.getDisplayName(TextStyle.FULL, Locale.CHINA));     <span class="comment">// 星期日</span></span><br><span class="line"><span class="comment">// TextStyle.FULL(星期全称), Locale.CHINA(用中文输出)</span></span><br><span class="line">System.out.println(dayOfWeek.getDisplayName(TextStyle.Short, Locale.CHINA));    <span class="comment">// 周日</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取月份同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加日期</span></span><br><span class="line">localDateTime1 = localDateTime1.plus(<span class="number">5</span>, ChronoUnit.DAYS);   <span class="comment">// 日期+5，下同</span></span><br><span class="line">localDateTime1 = localDateTime1.plusDays(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="Date-Calendar-（已弃用）"><a href="#Date-Calendar-（已弃用）" class="headerlink" title="Date &amp; Calendar （已弃用）"></a><del>Date &amp; Calendar</del> （已弃用）</h2><p><strong><h3 style="color: red">注：Date类与Calendar类已弃用！</h3></strong></p><p><em>看完一问chatGPT，才知道这俩已经被LocalDateTime取代了，旧教程害人啊……笔记都做完了，就不删了吧</em></p><p>按自定义格式输出时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss E&quot;</span>);</span><br><span class="line">System.out.println(format.format(date));</span><br><span class="line"><span class="comment">// 2023-09-09 19:54:33 周六</span></span><br></pre></td></tr></table></figure><p>其中HH:mm:ss是24小时制，hh:mm:ss是12小时制</p><p>或者用printf：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;现在是：%tY-%tm-%td，%tp%tH:%tM:%tS，%tA&quot;</span>, date, date, date, date, date, date, date, date);</span><br><span class="line"><span class="comment">// 现在是：2023-09-09，下午20:07:02，星期六</span></span><br></pre></td></tr></table></figure><p>使用Calendar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();     <span class="comment">// 创建对象，默认为当前时间</span></span><br><span class="line">calendar.set(<span class="number">2002</span>, <span class="number">11</span>, <span class="number">30</span>);                     <span class="comment">// 设置年月日</span></span><br><span class="line">calendar.set(Calendar.YEAR, <span class="number">2077</span>);              <span class="comment">// 单独设置某个属性</span></span><br><span class="line">System.out.println(calendar.get(Calendar.YEAR));</span><br><span class="line"><span class="comment">// 2077</span></span><br></pre></td></tr></table></figure><p><em>有关Date类与Calendar类的更多信息，参考<a href="https://www.runoob.com/java/java-date-time.html">这里</a></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简单记一下&lt;/p&gt;
&lt;h2 id=&quot;包管理&quot;&gt;&lt;a href=&quot;#包管理&quot; class=&quot;headerlink&quot; title=&quot;包管理&quot;&gt;&lt;/a&gt;包管理&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;修饰符&lt;/th&gt;
&lt;th ali</summary>
      
    
    
    
    <category term="Java相关" scheme="http://princesaoke.github.io/categories/Java%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Java" scheme="http://princesaoke.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Github页面美化</title>
    <link href="http://princesaoke.github.io/2023/09/10/Github%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/"/>
    <id>http://princesaoke.github.io/2023/09/10/Github%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/</id>
    <published>2023-09-10T12:23:58.000Z</published>
    <updated>2023-09-17T07:08:46.428Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何把你的Github首页打扮的花里胡哨。</p><p><strong><p style="color:red;">注：本文章内的icon可能需要vpn才能加载出来</p></strong></p><h2 id="在Github首页展示自定义内容"><a href="#在Github首页展示自定义内容" class="headerlink" title="在Github首页展示自定义内容"></a>在Github首页展示自定义内容</h2><p>每个项目的根目录下的README.md文件是该项目的说明，我们在接触一个项目时要做的第一件事就是阅读这个README.md文件。</p><p>在github，每个仓库的根目录下的README.md文件中的内容会被展示在源代码下方，便于阅读。如果你将仓库名称设为自己的github昵称，系统会提示你这是一个<strong>特殊</strong>的仓库。它的README.md文件不仅会展示在仓库下方，还会被展示在该用户的github首页，这意味着我们可以在其中添加一些自我介绍，让访客可以在首页直接看到。</p><h2 id="添加技术栈icon"><a href="#添加技术栈icon" class="headerlink" title="添加技术栈icon"></a>添加技术栈icon</h2><p>你是否在他人的github首页看到这样花花绿绿的炫酷图标：</p><p><img src="/images/Github%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/cofess.png" alt="技术栈icon"></p><p>这是用到了 <strong><a href="https://shields.io/">shields.io</a></strong> 上的icon图标。进入其官网，点击 Get Started，第一个 Static Badge 就是我们要用的。看它的默认样式，可能会觉得有点眼熟，因为很多地方都有用到，比如VSCode拓展插件介绍页面常用的icon。</p><p>注意，shields.io 的icon可能需要vpn才能正常加载。</p><p><img src="/images/Github%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/code_runner.png" alt="Code Runner"></p><p>简单来说，你可以通过在markdown中输入url来显示icon。</p><p>对于默认的样式，在markdown文件中引入 <a href="https://img.shields.io/badge/%E5%89%8D%E5%8D%8A%E9%83%A8%E5%88%86-%E5%90%8E%E5%8D%8A%E9%83%A8%E5%88%86-blue">https://img.shields.io/badge/前半部分-后半部分-blue</a> 来显示一个icon：</p><p><img src="https://img.shields.io/badge/%E5%89%8D%E5%8D%8A%E9%83%A8%E5%88%86-%E5%90%8E%E5%8D%8A%E9%83%A8%E5%88%86-blue" alt="示例icon1"></p><p>参数可以修改，其中颜色可以用六位十六进制数表示：</p><p><img src="https://img.shields.io/badge/Part1-Part2-FF0000" alt="示例icon2"><br><em><a href="https://img.shields.io/badge/Part1-Part2-FF0000">https://img.shields.io/badge/Part1-Part2-FF0000</a></em></p><p>这和我们想要的效果差的有点远，别担心，回到shields.io的页面，在下方的 Query Parameters 中说明了我们可以在url中添加参数来调整icon的样式。</p><ul><li><p>style：默认为flat，改成 flat-square 变成方角</p></li><li><p>logo：显示在icon左半部分，使用图标slug引用。文档告诉我们可以在 <a href="https://github.com/simple-icons/simple-icons/blob/master/slugs.md">Simple Icons slugs</a> 中找到logo对应的值。</p></li><li><p>logoColor：logo的颜色。同样可以使用十六进制表示。</p></li></ul><p>综上，我们可以实现这样的icon：</p><p><img src="https://img.shields.io/badge/-Hexo-0073AA?style=flat-square&logo=hexo&logoColor=ffffff" alt="Hexo"><br><em><a href="https://img.shields.io/badge/-Hexo-0073AA?style=flat-square&logo=hexo&logoColor=ffffff">https://img.shields.io/badge/-Hexo-0073AA?style=flat-square&amp;logo=hexo&amp;logoColor=ffffff</a></em></p><p>其中左半部分的文字（label）为空</p><p>剩下就是依葫芦画瓢，可以加入其他参数让icon更美观。</p><h2 id="Github-Stats"><a href="#Github-Stats" class="headerlink" title="Github Stats"></a>Github Stats</h2><p>注意到还有张 Github Stats 的图片，上边显示你github的各项数值，同时打了一个等级，看起来也很炫酷，copy了！</p><p>怎么做呢？这其实是引用了 <strong><a href="https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md">GitHub Readme Stats</a></strong> ，可以在README.md中获取动态生成的gitHub统计信息。</p><p>进入 GitHub Readme Stats 的文档，文档里直接告诉你了将以下代码复制进README.md文件就可以：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![GitHub stats</span>](<span class="link">https://github-readme-stats.vercel.app/api?username=你的Github昵称</span>)](<span class="link">https://github.com/你的Github昵称/github-readme-stats</span>)    // 替换其中的Github昵称</span><br></pre></td></tr></table></figure><p>当然官方也提供了其他参数支持自定义，可以选择隐藏指定信息或修改主题颜色等。具体方法文档里都有，此处省略。</p><p>这个项目非常强大，还支持编程语言统计（柱状图、环形图和饼状图），以及将仓库卡片展示到README.md中，最重要的是有中文文档！Star了！</p><h2 id="贪吃蛇动图"><a href="#贪吃蛇动图" class="headerlink" title="贪吃蛇动图"></a>贪吃蛇动图</h2><p>具体步骤参考<a href="https://www.bilibili.com/video/BV1W94y1v7cB/?buvid=XU8C5CD8CA5CCD21BCA0598FC11578AA253A9&is_story_h5=false&mid=Hf5yMXVHanJeWLR1hhRTlg==&p=1&plat_id=287&share_from=ugc&share_medium=android&share_plat=android&share_session_id=f050ac0e-a9bd-4590-9a13-ca8ce69f2c65&share_source=QQ&share_tag=s_i&timestamp=1693472644&unique_k=HHwMfHH&up_id=15445514&vd_source=e3fbdccb87e9bd8a60a0b5e2c27c579d">这个视频</a></p><p>并且，就在我写这篇博文的时候，突然发现这个up还找到了Github上一个profile巨丰富的用户：<a href="https://github.com/BEPb">https://github.com/BEPb</a></p><p>当然这家伙的首页内容对于一般人来说就过于花里胡哨了，我们没必要整太多华而不实的东西，挑一两个喜欢的效果装扮一下自己的主页就好了。</p><p><img src="/images/Github%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/github_overview.png" alt="我的Github首页"></p><p><em>我的Github首页</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文介绍如何把你的Github首页打扮的花里胡哨。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;p style=&quot;color:red;&quot;&gt;注：本文章内的icon可能需要vpn才能加载出来&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;在Github首页展示自定义内容&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="整点花活" scheme="http://princesaoke.github.io/categories/%E6%95%B4%E7%82%B9%E8%8A%B1%E6%B4%BB/"/>
    
    
    <category term="Github" scheme="http://princesaoke.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="http://princesaoke.github.io/2023/09/02/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://princesaoke.github.io/2023/09/02/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-09-02T03:40:09.000Z</published>
    <updated>2023-09-17T07:08:09.153Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何使用Hexo搭建一个个人博客。</p><h2 id="一、安装Node-js"><a href="#一、安装Node-js" class="headerlink" title="一、安装Node.js"></a>一、安装Node.js</h2><p>关于安装node.js这部分，我参考的是<a href="https://blog.csdn.net/WHF__/article/details/129362462" title="https://blog.csdn.net/WHF__/article/details/129362462">这篇文章</a>。</p><p>首先到<a href="https://nodejs.org/zh-cn/download" title="https://nodejs.org/zh-cn/download">node.js中文官网</a>下载安装包。</p><p>运行安装包，修改安装路径，不勾选 necessary tools，一路next安装完毕。默认的设置是有安装npm的，这个很重要，相当于应用商店，第三方的包都通过它下载，必装。</p><p>顺便吐槽一句这个npm是真的辣鸡，明明用了淘宝镜像还是一样下载不动，然后过一会就又好了，玄学网络。而且下载完一个包也无法继续输入命令，只能关掉cmd重新打开，蠢的一批，隔壁python的pip都没有这种问题。</p><p>win+r输入cmd打开命令提示符，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure><p>查看node版本，如果提示“不是内部或外部命令”说明没安装成功。</p><p>npm也是一样，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>查看npm版本。</p><h2 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h2><p>成功安装node.js和npm后，继续在cmd中输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装Hexo。</p><p>合理外推卸载命令就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g hexo-cli</span><br></pre></td></tr></table></figure><p>注意到有个-g，意思是全局安装，不加-g就是在当前文件夹局部安装，出了当前文件夹就相当于没安装，类比python的虚拟环境。</p><p>同时还有 hexo 和 hexo-cli 的区别，之前也疑惑过 vue 和 vue-cli，这个我暂时还不太明白。总之有-cli和没有是两个不同的东西。按我理解，用hexo就是把hexo整个框架都下载下来，而用hexo-cli就是只下载hexo的一些命令，用创建hexo项目的时候用命令远程拉取模板。不知道我理解的对不对。</p><h2 id="三、创建Hexo项目"><a href="#三、创建Hexo项目" class="headerlink" title="三、创建Hexo项目"></a>三、创建Hexo项目</h2><p>cmd输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init personal-hexo</span><br></pre></td></tr></table></figure><p>新建hexo项目。其中personal-hexo是创建的hexo项目的名称</p><p>进入hexo项目的文件夹，一手</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>安装依赖包。</p><p>再一手</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>启动hexo服务器。这时会告诉你hexo正在本地运行，打开它给的地址 <a href="http://localhost:4000/">http://localhost:4000/</a> ，就可以看到hexo的默认页面了。</p><h2 id="四、Hexo使用指南"><a href="#四、Hexo使用指南" class="headerlink" title="四、Hexo使用指南"></a>四、Hexo使用指南</h2><p>IDE打开hexo项目，先看项目结构。根目录下，scaffolds文件夹里存放模板文件。scaffolds&#x2F;post.md 文件就是文章的模板文件，比如往里面加一条categories，新建的博文就会带上这个字段。</p><p>scaffolds&#x2F;_config.yml 文件是整个博客网站的配置文件。title就是HTML中的title，subtitle和description想填什么就填什么，author改成自己，language改成zh-CN，url改成 <u><strong>http:&#x2F;&#x2F;你的Github昵称.github.io</strong></u> ，其他暂时都不用改。</p><p>scaffolds&#x2F;source 文件夹下的是网站的主体，其中的文件夹可以通过url访问到，以下划线开头的文件夹除外。</p><p>scaffolds&#x2F;source&#x2F;_posts 中存放的即我们的博客。在终端中执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new Hexo搭建个人博客</span><br></pre></td></tr></table></figure><p>其中”Hexo搭建个人博客”是文章名。</p><p>发现 scaffolds&#x2F;source&#x2F;_posts 中多了刚才新建的文章，打开浏览器也可以看到博文创建成功了。现在可以用markdown尽情编辑博文了！</p><h2 id="五、更换主题"><a href="#五、更换主题" class="headerlink" title="五、更换主题"></a>五、更换主题</h2><p>我使用的是 hexo-theme-pure 主题，Github地址<a href="https://github.com/cofess/hexo-theme-pure" title="https://github.com/cofess/hexo-theme-pure">在这</a>，Gitee地址<a href="https://gitee.com/mirrors_cofess/hexo-theme-pure#hexo-wordcount" title="https://gitee.com/mirrors_cofess/hexo-theme-pure#hexo-wordcount">在这</a>。建议看Gitee上的，文档是中文。</p><p>第三方的主题都放在themes文件夹下。项目根目录下终端执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/cofess/hexo-theme-pure.git themes/pure</span><br></pre></td></tr></table></figure><p>themes&#x2F;pure&#x2F;_config.yml 是主题的配置文件。按需配置，我的配置如下：</p><h3 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h3><p>决定菜单中有哪些栏目。由于我没有豆瓣号，就把豆瓣书单那一栏注释掉了，这样就没有豆瓣书单这个页面。</p><h3 id="site"><a href="#site" class="headerlink" title="site"></a>site</h3><p>决定博客网站的基本配置。</p><p>根据logo中的url找到对应的图片，即博客的头像，改成自己的图片。</p><p>title就是HTML中的title</p><p>favicon即浏览器标签上的图标，找到 themes&#x2F;pure&#x2F;source&#x2F;favicon.png，改成自己的图片。</p><p>board是公告，可以是HTML中的元素</p><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>skin可以更改主题颜色，除默认的白色外还有 theme-black theme-blue theme-green theme-purple 四种。</p><h3 id="donate"><a href="#donate" class="headerlink" title="donate"></a>donate</h3><p>文章底部请作者喝咖啡的赞赏部分。我不喜欢，enable改成false就不显示了。要保留的话按对应路径找到图片替换成自己的。</p><h3 id="share"><a href="#share" class="headerlink" title="share"></a>share</h3><p>文章底部的分享部分。sites是电脑网页显示的，mobile_sites是手机网页端显示的，可以加的值有 qq,wechat,qzone,weibo,facebook,twitter</p><h3 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h3><p>platform有github和gitee两种，username填你对应托管平台的用户名。</p><h3 id="pv"><a href="#pv" class="headerlink" title="pv"></a>pv</h3><p>用于统计你的网站有多少访客。提供了不蒜子和leancloud两种方式，我用的是不蒜子，把busuanzi下的enable设为true。</p><h3 id="postCount"><a href="#postCount" class="headerlink" title="postCount"></a>postCount</h3><p>统计你每一篇文章的字数和阅读时间。要开启哪一个功能就把对应的值设为true，enable为true则这两个功能都失效。</p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>一些个人资料。按前面的方法自行配置就好了。</p><h3 id="复制-source"><a href="#复制-source" class="headerlink" title="复制_source"></a>复制_source</h3><p>把 themes&#x2F;pure&#x2F;_source里的所有文件夹（除去你前面menu那里注释掉的界面，比如我不需要豆瓣书单，books文件夹就不需要复制）复制到根目录下的source文件里。_data和404也复制过去。_data里的links.yml文件中是友情链接，每个友情链接按如下格式：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">MyFriendName:</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">https://his_link/</span>         <span class="string">//</span> <span class="string">改成朋友的链接</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">https://his_avatar.png</span>  <span class="string">//</span> <span class="string">改成朋友的头像url</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">&quot;His discription&quot;</span>         <span class="string">//</span> <span class="string">给朋友的描述</span></span><br></pre></td></tr></table></figure><p>_data里的gallery.yml文件是干什么的我暂时还没搞懂。</p><p>现在重新访问浏览器，发现你的博客网站已经大变样了，一切操作正确的话不会出现任何问题。</p><h2 id="六、将Hexo部署到-Github-Pages"><a href="#六、将Hexo部署到-Github-Pages" class="headerlink" title="六、将Hexo部署到 Github Pages"></a>六、将Hexo部署到 Github Pages</h2><p>使用 hexo-deployer-git。参考<a href="https://zhuanlan.zhihu.com/p/611037765" title="https://zhuanlan.zhihu.com/p/611037765">这篇文章</a>。</p><p>先在自己的github上新建一个仓库，仓库名为 <strong>你的Github昵称.github.io</strong> ，如 PrinceSaoKe.github.io。</p><p>在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装 hexo-deployer-git。</p><p>打开根目录下的_config.yml文件，滑到最底下找到deploy，改成</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://github.com/你的github昵称/你的github昵称.github.io</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span>  <span class="string">//</span> <span class="string">注意看你仓库的主分支是master还是main，一般是master</span></span><br></pre></td></tr></table></figure><p>最后，依次在终端输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl     // 清理之前的页面</span><br><span class="line">hexo g      // 生成新的页面</span><br><span class="line">hexo d      // 部署网站到创建的仓库</span><br></pre></td></tr></table></figure><p>刚部署完可能要过一两分钟，然后在任意一个设备的浏览器输入网址 <u><strong>http:&#x2F;&#x2F;你的Github昵称.github.io</strong></u> 就可以访问到你的hexo博客啦！</p><hr><p><em>写博客好累，后面应该不会写得这么详细了。我的hexo个人博客也上传到了github，<a href="https://princesaoke.github.io/" title="https://PrinceSaoKe.github.io">欢迎参观</a></em></p><p><img src="/images/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/my_hexo.png" alt="我的个人博客"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文介绍如何使用Hexo搭建一个个人博客。&lt;/p&gt;
&lt;h2 id=&quot;一、安装Node-js&quot;&gt;&lt;a href=&quot;#一、安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;一、安装Node.js&quot;&gt;&lt;/a&gt;一、安装Node.js&lt;/h2&gt;&lt;p&gt;关于安装n</summary>
      
    
    
    
    <category term="整点花活" scheme="http://princesaoke.github.io/categories/%E6%95%B4%E7%82%B9%E8%8A%B1%E6%B4%BB/"/>
    
    
    <category term="Hexo" scheme="http://princesaoke.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
